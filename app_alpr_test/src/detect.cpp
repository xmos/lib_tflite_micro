// This file is generated. Do not edit.
// Generated on: 10.08.2022 19:51:36


#include "../../api/xcore_config.h"
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/micro/kernels/conv.h"
#include "tensorflow/lite/micro/kernels/fully_connected.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"
#include "tensorflow/lite/micro/kernels/reduce.h"
#include "tensorflow/lite/micro/kernels/softmax.h"
#include "tensorflow/lite/micro/micro_context.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace tflite {
namespace ops {
namespace micro {
namespace xcore {
extern TfLiteRegistration *Register_XC_ld_flash(void);
extern TfLiteRegistration *Register_XC_conv2d_v2(void);
} // namespace xcore
}  // namespace micro
}  // namespace ops
}  // namespace tflite

namespace {

constexpr int kTensorArenaSize = 195100;
uint8_t tensor_arena[kTensorArenaSize] ALIGN(8);
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_PAD, OP_XC_ld_flash, OP_XC_conv2d_v2, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_MEAN, OP_RESHAPE, OP_SHAPE, OP_STRIDED_SLICE, OP_PACK,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
  int custom_initial_data_size;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[148];
TfLiteEvalTensor evalTensors[148];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[127];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,128,128,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant0_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 0, 
  0, 0, 
  0, 1, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int64_t tensor_data2[2] = { 
    -1, 16, 
};
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(8) int64_t tensor_data3[4] = { 
    -1, 1, 1, 512, 
};
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const int32_t tensor_data4[1] = { 4 };
const int tensor_dimension4 = 0; /* empty TfLiteIntArray */
const ALIGN(4) int32_t tensor_data5[1] = { 
    1, 
};
const TfArray<1, int> tensor_dimension5 = { 1, { 1 } };
const ALIGN(4) int32_t tensor_data6[1] = { 
    0, 
};
const TfArray<1, int> tensor_dimension6 = { 1, { 1 } };
const ALIGN(8) int32_t tensor_data7[2] = { 
    1, 2, 
};
const TfArray<1, int> tensor_dimension7 = { 1, { 2 } };
const TfArray<4, int> tensor_dimension8 = { 4, { 1,128,128,4 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<1, int> tensor_dimension9 = { 1, { 1344 } };
const TfArray<1, int> tensor_dimension10 = { 1, { 56 } };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,64,64,24 } };
const TfArray<1, float> quant11_scale = { 1, { 0.055814195424318314, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<1, int> tensor_dimension12 = { 1, { 304 } };
const TfArray<1, int> tensor_dimension13 = { 1, { 56 } };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,32,32,24 } };
const TfArray<1, float> quant14_scale = { 1, { 0.32983857393264771, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<1, int> tensor_dimension15 = { 1, { 896 } };
const TfArray<1, int> tensor_dimension16 = { 1, { 56 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,32,32,24 } };
const TfArray<1, float> quant17_scale = { 1, { 0.15497037768363953, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<1, int> tensor_dimension18 = { 1, { 304 } };
const TfArray<1, int> tensor_dimension19 = { 1, { 56 } };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,32,32,24 } };
const TfArray<1, float> quant20_scale = { 1, { 0.29211026430130005, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<1, int> tensor_dimension21 = { 1, { 896 } };
const TfArray<1, int> tensor_dimension22 = { 1, { 56 } };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,32,32,24 } };
const TfArray<1, float> quant23_scale = { 1, { 0.18758560717105865, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<1, int> tensor_dimension24 = { 1, { 304 } };
const TfArray<1, int> tensor_dimension25 = { 1, { 56 } };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,16,16,24 } };
const TfArray<1, float> quant26_scale = { 1, { 0.19975997507572174, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<1, int> tensor_dimension27 = { 1, { 1664 } };
const TfArray<1, int> tensor_dimension28 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant29_scale = { 1, { 0.13359116017818451, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<1, int> tensor_dimension30 = { 1, { 592 } };
const TfArray<1, int> tensor_dimension31 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension32 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant32_scale = { 1, { 0.31017497181892395, } };
const TfArray<1, int> quant32_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<1, int> tensor_dimension33 = { 1, { 4096 } };
const TfArray<1, int> tensor_dimension34 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension35 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant35_scale = { 1, { 0.21609534323215485, } };
const TfArray<1, int> quant35_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<1, int> tensor_dimension36 = { 1, { 592 } };
const TfArray<1, int> tensor_dimension37 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension38 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant38_scale = { 1, { 0.25795933604240417, } };
const TfArray<1, int> quant38_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const TfArray<1, int> tensor_dimension39 = { 1, { 4096 } };
const TfArray<1, int> tensor_dimension40 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension41 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant41_scale = { 1, { 0.19192519783973694, } };
const TfArray<1, int> quant41_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const TfArray<1, int> tensor_dimension42 = { 1, { 592 } };
const TfArray<1, int> tensor_dimension43 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant44_scale = { 1, { 0.35675159096717834, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<1, int> tensor_dimension45 = { 1, { 4096 } };
const TfArray<1, int> tensor_dimension46 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant47_scale = { 1, { 0.19879361987113953, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<1, int> tensor_dimension48 = { 1, { 592 } };
const TfArray<1, int> tensor_dimension49 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant50_scale = { 1, { 0.32888862490653992, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<1, int> tensor_dimension51 = { 1, { 4096 } };
const TfArray<1, int> tensor_dimension52 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant53_scale = { 1, { 0.20466698706150055, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<1, int> tensor_dimension54 = { 1, { 592 } };
const TfArray<1, int> tensor_dimension55 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant56_scale = { 1, { 0.39270618557929993, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 64,1,1,64 } };
const TfArray<64, float> quant57_scale = { 64, { 0.0023312503471970558, 0.0024371114559471607, 0.0032090472523123026, 0.0041608507744967937, 0.0025684984866529703, 0.0054066884331405163, 0.003960722591727972, 0.0087950872257351875, 0.0021189895924180746, 0.0019526162650436163, 0.003169073723256588, 0.0039335074834525585, 0.0032740391325205564, 0.0029349732212722301, 0.0053306855261325836, 0.0017577818362042308, 0.0033016437664628029, 0.0028227926231920719, 0.0055645429529249668, 0.0024694707244634628, 0.0017910528695210814, 0.0046277227811515331, 0.0037878148723393679, 0.0028220303356647491, 0.004858353640884161, 0.0034238263033330441, 0.002342764288187027, 0.0068036587908864021, 0.0037081905175000429, 0.0022761428263038397, 0.0058290092274546623, 0.001874883659183979, 0.002785020275041461, 0.005364307202398777, 0.0030692717991769314, 0.0020470935851335526, 0.0053839627653360367, 0.0051691420376300812, 0.0026045246049761772, 0.0062235603109002113, 0.001990041695535183, 0.0017166536999866366, 0.0048446571454405785, 0.0020515159703791142, 0.0026612572837620974, 0.0026970589533448219, 0.0031142043881118298, 0.0046036806888878345, 0.0027855425141751766, 0.0033748229034245014, 0.004725415725260973, 0.0025731809437274933, 0.0026095900684595108, 0.0024339235387742519, 0.0041322223842144012, 0.0049781533889472485, 0.0035240859724581242, 0.0023913679178804159, 0.010945277288556099, 0.0021632229909300804, 0.0034557285252958536, 0.0044719544239342213, 0.004758941475301981, 0.0019438370363786817, } };
const TfArray<64, int> quant57_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<1, int> tensor_dimension58 = { 1, { 64 } };
const TfArray<64, float> quant58_scale = { 64, { 0.00091549643548205495, 0.00095706875436007977, 0.0012602127389982343, 0.0016339918365702033, 0.0010086651891469955, 0.002123239915817976, 0.0015554003184661269, 0.0034538852050900459, 0.00083214032929390669, 0.00076680450001731515, 0.0012445148313418031, 0.0015447126934304833, 0.0012857354013249278, 0.00115258211735636, 0.0020933931227773428, 0.00069029181031510234, 0.0012965758796781301, 0.0011085281148552895, 0.0021852303761988878, 0.00096977641806006432, 0.00070335756754502654, 0.0018173353746533394, 0.0014874982880428433, 0.0011082288110628724, 0.0019079055637121201, 0.0013445577351376414, 0.0009200180065818131, 0.0026718389708548784, 0.0014562293654307723, 0.00089385535102337599, 0.0022890879772603512, 0.00073627842357382178, 0.0010936947073787451, 0.0021065967157483101, 0.0012053219834342599, 0.00080390629591420293, 0.0021143155172467232, 0.0020299539901316166, 0.0010228129103779793, 0.0024440307170152664, 0.00078150170156732202, 0.00067414052318781614, 0.0019025268265977502, 0.00080564303789287806, 0.0010450922418385744, 0.0010591517202556133, 0.0012229672865942121, 0.0018078938592225313, 0.0010938998311758041, 0.0013253138167783618, 0.0018556999275460839, 0.0010105040855705738, 0.0010248022153973579, 0.00095581682398915291, 0.0016227492596954107, 0.0019549515563994646, 0.0013839303283020854, 0.00093910499708727002, 0.0042982781305909157, 0.00084951106691733003, 0.0013570860028266907, 0.0017561641288921237, 0.0018688658019527793, 0.00076335680205374956, } };
const TfArray<64, int> quant58_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant59_scale = { 1, { 0.23255391418933868, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<1, int> tensor_dimension60 = { 1, { 592 } };
const TfArray<1, int> tensor_dimension61 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant62_scale = { 1, { 0.38274595141410828, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<1, int> tensor_dimension63 = { 1, { 4096 } };
const TfArray<1, int> tensor_dimension64 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant65_scale = { 1, { 0.23691405355930328, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<1, int> tensor_dimension66 = { 1, { 592 } };
const TfArray<1, int> tensor_dimension67 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant68_scale = { 1, { 0.33658787608146667, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 64,1,1,64 } };
const TfArray<64, float> quant69_scale = { 64, { 0.0022175868507474661, 0.0024751184973865747, 0.0025675934739410877, 0.0017907503060996532, 0.0043025831691920757, 0.0044041974470019341, 0.0041666589677333832, 0.003978438675403595, 0.0025462615303695202, 0.0024986232165247202, 0.0052228160202503204, 0.0022377532441169024, 0.0023565767332911491, 0.0059611611068248749, 0.0062044817022979259, 0.0025391699746251106, 0.0029266758356243372, 0.0031901870388537645, 0.004697736818343401, 0.0028711182530969381, 0.0031999459024518728, 0.0027878996916115284, 0.010057404637336731, 0.0048734117299318314, 0.0021456715185195208, 0.0018774566706269979, 0.0020787692628800869, 0.0038355416618287563, 0.0038385062944144011, 0.0030473349615931511, 0.0028113683219999075, 0.0020645987242460251, 0.0028483183123171329, 0.0055438065901398659, 0.0072754942812025547, 0.0024199706967920065, 0.0061309933662414551, 0.0026762059424072504, 0.0036369501613080502, 0.0032508648000657558, 0.0036234860308468342, 0.002081975806504488, 0.0042320261709392071, 0.0037536113522946835, 0.0029631496872752905, 0.0032266546040773392, 0.0028588962741196156, 0.0034648277796804905, 0.0077055455185472965, 0.012535686604678631, 0.0060973153449594975, 0.0022203989792615175, 0.0060383942909538746, 0.0028986828401684761, 0.0029145285952836275, 0.0034275271464139223, 0.0051087471656501293, 0.0042395363561809063, 0.0049424436874687672, 0.0029716985300183296, 0.0040342826396226883, 0.0040325261652469635, 0.0021483718883246183, 0.0023707658983767033, } };
const TfArray<64, int> quant69_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<1, int> tensor_dimension70 = { 1, { 64 } };
const TfArray<64, float> quant70_scale = { 64, { 0.00074641284300014377, 0.00083309487672522664, 0.0008642208413220942, 0.00060274486895650625, 0.0014481972903013229, 0.0014823994133621454, 0.0014024468837305903, 0.0013390942476689816, 0.00085704075172543526, 0.00084100628737360239, 0.0017579365521669388, 0.00075320061296224594, 0.00079319515498355031, 0.0020064546260982752, 0.0020883532706648111, 0.0008546538301743567, 0.00098508363589644432, 0.0010737782577052712, 0.0015812012134119868, 0.00096638360992074013, 0.00107706303242594, 0.00093837321037426591, 0.003385200398042798, 0.0016403313493356109, 0.0007222070125862956, 0.00063192914240062237, 0.00069968850584700704, 0.0012909967917948961, 0.0012919947039335966, 0.0010256960522383451, 0.00094627251382917166, 0.0006949189119040966, 0.00095870939549058676, 0.0018659781198948622, 0.0024488430935889482, 0.00081453280290588737, 0.002063618041574955, 0.00090077845379710197, 0.0012241533258929849, 0.0010942016961053014, 0.0012196215102449059, 0.00070076779229566455, 0.0014244486810639501, 0.0012634200975298882, 0.00099736021365970373, 0.0010860528564080596, 0.00096226984169334173, 0.0011662190081551671, 0.002593593206256628, 0.0042193601839244366, 0.0020522824488580227, 0.00074735935777425766, 0.0020324504002928734, 0.00097566150361672044, 0.00098099501337856054, 0.0011536640813574195, 0.0017195423133671284, 0.0014269765233621001, 0.001663566567003727, 0.0010002376511693001, 0.0013578906655311584, 0.0013572993921115994, 0.0007231159252114594, 0.0007979710353538394, } };
const TfArray<64, int> quant70_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,16,16,64 } };
const TfArray<1, float> quant71_scale = { 1, { 0.22577115893363953, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfArray<1, int> tensor_dimension72 = { 1, { 592 } };
const TfArray<1, int> tensor_dimension73 = { 1, { 128 } };
const TfArray<4, int> tensor_dimension74 = { 4, { 1,8,8,64 } };
const TfArray<1, float> quant74_scale = { 1, { 0.20332926511764526, } };
const TfArray<1, int> quant74_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const TfArray<1, int> tensor_dimension75 = { 1, { 8192 } };
const TfArray<1, int> tensor_dimension76 = { 1, { 256 } };
const TfArray<4, int> tensor_dimension77 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant77_scale = { 1, { 0.14627194404602051, } };
const TfArray<1, int> quant77_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const TfArray<1, int> tensor_dimension78 = { 1, { 1168 } };
const TfArray<1, int> tensor_dimension79 = { 1, { 256 } };
const TfArray<4, int> tensor_dimension80 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant80_scale = { 1, { 0.25234436988830566, } };
const TfArray<1, int> quant80_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const TfArray<4, int> tensor_dimension81 = { 4, { 128,1,1,128 } };
const TfArray<128, float> quant81_scale = { 128, { 0.0041402070783078671, 0.0014312352286651731, 0.0046086162328720093, 0.0049470006488263607, 0.0037721486296504736, 0.002052743686363101, 0.0047822613269090652, 0.0019728979095816612, 0.0024571460671722889, 0.0040402249433100224, 0.0031378781422972679, 0.0028704903088510036, 0.0024525185581296682, 0.0045932880602777004, 0.0040940269827842712, 0.003937816247344017, 0.002659487072378397, 0.0020430476870387793, 0.0032462067902088165, 0.0027463193982839584, 0.0026132334023714066, 0.0020486172288656235, 0.0024387186858803034, 0.0047276057302951813, 0.0053058345802128315, 0.0049575613811612129, 0.0050117988139390945, 0.0030248032417148352, 0.0027432949282228947, 0.0065702963620424271, 0.001548130065202713, 0.0029359774198383093, 0.004069548100233078, 0.0019596430938690901, 0.003820313373580575, 0.0045477813109755516, 0.0032134943176060915, 0.0029471986927092075, 0.001717480132356286, 0.001730102114379406, 0.0025163653772324324, 0.002945140702649951, 0.0051668104715645313, 0.0034285169094800949, 0.0022511444985866547, 0.0027336676139384508, 0.0016730730421841145, 0.0058270436711609364, 0.0039309542626142502, 0.0043237935751676559, 0.0027238018810749054, 0.0019989488646388054, 0.0032242198940366507, 0.0049321348778903484, 0.0033013266511261463, 0.0020576270762830973, 0.0022695071529597044, 0.0024061354342848063, 0.0018634889274835587, 0.0015925128245726228, 0.0038796726148575544, 0.0045040575787425041, 0.0054144402965903282, 0.0026983637362718582, 0.0047863977961242199, 0.0043231360614299774, 0.0034199971705675125, 0.0050041647627949715, 0.0017291693948209286, 0.0041774027049541473, 0.001821066252887249, 0.0028844499029219151, 0.0025169278960675001, 0.0030466299504041672, 0.0037949713878333569, 0.0029489586595445871, 0.0029766913503408432, 0.002112699905410409, 0.0018165305955335498, 0.0045094168744981289, 0.0027128551155328751, 0.0044738366268575191, 0.0019530423451215029, 0.006405913271009922, 0.0029767367523163557, 0.0047670626081526279, 0.0020241688471287489, 0.0040646609850227833, 0.0018068850040435791, 0.0021688805427402258, 0.0039036162197589874, 0.003104514442384243, 0.0027404988650232553, 0.0016258358955383301, 0.0050123282708227634, 0.0054031298495829105, 0.0033187353983521461, 0.0023971619084477425, 0.001912125269882381, 0.0053701861761510372, 0.0019373170798644423, 0.0034817708656191826, 0.0032117436639964581, 0.0022829086519777775, 0.0030934384558349848, 0.0018354649655520916, 0.0025141544174402952, 0.0025188266299664974, 0.0023633695673197508, 0.0035290343221276999, 0.0032898429781198502, 0.00434065330773592, 0.0034371502697467804, 0.0034964079968631268, 0.0044946391135454178, 0.0015222630463540554, 0.004309438169002533, 0.0031394842080771923, 0.0014129006303846836, 0.0024902697186917067, 0.0048144273459911346, 0.0027140430174767971, 0.0047399629838764668, 0.0023683567997068167, 0.0040070763789117336, 0.0023024261463433504, 0.0020024797413498163, 0.0015025627799332142, } };
const TfArray<128, int> quant81_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<1, int> tensor_dimension82 = { 1, { 128 } };
const TfArray<128, float> quant82_scale = { 128, { 0.0010447578970342875, 0.00036116415867581964, 0.0011629583314061165, 0.0012483478058129549, 0.00095188047271221876, 0.00051799829816445708, 0.0012067767092958093, 0.00049784965813159943, 0.00062004697974771261, 0.0010195280192419887, 0.0007918258779682219, 0.00072435208130627871, 0.00061887927586212754, 0.0011590904323384166, 0.0010331046069040895, 0.00099368579685688019, 0.00067110656527802348, 0.00051555159734562039, 0.00081916199997067451, 0.00069301825715228915, 0.000659434765111655, 0.00051695702131837606, 0.00061539694434031844, 0.0011929846368730068, 0.001338897505775094, 0.0012510126689448953, 0.0012646992690861225, 0.00076329207513481379, 0.00069225503830239177, 0.001657977350987494, 0.00039066190947778523, 0.00074087735265493393, 0.0010269274935126305, 0.00049450492952018976, 0.00096403458155691624, 0.0011476069921627641, 0.00081090722233057022, 0.00074370898073539138, 0.00043339643161743879, 0.00043658152571879327, 0.0006349906325340271, 0.00074318965198472142, 0.0013038155157119036, 0.0008651669486425817, 0.00056806363863870502, 0.00068982562515884638, 0.00042219055467285216, 0.0014704216737300158, 0.00099195411894470453, 0.0010910849086940289, 0.00068733608350157738, 0.00050442351493984461, 0.00081361376214772463, 0.0012445964384824038, 0.00083307118620723486, 0.0005192306125536561, 0.00057269737590104342, 0.00060717470478266478, 0.00047024094965308905, 0.00040186164551414549, 0.00097901350818574429, 0.0011365736136212945, 0.0013663035351783037, 0.00068091688444837928, 0.0012078204890713096, 0.0010909190168604255, 0.00086301704868674278, 0.0012627728283405304, 0.00043634616304188967, 0.0010541439987719059, 0.00045953580411151052, 0.00072787469252943993, 0.00063513260101899505, 0.00076879991684108973, 0.00095763965509831905, 0.00074415310518816113, 0.00075115129584446549, 0.0005331279244273901, 0.00045839126687496901, 0.001137926010414958, 0.00068457372253760695, 0.0011289474787190557, 0.00049283925909548998, 0.0016164961270987988, 0.00075116276275366545, 0.0012029414065182209, 0.00051078759133815765, 0.0010256943060085177, 0.00045595725532621145, 0.00054730480769649148, 0.00098505557980388403, 0.00078340672189369798, 0.00069154944503679872, 0.00041027052793651819, 0.001264832797460258, 0.0013634493807330728, 0.00083746417658403516, 0.00060491031035780907, 0.00048251403495669365, 0.0013551362790167332, 0.00048887106822803617, 0.00087860529311001301, 0.000810465426184237, 0.00057607912458479404, 0.00078061176463961601, 0.00046316924272105098, 0.00063443271210417151, 0.0006356117082759738, 0.00059638300444930792, 0.00089053192641586065, 0.0008301733760163188, 0.001095339423045516, 0.00086734554497525096, 0.00088229886023327708, 0.0011341968784108758, 0.00038413450238294899, 0.0010874624131247401, 0.00079223117791116238, 0.00035653752274811268, 0.00062840554164722562, 0.0012148936511948705, 0.00068487349199131131, 0.0011961029376834631, 0.000597641512285918, 0.0010111631127074361, 0.00058100424939766526, 0.00050531449960544705, 0.00037916324799880385, } };
const TfArray<128, int> quant82_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const TfArray<4, int> tensor_dimension83 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant83_scale = { 1, { 0.17367221415042877, } };
const TfArray<1, int> quant83_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const TfArray<1, int> tensor_dimension84 = { 1, { 1168 } };
const TfArray<1, int> tensor_dimension85 = { 1, { 256 } };
const TfArray<4, int> tensor_dimension86 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant86_scale = { 1, { 0.19325248897075653, } };
const TfArray<1, int> quant86_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<4, int> tensor_dimension87 = { 4, { 128,1,1,128 } };
const TfArray<128, float> quant87_scale = { 128, { 0.0019122313242405653, 0.0033276446629315615, 0.0017234068363904953, 0.0038072366733103991, 0.0063309688121080399, 0.0025296425446867943, 0.0013369047082960606, 0.0017526667797937989, 0.0043679601512849331, 0.0033225417137145996, 0.0041401917114853859, 0.0019112766021862626, 0.0029477383941411972, 0.0038194267544895411, 0.0029610800556838512, 0.0020850272849202156, 0.001842543832026422, 0.0034855282865464687, 0.0028616387862712145, 0.0033316386397927999, 0.0039911041967570782, 0.0035905190743505955, 0.0036171965766698122, 0.0029465062543749809, 0.0017627374036237597, 0.0034487235825508833, 0.0021280825603753328, 0.0025935699231922626, 0.0040481952019035816, 0.0056984089314937592, 0.0033120245207101107, 0.0021341654937714338, 0.0026698706205934286, 0.0023788709659129381, 0.0020874440670013428, 0.0013606116408482194, 0.0043287738226354122, 0.0021289680153131485, 0.001614979119040072, 0.0055791703052818775, 0.0018995526479557157, 0.0017008001450449228, 0.0045548509806394577, 0.0036672840360552073, 0.0020574727095663548, 0.003140750341117382, 0.0021189292892813683, 0.0051498720422387123, 0.0062063909135758877, 0.0043149520643055439, 0.002782836090773344, 0.0071633802726864815, 0.0034871571697294712, 0.0039041526615619659, 0.002768621314316988, 0.001556581468321383, 0.002872448181733489, 0.004195233341306448, 0.0030324249528348446, 0.0033209819812327623, 0.0023260996676981449, 0.0023091104812920094, 0.0025767285842448473, 0.0022370454389601946, 0.0024201914202421904, 0.0029213177040219307, 0.0038180381525307894, 0.0038852319121360779, 0.0047285393811762333, 0.0051645184867084026, 0.0014172546798363328, 0.0028425545897334814, 0.0033988608047366142, 0.0021271368023008108, 0.0030228167306631804, 0.0025061157066375017, 0.0025323680602014065, 0.001971453195437789, 0.0033294276800006628, 0.001457030070014298, 0.0036191099788993597, 0.0044236169196665287, 0.0020776123274117708, 0.0031375379767268896, 0.0050668595358729362, 0.0027524838224053383, 0.0034097081515938044, 0.0066831186413764954, 0.0024668828118592501, 0.0047123930417001247, 0.0045131547376513481, 0.0032793672289699316, 0.0032825572416186333, 0.0015160918701440096, 0.0017926612636074424, 0.00360117107629776, 0.0024882394354790449, 0.0027731931768357754, 0.0050690025091171265, 0.001994637306779623, 0.0015557985752820969, 0.0039977175183594227, 0.0023982711136341095, 0.0054227286018431187, 0.0043401638977229595, 0.0033386466093361378, 0.0022575389593839645, 0.0023281795438379049, 0.0027279015630483627, 0.0021576669532805681, 0.0070963152684271336, 0.0020666986238211393, 0.0045693730935454369, 0.0027045700699090958, 0.0025477220769971609, 0.0057080946862697601, 0.0020921009127050638, 0.002616675803437829, 0.0041555236093699932, 0.0028503818903118372, 0.0062223388813436031, 0.002535918727517128, 0.0031766856554895639, 0.0054176626726984978, 0.0019677300006151199, 0.0016314112581312656, 0.0030101819429546595, 0.0027967614587396383, } };
const TfArray<128, int> quant87_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const TfArray<1, int> tensor_dimension88 = { 1, { 128 } };
const TfArray<128, float> quant88_scale = { 128, { 0.00036954347160644829, 0.00064307561842724681, 0.00033305265242233872, 0.00073575798887759447, 0.0012234754394739866, 0.00048885971773415804, 0.00025836017448455095, 0.00033870720653794706, 0.00084411917487159371, 0.00064208946423605084, 0.00080010236706584692, 0.0003693589533213526, 0.00056965777184814215, 0.00073811371112242341, 0.00057223608018830419, 0.00040293671190738678, 0.00035607616882771254, 0.00067358702654018998, 0.00055301882093772292, 0.00064384745201095939, 0.00077129079727455974, 0.00069387676194310188, 0.00069903221447020769, 0.00056941964430734515, 0.00034065337968058884, 0.00066647439962252975, 0.00041125726420432329, 0.00050121382810175419, 0.00078232382657006383, 0.0011012316681444645, 0.00064005696913227439, 0.00041243279702030122, 0.00051595916738733649, 0.00045972273801453412, 0.00040340377017855644, 0.00026294158305972815, 0.00083654629997909069, 0.00041142836562357843, 0.0003120987385045737, 0.0010781885357573628, 0.0003670932783279568, 0.00032868384732864797, 0.00088023627176880836, 0.00070871174102649093, 0.0003976117295678705, 0.0006069578230381012, 0.00040948836249299347, 0.00099522562231868505, 0.0011994005180895329, 0.00083387520862743258, 0.00053779000882059336, 0.0013843410415574908, 0.00067390181357041001, 0.00075448723509907722, 0.00053504295647144318, 0.00030081323347985744, 0.00055510777747258544, 0.00081073929322883487, 0.0005860236706212163, 0.00064178800676018, 0.00044952455209568143, 0.0004462413489818573, 0.00049795920494943857, 0.00043231461313553154, 0.00046770801418460906, 0.00056455191224813461, 0.00073784537380561233, 0.00075083074625581503, 0.00091380201047286391, 0.00099805602803826332, 0.000273887999355793, 0.00054933072533458471, 0.00065683829598128796, 0.000411074492149055, 0.00058416684623807669, 0.00048431308823637664, 0.00048938643885776401, 0.0003809882327914238, 0.00064342020777985454, 0.00028157469932921231, 0.00069940200773999095, 0.00085487496107816696, 0.00040150375571101904, 0.00060633703833445907, 0.00097918324172496796, 0.00053192436462268233, 0.00065893458668142557, 0.0012915292754769325, 0.00047673124936409295, 0.00091068167239427567, 0.00087217841064557433, 0.0006337458617053926, 0.00063436233904212713, 0.0002929885231424123, 0.00034643625258468091, 0.00069593527587130666, 0.00048085846356116235, 0.0005359264905564487, 0.00097959733102470636, 0.00038546862197108567, 0.00030066195176914334, 0.00077256886288523674, 0.00046347186435014009, 0.0010479558259248734, 0.00083874748088419437, 0.00064520176965743303, 0.00043627503328025341, 0.00044992650509811938, 0.00052717374637722969, 0.00041697450797073543, 0.00137138064019382, 0.00039939465932548046, 0.00088304269593209028, 0.00052266492275521159, 0.00049235363258048892, 0.0011031035101041198, 0.00040430371882393956, 0.00050567911239340901, 0.00080306525342166424, 0.00055084336781874299, 0.0012024824973195791, 0.00049007259076461196, 0.00061390240443870425, 0.0010469767730683088, 0.00038026872789487243, 0.00031527428654953837, 0.00058172515127807856, 0.0005404811236076057, } };
const TfArray<128, int> quant88_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const TfArray<4, int> tensor_dimension89 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant89_scale = { 1, { 0.11876781284809113, } };
const TfArray<1, int> quant89_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const TfArray<1, int> tensor_dimension90 = { 1, { 1168 } };
const TfArray<1, int> tensor_dimension91 = { 1, { 256 } };
const TfArray<4, int> tensor_dimension92 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant92_scale = { 1, { 0.21628385782241821, } };
const TfArray<1, int> quant92_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const TfArray<1, int> tensor_dimension93 = { 1, { 16384 } };
const TfArray<1, int> tensor_dimension94 = { 1, { 256 } };
const TfArray<4, int> tensor_dimension95 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant95_scale = { 1, { 0.15667349100112915, } };
const TfArray<1, int> quant95_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const TfArray<1, int> tensor_dimension96 = { 1, { 1168 } };
const TfArray<1, int> tensor_dimension97 = { 1, { 256 } };
const TfArray<4, int> tensor_dimension98 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant98_scale = { 1, { 0.38174569606781006, } };
const TfArray<1, int> quant98_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant98 = { (TfLiteFloatArray*)&quant98_scale, (TfLiteIntArray*)&quant98_zero, 0 };
const TfArray<4, int> tensor_dimension99 = { 4, { 128,1,1,128 } };
const TfArray<128, float> quant99_scale = { 128, { 0.0020103312563151121, 0.0019138455390930176, 0.0019227296579629183, 0.0036343492101877928, 0.0051917722448706627, 0.0029620006680488586, 0.0048430371098220348, 0.002681076992303133, 0.0026157211977988482, 0.0022497153840959072, 0.0020393519662320614, 0.0035857248585671186, 0.0025609822478145361, 0.0039270883426070213, 0.0051032067276537418, 0.0033865072764456272, 0.003264938946813345, 0.0034623937681317329, 0.0022431232500821352, 0.0030042924918234348, 0.0031368201598525047, 0.0054506352171301842, 0.0029462429229170084, 0.0052257394418120384, 0.0030458883848041296, 0.005012852605432272, 0.0028918278403580189, 0.0028534433804452419, 0.0041116476058959961, 0.002209819620475173, 0.0041132005862891674, 0.0045813964679837227, 0.0023043977562338114, 0.0019090966088697314, 0.0040004909969866276, 0.003686848096549511, 0.0037642261013388634, 0.0044689709320664406, 0.0020142225548624992, 0.003947108518332243, 0.0016513514565303922, 0.0030199028551578522, 0.0029799786861985922, 0.0024149306118488312, 0.0027532964013516903, 0.0021893039811402559, 0.0048677581362426281, 0.0029379273764789104, 0.0020961903501302004, 0.0016844022320583463, 0.0033020325936377048, 0.0024931270163506269, 0.0041229999624192715, 0.0034165808465331793, 0.0041422592476010323, 0.0038450583815574646, 0.0027154802810400724, 0.0029836057219654322, 0.0034598540514707565, 0.0021116579882800579, 0.0026467416901141405, 0.0028930166736245155, 0.0075137387029826641, 0.0025263249408453703, 0.0076392251066863537, 0.0038082755636423826, 0.0030521827284246683, 0.0036118128336966038, 0.0039061957504600286, 0.00206173793412745, 0.0054588285274803638, 0.0035783178173005581, 0.0051405075937509537, 0.0020394455641508102, 0.0039243851788341999, 0.0029212301596999168, 0.0049045644700527191, 0.0040689501911401749, 0.035631824284791946, 0.0033789405133575201, 0.0038735095877200365, 0.19638553261756897, 0.002668572124093771, 0.0023402001243084669, 0.0032911375164985657, 0.0057948245666921139, 0.0038619076367467642, 0.0025997282937169075, 0.0022190650925040245, 0.0030642375349998474, 0.0043137259781360626, 0.0024702474474906921, 0.002113554161041975, 0.0042485520243644714, 0.0021416859235614538, 0.0035780018661171198, 0.0050575952045619488, 0.0036121096927672625, 0.0021681946236640215, 0.0032436151523143053, 0.0070691877044737339, 0.0045152828097343445, 0.0042076618410646915, 0.0032431960571557283, 0.0015461364528164268, 0.0027855799999088049, 0.003780687227845192, 0.002398244570940733, 0.0031731461640447378, 0.0030517734121531248, 0.0038403007201850414, 0.0032528161536902189, 0.0029223398305475712, 0.0035539751406759024, 0.0040400666184723377, 0.0026737398002296686, 0.0028140784706920385, 0.0015418082475662231, 0.003709948156028986, 0.0050882231444120407, 0.0042118784040212631, 0.0015162485651671886, 0.0019962750375270844, 0.0028945307713001966, 0.004125312902033329, 0.0025911973789334297, 0.0023063062690198421, 0.002291316632181406, } };
const TfArray<128, int> quant99_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant99 = { (TfLiteFloatArray*)&quant99_scale, (TfLiteIntArray*)&quant99_zero, 0 };
const TfArray<1, int> tensor_dimension100 = { 1, { 128 } };
const TfArray<128, float> quant100_scale = { 128, { 0.0007674352964386344, 0.00073060230351984501, 0.00073399377288296819, 0.0013873971765860915, 0.0019819366279989481, 0.0011307309614494443, 0.0018488086061552167, 0.0010234896326437593, 0.00099854031577706337, 0.00085881917038932443, 0.00077851384412497282, 0.0013688349863514304, 0.00097764399833977222, 0.0014991490170359612, 0.0019481271738186479, 0.0012927845818921924, 0.0012463764287531376, 0.001321753952652216, 0.00085630262037739158, 0.0011468756711110473, 0.0011974675580859184, 0.0020807564724236727, 0.0011247155489400029, 0.0019949034322053194, 0.001162754837423563, 0.0019136349437758327, 0.001103942864574492, 0.0010892897844314575, 0.0015696038026362658, 0.00084358913591131568, 0.0015701965894550085, 0.0017489283345639706, 0.00087969395099207759, 0.00072878942592069507, 0.0015271701849997044, 0.0014074384234845638, 0.0014369770651683211, 0.0017060104291886091, 0.000768920814152807, 0.0015067916829138994, 0.00063039630185812712, 0.0011528349714353681, 0.0011375939939171076, 0.00092188938288018107, 0.001051059109158814, 0.00083575735334306955, 0.0018582456978037953, 0.0011215411359444261, 0.0008002116228453815, 0.00064301327802240849, 0.0012605367228388786, 0.00095174048328772187, 0.0015739374794065952, 0.0013042649952694774, 0.0015812896890565753, 0.001467834459617734, 0.0010366229107603431, 0.0011389786377549171, 0.0013207844458520412, 0.00080611632438376546, 0.001010382198728621, 0.0011043966514989734, 0.0028683373238891363, 0.00096441368805244565, 0.0029162412974983454, 0.0014537927927449346, 0.0011651576496660709, 0.0013787939678877592, 0.0014911734033375978, 0.00078705960186198354, 0.0020838843192905188, 0.001366007374599576, 0.001962366746738553, 0.00077854958362877369, 0.0014981171116232872, 0.0011151670478284359, 0.0018722963286563754, 0.001553304260596633, 0.013602295890450478, 0.0012898959685117006, 0.0014786956598982215, 0.074969328939914703, 0.001018715905956924, 0.00089336134260520339, 0.0012563775526359677, 0.0022121493238955736, 0.0014742666389793158, 0.0009924350306391716, 0.00084711855743080378, 0.0011697595473378897, 0.0016467462992295623, 0.00094300630735233426, 0.00080684019485488534, 0.0016218664823099971, 0.00081757939187809825, 0.0013658867683261633, 0.0019307151669636369, 0.0013789073564112186, 0.0008276989683508873, 0.0012382360873743892, 0.0026986319571733475, 0.0017236897256225348, 0.0016062568174675107, 0.001238076132722199, 0.00059023092035204172, 0.0010633831843733788, 0.0014432610478252172, 0.0009155195439234376, 0.0012113348348066211, 0.0011650014203041792, 0.0014660182641819119, 0.0012417485704645514, 0.0011155906831845641, 0.0013567147543653846, 0.0015422780998051167, 0.0010206886800006032, 0.0010742623126134276, 0.00058857863768935204, 0.0014162567676976323, 0.0019424073398113251, 0.0016078664921224117, 0.00057882134569808841, 0.0007620694232173264, 0.0011049746535718441, 0.0015748204896226525, 0.00098917842842638493, 0.00088042247807607055, 0.00087470025755465031, } };
const TfArray<128, int> quant100_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant100 = { (TfLiteFloatArray*)&quant100_scale, (TfLiteIntArray*)&quant100_zero, 0 };
const TfArray<4, int> tensor_dimension101 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant101_scale = { 1, { 0.19746416807174683, } };
const TfArray<1, int> quant101_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant101 = { (TfLiteFloatArray*)&quant101_scale, (TfLiteIntArray*)&quant101_zero, 0 };
const ALIGN(8) int8_t tensor_data102[1*3*3*128] = { 
  /* [0][0][][] */ -70,-127,6,36,-113,-84,48,94,78,-127,-109,23,16,28,8,71,-3,-3,24,4,65,19,127,-21,-51,-50,86,57,32,-6,-127,127,23,96,-36,-30,-16,2,-33,-96,49,-7,0,9,-15,18,-106,-82,28,-26,3,-28,-30,-127,-25,-28,-82,66,0,127,-64,-8,-42,-46,127,-1,10,127,17,2,37,-50,-14,48,-127,-10,-5,-71,10,-73,-10,6,127,-55,127,-29,55,60,-17,-127,-41,-23,-75,-83,7,81,86,25,-95,7,-2,-33,-32,-20,94,78,8,-43,17,117,-51,-33,-38,121,-69,55,-49,-65,-9,3,2,-22,-4,-28,32,22,-14,-45, 127,-42,-18,58,-6,-57,-89,127,21,-20,-53,-25,28,69,62,-32,-23,127,21,-38,4,4,7,-26,75,-43,-20,-43,-30,-7,-95,-12,-78,127,-26,62,43,-27,44,-27,127,7,-1,-14,-18,-84,-8,-5,-74,21,-14,-35,28,-19,4,92,-71,108,-15,79,-98,-72,59,-46,51,-14,96,-1,-73,-1,48,-74,15,127,53,-20,-29,-22,127,8,-69,16,-13,-36,91,-77,-14,-40,-10,-44,1,-43,-74,-13,-13,30,-1,44,49,-24,34,14,-11,-19,83,-15,-16,-92,-28,0,15,-43,8,62,37,-40,127,-54,1,-19,127,-28,-21,101,-49,-29,-9,40, -43,-58,-24,-25,-8,-63,-10,38,-4,-12,-41,-127,-11,-30,127,-107,-2,-66,39,10,-62,8,-55,27,-39,127,-63,-86,-11,-32,-40,-64,4,-65,-33,100,127,-5,-34,-9,-31,-6,-21,13,-22,-35,-113,-28,-127,-5,-33,0,-7,3,-30,-14,73,-12,0,-23,-16,-22,3,29,36,8,-4,-9,-40,4,127,-109,127,64,100,-32,-44,-121,-28,7,-7,-4,29,55,-5,-50,-9,-16,-8,-61,-66,81,-76,-63,-3,-25,-47,-27,-64,-24,3,8,-19,127,127,2,-7,60,-41,30,127,-97,0,48,16,-83,38,-55,62,-16,58,4,-28,-60,-74,57,-11,-23, 
  /* [0][1][][] */ -88,-5,31,-31,-79,-74,78,25,-31,-19,8,8,-8,3,-60,-46,-33,60,-38,-127,127,-10,-12,-1,19,-84,12,-52,39,-29,-88,-14,-42,-44,-2,19,-7,6,-44,-68,-49,32,44,26,15,-38,-127,20,-75,86,32,4,-17,37,-21,-50,-54,127,60,-16,-127,35,-59,14,33,21,-18,69,13,8,12,-57,7,-54,-18,-24,35,-25,15,-44,69,-127,-11,74,-108,7,89,-109,22,-53,5,1,-25,24,-46,127,-15,-11,-111,127,10,-11,57,-58,-1,-5,-5,127,44,109,-25,-24,-51,127,-87,127,-56,127,-30,-56,3,11,-6,-53,-92,61,-11,92, -64,7,-4,127,-36,0,127,2,-33,108,-107,-31,74,127,103,48,-12,16,127,123,15,-1,-84,127,87,17,-31,-1,-41,99,0,-26,-35,-4,127,87,-19,58,127,127,-62,36,6,127,123,60,-86,81,95,127,127,127,127,84,127,127,-84,30,-2,-13,-29,51,127,-25,127,127,127,65,66,59,22,-51,8,116,-61,127,18,-36,2,102,118,-72,-47,127,85,90,-11,-62,127,-1,127,-127,127,127,-6,19,127,127,122,4,96,127,127,-29,25,127,127,-2,127,-127,29,0,127,-44,127,20,70,48,74,62,124,127,50,-25,-45,-42,127,127, -57,-39,-40,5,127,-67,-59,-107,32,73,-26,-35,28,4,-20,48,66,12,-9,-44,-26,30,-42,13,93,96,-102,-48,-13,59,98,2,127,-58,-45,22,14,35,55,-32,63,-69,-17,39,-26,-41,48,-13,-4,-4,-10,53,27,62,-2,3,107,-71,-2,10,-66,56,-11,58,-36,37,-10,-18,-92,13,-26,17,14,83,25,13,-49,-21,-58,-70,-9,-102,-21,42,46,99,-21,127,27,-17,-7,-34,-80,25,17,-26,-71,9,6,54,31,0,29,8,-9,63,32,-47,-35,-86,-44,-57,-17,-22,33,-18,3,37,127,-66,33,-29,-31,-38,-84,-36,16,-33, 
  /* [0][2][][] */ -36,-7,-11,-65,-112,-127,6,-45,-31,43,87,115,77,-12,-30,-127,14,-64,12,27,48,-17,81,-17,-109,-41,127,127,52,76,8,-17,-6,-85,54,2,2,127,-66,-14,-83,-26,127,15,127,-16,-37,127,-96,-109,-16,88,-77,27,-22,-73,-127,33,127,-9,-116,127,4,127,40,-4,13,43,127,6,-1,-97,41,-72,-35,7,127,-127,23,0,127,-29,15,-7,93,-95,74,-54,23,-93,-13,105,-29,-10,-25,82,58,16,27,-34,127,15,42,-2,25,-39,-16,-40,-22,70,34,-18,-9,31,-9,74,-68,-7,-14,-125,33,1,127,127,-127,-54,5,-16, -47,-14,127,-25,-10,-57,7,37,-25,32,-70,84,1,78,96,-19,12,19,-2,-4,84,18,43,-23,-39,-48,1,3,127,127,53,-78,22,-7,39,-6,3,-14,-45,54,-74,127,-52,-1,32,127,3,48,50,16,47,-39,4,72,-12,-34,3,-57,40,-10,-25,26,21,37,63,-16,-6,22,21,127,-30,-127,1,86,-7,98,39,18,-104,-127,-19,55,16,-25,3,-18,-127,-25,72,19,-37,-10,-3,58,127,-19,68,16,67,10,38,-2,53,-23,-85,8,70,-99,-35,-24,-70,-57,25,-19,20,71,26,-11,83,127,27,18,-16,38,31,-108,14,-53, -25,-28,24,-9,36,4,-10,110,127,28,127,37,127,6,107,57,127,115,-8,-53,-91,127,49,-34,127,118,-89,94,4,14,74,-40,0,12,-20,127,3,-44,-61,114,52,-21,-30,-3,-24,-23,21,45,31,-84,-11,-47,2,-18,10,22,125,-48,-1,19,-60,-7,2,-17,-121,-53,-41,-41,-76,-1,-78,92,-52,121,24,10,2,-49,18,-118,43,18,-28,-42,-105,127,-62,114,8,5,5,27,-8,-97,5,-13,-54,38,127,49,-42,-40,-38,-9,12,114,20,-50,19,-35,11,-127,-31,-23,-6,1,-65,-127,-9,-101,58,-57,-29,-35,13,-127,6,-19, 
};
const TfArray<4, int> tensor_dimension102 = { 4, { 1,3,3,128 } };
const TfArray<128, float> quant102_scale = { 128, { 0.0054615535773336887, 0.0069739413447678089, 0.010741423815488815, 0.010984444059431553, 0.005161716602742672, 0.0064466018229722977, 0.011534400284290314, 0.0039989710785448551, 0.0087045850232243538, 0.0051525570452213287, 0.0060488032177090645, 0.015658674761652946, 0.010128823108971119, 0.008053043857216835, 0.0049510793760418892, 0.0074334321543574333, 0.0066483770497143269, 0.005322667770087719, 0.0065868678502738476, 0.005308469757437706, 0.0059066866524517536, 0.013525567948818207, 0.0066549470648169518, 0.018070138990879059, 0.0055073448456823826, 0.0071232072077691555, 0.0058752484619617462, 0.0069963075220584869, 0.0097275245934724808, 0.0048239296302199364, 0.0044367453083395958, 0.0061470065265893936, 0.0075133335776627064, 0.0079434467479586601, 0.0078295627608895302, 0.006231189239770174, 0.0080984747037291527, 0.010821818374097347, 0.0087182438001036644, 0.0062350146472454071, 0.0044858832843601704, 0.0099972998723387718, 0.012456543743610382, 0.010907950811088085, 0.0063347751274704933, 0.0058769253082573414, 0.0054925284348428249, 0.0065239095129072666, 0.0058902385644614697, 0.0060503915883600712, 0.012468360364437103, 0.006639702245593071, 0.0066465241834521294, 0.0050068791024386883, 0.013450813479721546, 0.0082190316170454025, 0.0032623207662254572, 0.0063016638159751892, 0.0084306690841913223, 0.0087389340624213219, 0.0052304510027170181, 0.0071447975933551788, 0.007957148365676403, 0.010553688742220402, 0.0040104435756802559, 0.0064496747218072414, 0.0068802256137132645, 0.0069488012231886387, 0.010591590777039528, 0.18838323652744293, 0.010953015647828579, 0.0042466763406991959, 0.0067867864854633808, 0.0052229445427656174, 0.0059418720193207264, 0.0069621200673282146, 0.0084801847115159035, 0.005926918238401413, 0.0091363256797194481, 0.006120714358985424, 0.0040378938429057598, 0.0046140905469655991, 0.011526507325470448, 0.008651386946439743, 0.0071803377941250801, 0.0055259852670133114, 0.0062804622575640678, 0.0040184785611927509, 0.0078483875840902328, 0.0057882443070411682, 0.0081804981455206871, 0.0058635934256017208, 0.0074842791073024273, 0.0075073475018143654, 0.0079765589907765388, 0.0073114549741148949, 0.0080555295571684837, 0.011191610246896744, 0.004494896624237299, 0.0094645358622074127, 0.0064878296107053757, 0.0087933391332626343, 0.0069156363606452942, 0.0071555492468178272, 0.004703751765191555, 0.005281317513436079, 0.012642720714211464, 0.0039198826998472214, 0.011777463369071484, 0.0061645796522498131, 0.0097418613731861115, 0.0055175791494548321, 0.0082095405086874962, 0.0058188606053590775, 0.0063052256591618061, 0.004616128746420145, 0.004380740225315094, 0.0064260819926857948, 0.0091478256508708, 0.0086733456701040268, 0.0042129149660468102, 0.0085183046758174896, 0.0080970060080289841, 0.0078258262947201729, 0.005457690916955471, 0.0064130816608667374, 0.013545921072363853, 0.0070654177106916904, } };
const TfArray<128, int> quant102_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant102 = { (TfLiteFloatArray*)&quant102_scale, (TfLiteIntArray*)&quant102_zero, 3 };
const ALIGN(8) int32_t tensor_data103[128] = { 
    2346, 3491, -160, -531, 607, 5148, -646, -2493, 56, -892, 
    2341, -1100, -1366, -1396, -2370, 154, -1029, -1366, -1381, 499, 
    -545, -857, -558, -372, -748, -39, -139, -97, -53, -1660, 
    2497, 1253, -530, -72, -413, -2803, -978, -960, -64, 275, 
    1600, -515, -245, -1584, -1495, 525, 3966, -1888, 1013, -525, 
    -412, -1372, -379, -1235, -123, -191, 698, -1254, -1028, -671, 
    3626, -1997, -755, -46, -3244, -1146, -790, -1678, 84, -168, 
    -692, 3659, -950, -2078, 719, -847, -111, 3730, -3152, 2988, 
    -2430, 2924, -476, -357, -284, -300, 332, -345, -1357, 3649, 
    172, 741, 2456, -584, -518, -1112, -521, -1140, -383, -512, 
    -2026, -944, -816, -70, -1178, -1283, -690, 3191, -100, 1145, 
    223, 3228, -548, -1536, -590, -890, -315, 1155, -1411, 538, 
    -3553, 53, -278, -30, 4393, 3761, -347, -180, 
};
const TfArray<1, int> tensor_dimension103 = { 1, { 128 } };
const TfArray<128, float> quant103_scale = { 128, { 0.0010784611804410815, 0.0013771035009995103, 0.0021210464183241129, 0.0021690342109650373, 0.0010192540939897299, 0.0012729729060083628, 0.0022776308469474316, 0.00078965350985527039, 0.0017188435886055231, 0.0010174453491345048, 0.0011944219004362822, 0.0030920272693037987, 0.0020000797230750322, 0.0015901876613497734, 0.0009776607621461153, 0.001467836438678205, 0.0013128162827342749, 0.001051036175340414, 0.0013006703229621053, 0.001048232545144856, 0.0011663589393720031, 0.0026708149816840887, 0.0013141136150807142, 0.0035682050511240959, 0.0010875032749027014, 0.0014065782306715846, 0.0011601510923355818, 0.0013815200654789805, 0.0019208375597372651, 0.00095255323685705662, 0.00087609823094680905, 0.0012138135498389602, 0.0014836142072454095, 0.0015685460530221462, 0.0015460581053048372, 0.00123043661005795, 0.001599158626049757, 0.002136921277269721, 0.0017215408151969314, 0.001231192029081285, 0.00088580121519044042, 0.0019741083960980177, 0.002459720941260457, 0.0021539293229579926, 0.0012508911313489079, 0.0011604821775108576, 0.0010845775250345469, 0.0012882383307442069, 0.0011631110683083534, 0.0011947355233132839, 0.0024620543699711561, 0.0013111032312735915, 0.0013124503893777728, 0.00098867923952639103, 0.002656053751707077, 0.0016229642787948251, 0.00064419145928695798, 0.00124435278121382, 0.0016647550510242581, 0.0017256262945011258, 0.0010328266071155667, 0.0014108414761722088, 0.001571251661516726, 0.0020839753560721874, 0.00079191889381036162, 0.0012735796626657248, 0.0013585980050265789, 0.0013721392024308443, 0.0020914596971124411, 0.037198938429355621, 0.0021628281101584435, 0.00083856639685109258, 0.0013401471078395844, 0.0010313444072380662, 0.0011733068386092782, 0.0013747692573815584, 0.0016745326574891806, 0.001170353963971138, 0.0018040969735011458, 0.0012086217757314444, 0.00079733936581760645, 0.00091111753135919571, 0.0022760722786188126, 0.0017083389684557915, 0.0014178594574332237, 0.0010911840945482254, 0.0012401662534102798, 0.00079350551823154092, 0.0015497753629460931, 0.0011429708683863282, 0.0016153552569448948, 0.0011578495614230633, 0.0014778769109398127, 0.0014824321260675788, 0.0015750846359878778, 0.0014437503414228559, 0.0015906784683465958, 0.0022099420893937349, 0.00088758103083819151, 0.0018689066637307405, 0.0012811138294637203, 0.0017363694496452808, 0.0013655903749167919, 0.0014129645423963666, 0.00092882243916392326, 0.0010428709210827947, 0.0024964844342321157, 0.00077403639443218708, 0.0023256270214915276, 0.0012172835413366556, 0.0019236685475334525, 0.0010895241284742951, 0.0016210901085287333, 0.0011490164324641228, 0.0012450561625882983, 0.00091152003733441234, 0.00086503924103453755, 0.0012689209543168545, 0.001806367770768702, 0.0017126749735325575, 0.00083189975703135133, 0.0016820599557831883, 0.0015988685190677643, 0.0015453202649950981, 0.0010776984272524714, 0.0012663538800552487, 0.0026748341042548418, 0.001395166851580143, } };
const TfArray<128, int> quant103_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant103 = { (TfLiteFloatArray*)&quant103_scale, (TfLiteIntArray*)&quant103_zero, 0 };
const TfArray<4, int> tensor_dimension104 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant104_scale = { 1, { 1.0049976110458374, } };
const TfArray<1, int> quant104_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant104 = { (TfLiteFloatArray*)&quant104_scale, (TfLiteIntArray*)&quant104_zero, 0 };
const TfArray<4, int> tensor_dimension105 = { 4, { 128,1,1,128 } };
const TfArray<128, float> quant105_scale = { 128, { 0.0046139382757246494, 0.0051629487425088882, 0.0049821371212601662, 0.0029422631487250328, 0.0050451545976102352, 0.0034556854516267776, 0.0024148218799382448, 0.0047426279634237289, 0.0028596525080502033, 0.0030760213267058134, 0.0033547712955623865, 0.0029863473027944565, 0.0024269893765449524, 0.0045134429819881916, 0.0022724654991179705, 0.0042007914744317532, 0.0022551438305526972, 0.0032255162950605154, 0.0047615724615752697, 0.006698674988001585, 0.0018306459533050656, 0.002193814842030406, 0.0024493073578923941, 0.0027393843047320843, 0.0046731485053896904, 0.0019174631452187896, 0.0022002109326422215, 0.0033779579680413008, 0.0018471378134563565, 0.0033833563793450594, 0.002271497854962945, 0.0056632147170603275, 0.005534179974347353, 0.0021457625553011894, 0.0031958301551640034, 0.0022613953333348036, 0.0040631354786455631, 0.0039185215719044209, 0.0026842711959034204, 0.0019436659058555961, 0.0037867522332817316, 0.0044375122524797916, 0.0029315222054719925, 0.0018608124228194356, 0.0030090820509940386, 0.0034714622888714075, 0.0026050342712551355, 0.0034268386662006378, 0.003033926710486412, 0.0026502232067286968, 0.0017467075958848, 0.0035867053084075451, 0.0026703588664531708, 0.0047373678535223007, 0.0030475112143903971, 0.0034797834232449532, 0.0050409329123795033, 0.0026892833411693573, 0.0019853541161864996, 0.0040329918265342712, 0.0068731815554201603, 0.0032669638749212027, 0.0027152425609529018, 0.0021780177485197783, 0.0023327048402279615, 0.004616360180079937, 0.0019391481764614582, 0.0022478257305920124, 0.0020249458029866219, 0.0018975022248923779, 0.0022563685197383165, 0.0029605866875499487, 0.0038522277027368546, 0.0025438866578042507, 0.0034037146251648664, 0.0034318016842007637, 0.0031181075610220432, 0.0030388061422854662, 0.0024081331212073565, 0.0028977605979889631, 0.0075916983187198639, 0.0051090670749545097, 0.0032233274541795254, 0.0020561821293085814, 0.0015971327666193247, 0.0032408351544290781, 0.0038943048566579819, 0.005118214525282383, 0.0023709372617304325, 0.004869075957685709, 0.004681919701397419, 0.0036344763357192278, 0.0033438550308346748, 0.0030776625499129295, 0.0028845646884292364, 0.0017787236720323563, 0.0026477046776562929, 0.0015663744416087866, 0.0027601597830653191, 0.0033655671868473291, 0.0019007634837180376, 0.0020198554266244173, 0.0023393051233142614, 0.0041675879620015621, 0.002213961910456419, 0.0021104025654494762, 0.002335691824555397, 0.0058757956139743328, 0.0017161188879981637, 0.0026448457501828671, 0.0020116935484111309, 0.005838833749294281, 0.0033430201001465321, 0.002159282797947526, 0.0028917726594954729, 0.0033245217055082321, 0.0046690055169165134, 0.0026468730065971613, 0.0016683642752468586, 0.0023471023887395859, 0.0021904341410845518, 0.0027884172741323709, 0.0037350240163505077, 0.0032293342519551516, 0.0033186033833771944, 0.0036338907666504383, 0.0011198869906365871, 0.0028085103258490562, } };
const TfArray<128, int> quant105_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant105 = { (TfLiteFloatArray*)&quant105_scale, (TfLiteIntArray*)&quant105_zero, 0 };
const TfArray<1, int> tensor_dimension106 = { 1, { 128 } };
const TfArray<128, float> quant106_scale = { 128, { 0.0046369968913495541, 0.0051887510344386101, 0.005007036030292511, 0.0029569673351943493, 0.0050703682936728001, 0.0034729556646198034, 0.0024268901906907558, 0.0047663296572864056, 0.0028739438857883215, 0.0030913939699530602, 0.003371537197381258, 0.0030012719798833132, 0.0024391184560954571, 0.0045359996147453785, 0.0022838225122541189, 0.0042217853479087353, 0.0022664142306894064, 0.0032416360918432474, 0.0047853691503405571, 0.006732152309268713, 0.0018397948006168008, 0.0022047786042094231, 0.002461547963321209, 0.0027530747465789318, 0.0046965032815933228, 0.0019270458724349737, 0.0022112068254500628, 0.0033948395866900682, 0.0018563690828159451, 0.0034002650063484907, 0.0022828499786555767, 0.0056915171444416046, 0.0055618374608457088, 0.0021564862690865993, 0.0032118016388267279, 0.0022726969327777624, 0.0040834415704011917, 0.0039381049573421478, 0.0026976861990988255, 0.0019533794838935137, 0.0038056769408285618, 0.0044596893712878227, 0.0029461728408932686, 0.0018701120279729366, 0.0030241203494369984, 0.0034888111986219883, 0.0026180532295256853, 0.0034439647570252419, 0.0030490891076624393, 0.0026634680107235909, 0.0017554369987919927, 0.0036046302411705256, 0.0026837042532861233, 0.0047610434703528881, 0.0030627415981143713, 0.003497174009680748, 0.0050661256536841393, 0.0027027232572436333, 0.0019952761940658092, 0.0040531470440328121, 0.0069075310602784157, 0.0032832908909767866, 0.0027288123965263367, 0.0021889025811105967, 0.0023443629033863544, 0.0046394309028983116, 0.0019488392863422632, 0.002259059576317668, 0.0020350657869130373, 0.0019069851841777563, 0.0022676449734717607, 0.0029753826092928648, 0.0038714795373380184, 0.002556599909439683, 0.0034207249991595745, 0.003448952455073595, 0.0031336906831711531, 0.0030539929866790771, 0.002420168137177825, 0.0029122424311935902, 0.0076296385377645493, 0.0051346002146601677, 0.0032394363079220057, 0.0020664581097662449, 0.0016051146667450666, 0.0032570315524935722, 0.0039137671701610088, 0.0051437932997941971, 0.0023827862460166216, 0.0048934095539152622, 0.0047053182497620583, 0.0036526399198919535, 0.0033605662174522877, 0.0030930435750633478, 0.0028989806305617094, 0.0017876130295917392, 0.0026609369087964296, 0.0015742025570943952, 0.0027739540673792362, 0.0033823868725448847, 0.0019102627411484718, 0.0020299497991800308, 0.0023509960155934095, 0.0041884160600602627, 0.0022250264883041382, 0.0021209495607763529, 0.0023473647888749838, 0.0059051606804132462, 0.0017246954375877976, 0.0026580635458230972, 0.002021747175604105, 0.0058680139482021332, 0.0033597273286432028, 0.0021700740326195955, 0.0029062246903777122, 0.0033411362674087286, 0.0046923393383622169, 0.0026601010467857122, 0.0016767020570114255, 0.0023588323965668678, 0.0022013811394572258, 0.0028023526538163424, 0.0037536902818828821, 0.0032454731408506632, 0.0033351883757859468, 0.0036520515568554401, 0.0011254837736487389, 0.0028225460555404425, } };
const TfArray<128, int> quant106_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant106 = { (TfLiteFloatArray*)&quant106_scale, (TfLiteIntArray*)&quant106_zero, 0 };
const TfArray<4, int> tensor_dimension107 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant107_scale = { 1, { 0.27531364560127258, } };
const TfArray<1, int> quant107_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant107 = { (TfLiteFloatArray*)&quant107_scale, (TfLiteIntArray*)&quant107_zero, 0 };
const ALIGN(8) int8_t tensor_data108[1*3*3*128] = { 
  /* [0][0][][] */ -3,80,12,28,67,5,44,-49,-22,13,-76,-55,64,10,-7,24,16,-62,-66,-38,37,3,127,-12,16,-56,-2,-13,94,-44,-15,-52,-23,-2,-80,1,42,37,5,-5,-3,-41,11,127,127,5,2,-72,-13,25,42,13,125,-13,52,-8,-5,1,-8,119,-33,-17,-79,46,-50,-106,-39,12,-102,-2,-70,-60,-127,-5,127,127,-45,-71,2,-33,8,-10,-127,-7,20,-54,105,-27,-111,-51,-14,-55,-79,18,3,127,-17,-63,0,-25,-32,67,-5,12,80,3,-32,-35,127,-32,17,-127,8,-33,26,-6,-4,-9,118,-21,48,13,8,-127,-59,-98,53,39, -1,113,-18,-13,127,-6,-23,-127,-27,-31,111,-52,35,33,9,-4,20,-60,10,124,24,-57,20,-22,33,0,26,-61,4,24,-10,-44,-36,-25,-127,26,-23,50,-46,4,98,127,31,22,-1,-26,-2,-17,-65,12,25,12,15,62,127,-21,6,28,-13,110,-55,5,-101,20,-55,55,-8,38,43,19,-43,-55,6,20,-52,-64,-60,-43,29,-7,9,18,-79,-47,15,-26,-53,-33,-20,125,-59,-60,-66,108,87,-27,9,52,-52,9,-31,127,1,64,99,-20,-124,-46,9,-17,3,77,10,8,19,-4,-9,-104,-43,27,-16,25,-5,-73,-8,-127,49,-49, -7,-33,-3,-3,120,-19,46,-89,4,-17,-47,35,8,-5,30,17,2,-46,31,54,42,-108,-33,10,18,-2,-24,-8,23,-67,-4,12,22,-23,-76,44,-86,127,-41,-67,-35,108,-7,17,-46,-1,17,31,-26,-17,11,-16,4,37,-54,-23,-31,75,16,-26,4,11,-88,22,15,63,28,-31,-4,21,-35,-56,53,-7,67,91,-8,9,-16,-30,16,-23,-86,-18,2,45,-108,63,-29,50,40,4,102,98,55,-81,4,1,-70,-33,-10,0,-21,6,38,-53,12,-8,83,25,127,56,1,29,11,-7,127,-98,-116,30,-47,127,-37,-22,31,-118,61,-39, 
  /* [0][1][][] */ -104,127,33,127,-25,13,-17,56,-27,127,-87,11,-4,64,-38,59,0,-45,-120,1,-25,127,-18,42,35,-26,-18,25,40,-72,76,-29,8,-26,-77,52,127,52,127,3,-31,6,18,-19,1,-1,39,-30,-34,-3,51,53,32,61,-39,47,-11,-127,56,-127,38,-45,-58,100,-35,-36,-60,23,-26,68,-7,-30,-8,-7,51,93,40,10,-10,-10,28,-29,-21,21,38,31,127,10,-51,-127,127,10,-46,-23,-43,12,20,120,-55,8,68,-35,-35,-57,-87,17,-64,-6,108,-5,-45,-22,-11,46,112,49,10,-31,-9,11,-92,-51,-24,-19,-18,5,62,-76, 22,47,127,3,-35,127,-19,25,127,123,127,48,127,127,127,89,127,-57,127,9,107,114,29,127,127,127,127,127,127,-26,9,15,-27,-62,6,120,105,-14,23,59,-4,-17,127,22,-19,86,127,-19,58,14,41,127,50,28,-88,119,38,-35,127,-111,127,127,-98,127,127,-47,82,127,127,-12,-41,-46,-43,127,-27,-48,127,127,127,13,96,49,-90,127,127,127,-86,127,127,-6,-60,-45,-20,75,-22,8,127,127,76,127,107,-67,-47,127,75,127,110,127,-32,127,-32,123,48,98,25,127,62,-102,97,78,-95,120,127,-12,127,-86,76,-32, 127,-19,23,-41,49,-10,42,24,-11,49,13,24,-31,-13,2,32,3,20,26,78,112,-73,-13,31,25,39,-11,-4,-40,-16,3,41,71,-23,80,85,56,-68,-55,127,28,80,-18,61,-19,-2,55,-127,19,94,-75,-8,-14,73,-58,6,-7,-52,-21,42,57,100,-39,-9,-10,-77,127,-2,8,-2,-63,30,-62,16,82,-72,50,93,30,14,31,-86,-25,-11,44,3,-29,26,-12,-24,18,127,60,-127,-31,-51,-12,9,34,74,-56,-71,10,102,-16,24,127,1,107,55,-18,10,13,127,16,17,-54,-127,-18,78,32,38,-6,20,-12,-12,51,-103, 
  /* [0][2][][] */ -44,106,-50,-1,18,-28,37,-66,-18,-2,-38,105,-39,32,-6,-27,-4,-12,-58,-50,23,20,-40,-36,13,-14,1,-14,14,-86,127,-21,2,127,-70,75,111,113,-69,39,-120,56,21,-79,-16,3,90,77,1,41,127,54,-21,123,22,16,127,19,23,22,57,-31,27,18,-39,-76,93,-7,-40,127,127,-8,-100,37,-28,90,87,23,-24,-30,127,81,-45,31,93,-24,51,-62,30,-56,37,-34,-5,-91,46,13,79,-17,-23,10,127,-10,-29,-49,20,-24,55,2,6,-2,-62,41,127,10,58,36,-73,28,-127,31,127,24,0,-93,-10,-76,116,-127, -4,37,64,-10,-17,8,107,-27,70,-25,-11,74,-45,107,0,66,-12,-86,36,-127,47,27,48,-36,27,-22,-39,48,51,-78,61,127,8,81,-12,127,32,-57,-12,-49,43,19,17,35,-6,127,42,124,127,127,102,4,74,127,-124,127,-35,-43,35,-95,51,-63,-127,95,89,-127,7,55,-23,-18,-1,41,-109,21,-42,-17,13,19,7,60,20,127,-80,33,112,83,-99,-32,98,9,-54,4,52,-97,127,29,35,-31,118,-30,63,-70,31,-46,122,-29,-8,-2,-107,13,17,105,63,29,1,17,-17,-58,39,54,-20,-34,117,-25,40,11,127,-46, -17,-40,-32,-15,47,-9,127,-7,-14,71,36,127,-11,56,-12,127,12,127,-4,14,127,-27,20,-24,11,25,3,-15,-49,127,-4,-14,127,38,73,117,-106,-87,-2,125,127,53,-7,60,10,29,-43,-93,18,106,-12,-19,-127,32,-106,5,-16,-82,-16,-39,55,107,-13,-53,-36,46,-13,-39,9,18,18,127,-120,41,-31,-75,41,-24,-13,127,34,84,-15,16,-1,22,-76,-55,10,-21,-3,11,127,-47,32,-74,36,43,127,-39,-13,10,127,29,127,-33,46,-1,-54,42,-53,56,-38,-19,127,8,-11,-57,76,127,-107,-21,10,-66,-30,-59,78,-40, 
};
const TfArray<4, int> tensor_dimension108 = { 4, { 1,3,3,128 } };
const TfArray<128, float> quant108_scale = { 128, { 0.011747848242521286, 0.0040378030389547348, 0.010752136819064617, 0.012307394295930862, 0.0058848736807703972, 0.014143133535981178, 0.0061842422001063824, 0.0039170109666883945, 0.0091005712747573853, 0.010079742409288883, 0.0063065723516047001, 0.0095795402303338051, 0.0082900812849402428, 0.010066146962344646, 0.010903099551796913, 0.0040749530307948589, 0.0093770809471607208, 0.0079659009352326393, 0.0064880130812525749, 0.0044796480797231197, 0.0063119544647634029, 0.0055582374334335327, 0.0077613997273147106, 0.014051106758415699, 0.0086634363979101181, 0.0096143931150436401, 0.0092202750965952873, 0.012538707815110683, 0.013062571175396442, 0.006228350568562746, 0.009625311940908432, 0.0075433817692101002, 0.012199835851788521, 0.0084616011008620262, 0.0046187224797904491, 0.36549341678619385, 0.0037538511678576469, 0.0054329209960997105, 0.018173957243561745, 0.0074729411862790585, 0.0055488594807684422, 0.0067525049671530724, 0.014307079836726189, 0.0072116600349545479, 0.0064112525433301926, 0.010894177481532097, 0.012237452901899815, 0.0057648401707410812, 0.0097072403877973557, 0.007574545219540596, 0.024759508669376373, 0.0073376856744289398, 0.0075422041118144989, 0.0055264746770262718, 0.0047505591064691544, 0.0080532068386673927, 0.010815476067364216, 0.0057689971290528774, 0.010275604203343391, 0.0058139567263424397, 0.007645362988114357, 0.0090933274477720261, 0.0055550732649862766, 0.016683781519532204, 0.0094021381810307503, 0.0063508064486086369, 0.010529029183089733, 0.012528472580015659, 0.0062291035428643227, 0.0073083243332803249, 0.0063335890881717205, 0.007387582678347826, 0.0053703747689723969, 0.0095864655449986458, 0.003311605891212821, 0.0045463386923074722, 0.010371544398367405, 0.006570691242814064, 0.0092309815809130669, 0.009420488029718399, 0.0075530232861638069, 0.1136389747262001, 0.0063395407050848007, 0.01201922632753849, 0.0094027258455753326, 0.0076947081834077835, 0.0054790996946394444, 0.00792677141726017, 0.0069220308214426041, 0.0053947968408465385, 0.0084485691040754318, 0.0033467467874288559, 0.0081593450158834457, 0.0051017221994698048, 0.0067271189764142036, 0.0070754070766270161, 0.01095359493046999, 0.0046686967834830284, 0.0059787868522107601, 0.007825879380106926, 0.0070315618067979813, 0.0057726516388356686, 0.012125240638852119, 0.0091606378555297852, 0.0052923867478966713, 0.0081840427592396736, 0.0055336444638669491, 0.0065699750557541847, 0.0061360513791441917, 0.0080521730706095695, 0.0075112632475793362, 0.0075251623056828976, 0.012081720866262913, 0.0070401690900325775, 0.007320069707930088, 0.010378740727901459, 0.0035865737590938807, 0.0057890331372618675, 0.0098871411755681038, 0.18926157057285309, 0.0070000113919377327, 0.0048473142087459564, 0.015076261945068836, 0.0035696080885827541, 0.0084115481004118919, 0.0058263973332941532, 0.56111514568328857, 0.0042793229222297668, } };
const TfArray<128, int> quant108_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant108 = { (TfLiteFloatArray*)&quant108_scale, (TfLiteIntArray*)&quant108_zero, 3 };
const ALIGN(8) int32_t tensor_data109[128] = { 
    234, -1086, -522, -150, -1417, -640, -1470, 3007, -244, -465, 
    -175, -800, -523, -942, -487, -1888, -1197, 2002, -78, -62, 
    -1936, -262, -483, -422, -801, 75, -479, -151, -742, 1386, 
    -562, -81, -231, -121, 1927, -25, -2353, -442, -74, -1668, 
    -320, -1006, -956, -635, -91, -778, -533, 1773, -747, -546, 
    -261, -1220, -108, -1287, 2034, -1134, 81, 1552, -829, 1281, 
    -848, -419, 5224, -516, 393, 2432, -811, -804, -82, -408, 
    632, -26, 3509, -1135, -216, 432, -909, -642, -701, -234, 
    -1807, -214, 2786, -76, -465, -1621, 1432, 43, 23, 1070, 
    246, -597, 119, -74, -874, 1078, -394, -1173, -876, -299, 
    -331, 526, -53, -47, -2441, -299, -589, -372, -1172, -1149, 
    233, -783, -188, -890, -1474, -829, -371, 3355, -211, -47, 
    1251, -1461, -707, 5173, -661, 3884, -41, 2957, 
};
const TfArray<1, int> tensor_dimension109 = { 1, { 128 } };
const TfArray<128, float> quant109_scale = { 128, { 0.0032343429047614336, 0.0011116622481495142, 0.0029602099675685167, 0.0033883936703205109, 0.0016201860271394253, 0.0038937977515161037, 0.0017026062123477459, 0.0010784065816551447, 0.0025055115111172199, 0.0027750905137509108, 0.0017362853977829218, 0.0026373781729489565, 0.0022823724430054426, 0.0027713475283235312, 0.0030017721001058817, 0.0011218901490792632, 0.0025816382840275764, 0.0021931212395429611, 0.0017862385138869286, 0.001233308226801455, 0.0017377672484144568, 0.0015302585670724511, 0.0021368192974478006, 0.0038684613537043333, 0.0023851622827351093, 0.0026469735894352198, 0.0025384675245732069, 0.0034520772751420736, 0.0035963039845228195, 0.0017147498438134789, 0.0026499796658754349, 0.0020767960231751204, 0.0033587813377380371, 0.0023295942228287458, 0.0012715973425656557, 0.10062532871961594, 0.0010334864491596818, 0.0014957572566345334, 0.0050035384483635426, 0.0020574026275426149, 0.0015276767080649734, 0.0018590567633509636, 0.0039389343000948429, 0.0019854684360325336, 0.0017651052912697196, 0.0029993157368153334, 0.0033691378775984049, 0.0015871392097324133, 0.0026725358329713345, 0.0020853755995631218, 0.0068166307173669338, 0.002020165091380477, 0.0020764716900885105, 0.0015215139137580991, 0.0013078937772661448, 0.002217157743871212, 0.002977648051455617, 0.0015882836887612939, 0.002829014090821147, 0.0016006616642698646, 0.0021048728376626968, 0.0025035170838236809, 0.0015293874312192202, 0.0045932726934552193, 0.0025885368231683969, 0.0017484637210145593, 0.0028987855184823275, 0.0034492595586925745, 0.0017149571795016527, 0.0020120814442634583, 0.0017437235219404101, 0.0020339023321866989, 0.0014785374514758587, 0.002639284823089838, 0.00091173028340563178, 0.0012516691349446774, 0.0028554277960211039, 0.0018090009689331055, 0.0025414151605218649, 0.0025935890153050423, 0.0020794502925127745, 0.031286358833312988, 0.0017453620675951242, 0.0033090570941567421, 0.0025886986404657364, 0.0021184582728892565, 0.0015084708575159311, 0.0021823483984917402, 0.001905729528516531, 0.0014852611348032951, 0.0023260063026100397, 0.00092140503693372011, 0.0022463789209723473, 0.0014045737916603684, 0.0018520676530897617, 0.0019479561597108841, 0.0030156741850078106, 0.001285355887375772, 0.0016460416372865438, 0.0021545714698731899, 0.0019358849385753274, 0.0015892897499725223, 0.0033382442779839039, 0.0025220485404133797, 0.0014570662751793861, 0.0022531787399202585, 0.0015234878519549966, 0.0018088037613779306, 0.0016893387073650956, 0.002216873224824667, 0.00206795334815979, 0.0020717799197882414, 0.0033262625802308321, 0.0019382545724511147, 0.0020153149962425232, 0.0028574089519679546, 0.00098743266426026821, 0.0015937997959554195, 0.0027220649644732475, 0.05210629478096962, 0.0019271986093372107, 0.0013345316983759403, 0.004150700755417347, 0.00098276184871792793, 0.0023158139083534479, 0.0016040867194533348, 0.15448266267776489, 0.0011781560024246573, } };
const TfArray<128, int> quant109_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant109 = { (TfLiteFloatArray*)&quant109_scale, (TfLiteIntArray*)&quant109_zero, 0 };
const TfArray<4, int> tensor_dimension110 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant110_scale = { 1, { 1.1422266960144043, } };
const TfArray<1, int> quant110_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant110 = { (TfLiteFloatArray*)&quant110_scale, (TfLiteIntArray*)&quant110_zero, 0 };
const TfArray<4, int> tensor_dimension111 = { 4, { 128,1,1,128 } };
const TfArray<128, float> quant111_scale = { 128, { 0.0035675331018865108, 0.0035940487869083881, 0.0024746954441070557, 0.0019035738660022616, 0.0030184607021510601, 0.0022494911681860685, 0.0029032614547759295, 0.0058782733976840973, 0.0023994292132556438, 0.0018957247957587242, 0.0020527450833469629, 0.0017910534515976906, 0.0019170665182173252, 0.0018707467243075371, 0.0029600840061903, 0.0025598350912332535, 0.0039271102286875248, 0.0031047589145600796, 0.0024375126231461763, 0.0024401985574513674, 0.0016978181665763259, 0.0040640765801072121, 0.0038916224148124456, 0.0029088761657476425, 0.0017766199307516217, 0.0011595793766900897, 0.0035721661988645792, 0.0018142752815037966, 0.0015264549292623997, 0.0044804723002016544, 0.0014537589158862829, 0.0028832133393734694, 0.0037632272578775883, 0.0020027051214128733, 0.0054717492312192917, 0.0019909993279725313, 0.0053545203991234303, 0.0041063860990107059, 0.0030886272434145212, 0.003039470175281167, 0.003718795720487833, 0.0030428443569689989, 0.0024426833260804415, 0.0020846298430114985, 0.003658629022538662, 0.0012035451363772154, 0.0020667952485382557, 0.0035033687017858028, 0.0025650369934737682, 0.0016227765008807182, 0.0033273804001510143, 0.0019060077611356974, 0.0061022844165563583, 0.0020409247372299433, 0.0029267196077853441, 0.0020635414402931929, 0.003222630824893713, 0.0039226519875228405, 0.0015952794346958399, 0.0046695303171873093, 0.001392692094668746, 0.0015678437193855643, 0.0028717657551169395, 0.001680484157986939, 0.0012245656689628959, 0.0024271602742373943, 0.001277214614674449, 0.0018335359636694193, 0.0036647284869104624, 0.0038951048627495766, 0.0024066988844424486, 0.0040961252525448799, 0.0033962635789066553, 0.0033153004478663206, 0.0055863368324935436, 0.00322569883428514, 0.0020731270778924227, 0.0025502848438918591, 0.0022359504364430904, 0.0032375468872487545, 0.0016128267161548138, 0.21316803991794586, 0.0034483657218515873, 0.0013315366813912988, 0.0016293679364025593, 0.0032826696988195181, 0.0027556631248444319, 0.0026048538275063038, 0.002663781400769949, 0.0052531464025378227, 0.0029999823309481144, 0.010927489027380943, 0.0024904636666178703, 0.0047536222264170647, 0.0029129711911082268, 0.0024100062437355518, 0.0018432516371831298, 0.0047069238498806953, 0.0020028259605169296, 0.0035402474459260702, 0.0013725452590733767, 0.0044253552332520485, 0.0026367306709289551, 0.0021544459741562605, 0.0047094551846385002, 0.0044307997450232506, 0.0040164608508348465, 0.0040075252763926983, 0.0027140076272189617, 0.0026570775080472231, 0.0036508159246295691, 0.0016586978454142809, 0.0029634961392730474, 0.0016212520422413945, 0.0024885931052267551, 0.0018256440525874496, 0.0086073465645313263, 0.0018025902099907398, 0.0019042938947677612, 0.0018885241588577628, 0.0029617547988891602, 0.004040990024805069, 0.0018408349715173244, 0.0081158038228750229, 0.0021348176524043083, 0.0030388731975108385, 0.080028221011161804, 0.0058372803032398224, } };
const TfArray<128, int> quant111_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant111 = { (TfLiteFloatArray*)&quant111_scale, (TfLiteIntArray*)&quant111_zero, 0 };
const TfArray<1, int> tensor_dimension112 = { 1, { 128 } };
const TfArray<128, float> quant112_scale = { 128, { 0.0040749316103756428, 0.0041052186861634254, 0.0028266631998121738, 0.0021743129473179579, 0.0034477664157748222, 0.0025694288779050112, 0.0033161826431751251, 0.0067143207415938377, 0.0027406921144574881, 0.002165347570553422, 0.0023447002749890089, 0.0020457890350371599, 0.0021897244732826948, 0.0021368167363107204, 0.0033810869790613651, 0.0029239119030535221, 0.0044856499880552292, 0.0035463385283946991, 0.0027841920964419842, 0.0027872598730027676, 0.0019392932299524546, 0.0046420968137681484, 0.0044451151043176651, 0.003322595963254571, 0.0020293027628213167, 0.0013245025184005499, 0.0040802233852446079, 0.0020723135676234961, 0.0017435575136914849, 0.0051177148707211018, 0.0016605221899226308, 0.0032932832837104797, 0.0042984588071703911, 0.0022875431459397078, 0.006249978207051754, 0.0022741726133972406, 0.006116076372563839, 0.0046904236078262329, 0.0035279125440865755, 0.0034717640373855829, 0.0042477077804505825, 0.0034756180830299854, 0.0027900980785489082, 0.0023811198770999908, 0.0041789836250245571, 0.0013747214106842875, 0.0023607485927641392, 0.0040016411803662777, 0.0029298537410795689, 0.0018535786075517535, 0.0038006226532161236, 0.0021770929452031851, 0.0069701923057436943, 0.0023311986587941647, 0.0033429772593080997, 0.0023570321500301361, 0.0036809749435633421, 0.0044805579818785191, 0.001822170801460743, 0.0053336620330810547, 0.0015907700872048736, 0.0017908329609781504, 0.0032802075147628784, 0.0019194938940927386, 0.0013987316051498055, 0.0027723673265427351, 0.0014588686171919107, 0.0020943137351423502, 0.0041859508492052555, 0.0044490927830338478, 0.0027489957865327597, 0.0046787038445472717, 0.0038793028797954321, 0.003786824643611908, 0.0063808630220592022, 0.0036844792775809765, 0.0023679810110479593, 0.002913003321737051, 0.0025539621710777283, 0.0036980125587433577, 0.0018422136781737208, 0.24348622560501099, 0.0039388155564665794, 0.0015209167031571269, 0.0018611075356602669, 0.0037495528813451529, 0.003147592069581151, 0.0029753334820270538, 0.0030426422599703074, 0.0060002841055393219, 0.0034266598522663116, 0.012481669895350933, 0.0028446740470826626, 0.0054297139868140221, 0.0033272735308855772, 0.0027527734637260437, 0.0021054111421108246, 0.0053763738833367825, 0.0022876812145113945, 0.0040437653660774231, 0.001567757804878056, 0.0050547588616609573, 0.0030117442365735769, 0.0024608657695353031, 0.0053792656399309635, 0.0050609777681529522, 0.0045877089723944664, 0.0045775021426379681, 0.0031000119633972645, 0.0030349849257618189, 0.0041700592264533043, 0.001894608954899013, 0.0033849843312054873, 0.0018518373835831881, 0.0028425375930964947, 0.002085299463942647, 0.0098315412178635597, 0.002058966550976038, 0.0021751353051513433, 0.0021571225952357054, 0.0033829954918473959, 0.0046157268807291985, 0.002102650934830308, 0.0092700878158211708, 0.002438445808365941, 0.0034710820764303207, 0.091410368680953979, 0.0066674975678324699, } };
const TfArray<128, int> quant112_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant112 = { (TfLiteFloatArray*)&quant112_scale, (TfLiteIntArray*)&quant112_zero, 0 };
const TfArray<4, int> tensor_dimension113 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant113_scale = { 1, { 0.32385721802711487, } };
const TfArray<1, int> quant113_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant113 = { (TfLiteFloatArray*)&quant113_scale, (TfLiteIntArray*)&quant113_zero, 0 };
const ALIGN(8) int8_t tensor_data114[1*3*3*128] = { 
  /* [0][0][][] */ -37,27,-42,-68,65,-31,-4,80,33,92,14,74,-18,-49,127,115,49,92,20,-84,6,-107,127,107,16,45,-44,18,32,-33,44,-46,-41,4,-69,51,14,119,-123,119,123,127,-122,-127,127,62,-17,102,42,66,26,-42,-73,-51,5,43,50,-2,-50,-75,12,-127,-21,4,127,-71,-11,40,16,121,36,7,103,-105,-1,-42,-25,-27,-5,-21,-36,75,11,15,-95,-101,-112,8,96,-49,15,34,-54,32,-52,12,-126,-6,127,8,13,-63,-41,-11,30,61,-11,-81,-15,-86,-127,72,7,-15,-32,-11,18,-5,-116,49,58,-1,-123,14,28,-9,29,-127, 43,-2,42,58,-19,14,-84,104,14,58,-84,79,-18,44,-11,59,-96,15,106,-13,21,-54,11,56,109,-72,-9,-31,-45,70,-68,127,-7,-32,87,113,-27,121,18,-26,-4,68,28,34,-44,38,21,123,34,52,-36,-28,-50,-64,-3,-6,-18,-12,-22,-36,-5,-76,-21,30,-3,-16,-32,27,-57,-40,-25,-44,29,-69,-70,106,21,127,31,-40,33,116,31,127,-127,-60,127,57,116,-127,-34,18,-81,66,-32,127,-98,-10,8,5,58,67,-19,-88,-33,36,127,35,-51,13,-106,-7,-22,-116,-14,-31,-24,-20,-7,-52,127,24,-126,32,54,-42,23,-72, -22,-18,-44,7,45,10,-57,-37,-15,83,-16,-127,-10,-33,-114,32,-89,-78,-96,43,-5,-73,-10,-8,8,-127,-19,-26,-16,-23,-24,37,12,-56,-35,68,-59,-40,-43,40,-27,57,-68,56,-63,-24,-27,24,0,20,-2,-86,-30,-40,-38,7,7,-20,13,-52,68,-20,33,57,-79,8,-36,18,12,36,-56,-24,-14,-74,-127,-33,-23,-32,-16,-37,104,127,88,28,-68,-34,-121,-22,35,-104,-55,28,-112,-127,17,23,-127,-31,-43,-69,6,127,-64,-26,13,1,95,17,-13,59,-89,67,22,-12,106,-31,-30,-16,-3,-4,10,25,-56,17,-5,-8,88,-95, 
  /* [0][1][][] */ -43,60,54,-49,78,44,-10,10,57,-25,-33,-39,-60,-127,-38,73,-97,19,-61,40,45,-127,64,-127,-24,-47,-8,54,18,108,30,58,-24,0,-108,24,26,89,-67,70,127,31,-69,-16,16,33,69,127,92,70,5,46,-39,-127,56,89,-20,-17,14,-46,24,50,14,63,-118,-127,-16,-32,-92,-20,102,7,6,-44,32,12,45,-125,-2,-30,-25,45,4,47,-35,-89,-11,-14,-126,60,-99,17,47,-100,-17,-24,39,-10,-17,-40,4,-46,-46,127,59,-33,1,-127,-127,-42,-97,47,8,74,-10,-47,-23,86,69,127,-58,3,-121,17,127,-55,49,23, 127,127,127,-43,-10,-62,-127,127,4,127,127,-46,-23,121,-85,127,45,127,-24,-44,12,-68,33,-8,127,-45,-5,23,127,-51,87,-12,127,127,88,127,118,91,85,15,120,32,79,-84,-21,127,127,8,127,88,127,16,96,-27,127,12,100,127,127,-26,75,-54,127,127,64,42,127,-93,-25,36,76,127,49,-39,-106,127,127,114,127,38,127,108,127,-29,85,-127,-30,5,100,16,72,127,-84,-126,127,-8,80,30,-12,107,127,14,-127,-42,127,127,58,83,-33,127,26,-68,55,-84,127,48,-22,99,127,1,-15,48,-60,99,-33,83,116,55, -6,-9,7,-22,44,-127,-113,-24,13,-79,23,-103,56,14,-8,-6,8,-43,-30,106,-33,-83,67,-107,-49,-42,3,37,30,10,28,-71,46,-30,-1,37,119,100,-47,127,58,-14,69,-22,-9,-91,-44,14,27,-38,24,3,127,27,-18,53,-17,-6,100,-19,66,-60,19,-23,99,45,35,-43,-31,-55,-99,-12,-74,-122,2,14,-38,1,-17,8,38,11,49,-75,21,-65,-75,24,64,-80,112,22,-95,-60,-36,-3,51,15,-51,17,-8,-45,-60,-58,-90,8,7,23,58,-7,-61,-127,-4,127,-9,127,-35,-127,16,-46,61,62,127,54,57,-109,79,-39, 
  /* [0][2][][] */ 14,-10,-74,2,85,53,-47,23,127,-19,-38,-67,-58,-35,24,15,-82,-50,-127,5,127,-18,-11,102,-11,-4,127,127,-9,127,-94,69,-35,-48,-127,-53,-17,-13,49,92,9,14,-37,74,-98,69,0,21,25,40,64,127,57,-11,-52,51,-1,-1,-53,-87,-64,-5,1,10,-69,-77,-62,-127,-127,-86,127,8,39,-127,-20,93,23,-93,13,35,-21,-21,-29,-3,-31,-100,24,-7,-73,116,-80,-1,-40,-105,-44,-35,65,-5,-53,-33,-95,18,-20,15,-4,43,-43,62,-30,-53,-123,-74,9,23,-35,66,127,44,7,81,-35,27,-72,13,17,-70,127,27, -62,-11,-33,-40,63,-35,-19,-86,-35,43,-12,-18,28,5,-50,105,45,-9,-88,65,-62,-55,-7,121,-18,-18,16,91,-41,-88,43,-54,5,-30,-48,-1,41,-127,38,22,97,56,123,-27,-80,62,-120,28,-63,-31,13,-24,13,-33,11,-127,33,5,-4,2,34,-64,-87,40,33,30,-19,-72,-19,127,-79,19,127,-61,-103,-36,49,20,44,127,-6,19,8,-8,47,-39,-29,13,127,-22,-127,4,-127,-106,42,0,55,0,15,127,-33,-2,-83,103,26,107,1,39,-113,-72,20,-43,127,-49,-65,80,18,99,75,-20,-49,79,8,97,97,127,66,93, -93,-70,-50,-127,127,4,-79,-14,2,-63,-14,27,127,26,-48,64,127,-34,36,127,-38,-39,8,-18,2,95,33,60,11,-51,127,-94,37,-15,23,26,-127,-104,127,91,68,8,127,-65,-70,-91,-58,42,-82,-127,-10,-104,30,12,30,-43,127,-111,15,127,127,-52,-13,-123,56,24,18,-75,-27,43,-67,-8,-4,-119,79,-29,-24,-89,31,52,-33,7,22,-26,82,27,59,127,-105,-74,56,-4,-97,36,-17,-7,-10,127,-47,56,21,3,-124,16,-54,78,-27,-81,-88,-77,24,-3,-13,118,-100,30,-36,-104,16,-39,-4,127,-18,127,116,2,41,61, 
};
const TfArray<4, int> tensor_dimension114 = { 4, { 1,3,3,128 } };
const TfArray<128, float> quant114_scale = { 128, { 0.0072696642018854618, 0.008340541273355484, 0.0085653373971581459, 0.0070756329223513603, 0.0067794695496559143, 0.011503566987812519, 0.0033452666830271482, 0.0057370448485016823, 0.010776720941066742, 0.0062785814516246319, 0.0098836403340101242, 0.0064149019308388233, 0.010157377459108829, 0.010781526565551758, 0.0058181765489280224, 0.068820849061012268, 0.0065328716300427914, 0.0069990167394280434, 0.0050781844183802605, 0.0043501672334969044, 0.013578043319284916, 0.006434248760342598, 0.0063287923112511635, 0.006913892924785614, 0.014164595864713192, 0.0067415358498692513, 0.016611278057098389, 0.0052193272858858109, 0.015149310231208801, 0.0052592749707400799, 0.0094827087596058846, 0.0093907508999109268, 0.011603863909840584, 0.012724104337394238, 0.0044407462701201439, 0.016678599640727043, 0.0051237540319561958, 0.0050546950660645962, 0.0060219685547053814, 0.0079074492678046227, 0.0043686740100383759, 0.0057412148453295231, 0.0059268558397889137, 0.0073494208045303822, 0.0072541297413408756, 0.014473197981715202, 0.0095346532762050629, 0.0047345478087663651, 0.0093163615092635155, 0.0067306803539395332, 0.0083019696176052094, 0.0050033926963806152, 0.0077817635610699654, 0.0075187808834016323, 0.0073456866666674614, 0.0064392858184874058, 0.013600965030491352, 0.0079257823526859283, 0.013324014842510223, 0.0090060969814658165, 0.016835303977131844, 0.004807385616004467, 0.011628049425780773, 0.0077207945287227631, 0.0094817383214831352, 0.010331963188946247, 0.013506301678717136, 0.0045786164700984955, 0.0014451799215748906, 0.0066624600440263748, 0.0046633831225335598, 0.0097013851627707481, 0.008603118360042572, 0.0042827334254980087, 0.0057489154860377312, 0.0063142352737486362, 0.012077792547643185, 0.0058117513544857502, 0.0086660906672477722, 0.0094847278669476509, 0.011201696470379829, 0.0042251637205481529, 0.0081054028123617172, 0.011419296264648438, 0.0073337983340024948, 0.0067958147265017033, 0.0048726825043559074, 0.0046525150537490845, 0.0036852119956165552, 0.0054248380474746227, 0.0095346365123987198, 0.0085149034857749939, 0.003053650725632906, 0.0066110254265367985, 0.01039013359695673, 0.0092773362994194031, 0.0031898810993880033, 0.016266729682683945, 0.0079110460355877876, 0.0128373047336936, 0.013772023841738701, 0.0048454622738063335, 0.0035136097576469183, 0.0061336886137723923, 0.01091078482568264, 0.0058200135827064514, 0.0053482912480831146, 0.0082113733515143394, 0.0090145021677017212, 0.0095550278201699257, 0.0054994123056530952, 0.0065682018175721169, 0.012170144356787205, 0.0053790751844644547, 0.0073313112370669842, 0.014945175498723984, 0.010471605695784092, 0.0071452469564974308, 0.0042394320480525494, 0.011240290477871895, 0.0046489150263369083, 0.86707228422164917, 0.0050923353992402554, 1.8762718439102173, 0.0068634944036602974, 0.010424534790217876, 0.0060696001164615154, 0.007284228689968586, } };
const TfArray<128, int> quant114_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant114 = { (TfLiteFloatArray*)&quant114_scale, (TfLiteIntArray*)&quant114_zero, 3 };
const ALIGN(8) int32_t tensor_data115[128] = { 
    -33, -161, -92, 1399, -685, 699, 2296, -117, -390, -219, 
    -322, 828, 121, 163, 1111, -14, 630, 242, 1480, -411, 
    120, 1992, -603, -256, -266, 1260, -109, -1486, -180, 33, 
    -242, 488, -49, 497, 552, -641, -478, -913, 156, -1267, 
    -2801, -1907, -376, 1276, 787, -253, 445, -1530, -475, -547, 
    -695, 913, -684, 1870, -315, -310, -683, 508, -363, 1223, 
    -693, 2198, -75, -994, -191, 702, -4, 1200, 11789, -8, 
    -863, -399, -1120, 2890, 1921, -203, -425, 490, -1032, -249, 
    -362, -3053, -923, -317, 642, 1929, 824, -1052, -1112, 985, 
    611, -982, 3359, 1735, -207, 77, 444, -334, 80, -386, 
    -267, -356, 2593, -19, -676, -1255, -535, 378, 752, 442, 
    2056, 934, -698, -502, 103, -688, 51, -178, -1273, -115, 
    -910, -18, 1744, -4, -1308, 59, -1876, -55, 
};
const TfArray<1, int> tensor_dimension115 = { 1, { 128 } };
const TfArray<128, float> quant115_scale = { 128, { 0.0023543331772089005, 0.0027011444326490164, 0.0027739463839679956, 0.0022914947476238012, 0.0021955801639705896, 0.0037255131173878908, 0.001083388808183372, 0.0018579834140837193, 0.0034901187755167484, 0.0020333640277385712, 0.00320088816806674, 0.0020775122102349997, 0.0032895400654524565, 0.0034916752483695745, 0.0018842584686353803, 0.022288128733634949, 0.0021157176233828068, 0.0022666819859296083, 0.001644606702029705, 0.0014088330790400505, 0.0043973471038043499, 0.0020837779156863689, 0.0020496251527220011, 0.0022391141392290592, 0.0045873066410422325, 0.0021832950878888369, 0.0053796824067831039, 0.0016903168288990855, 0.0049062133766710758, 0.0017032541800290346, 0.0030710436403751373, 0.0030412625055760145, 0.0037579950876533985, 0.0041207931935787201, 0.001438167761079967, 0.0054014846682548523, 0.0016593646723777056, 0.0016369994264096022, 0.0019502580398693681, 0.0025608844589442015, 0.0014148266054689884, 0.0018593338318169117, 0.0019194550113752484, 0.0023801629431545734, 0.0023493021726608276, 0.0046872496604919434, 0.0030878663528710604, 0.0015333174960687757, 0.0030171708203852177, 0.0021797793451696634, 0.0026886528357863426, 0.0016203848645091057, 0.002520180307328701, 0.0024350115563720465, 0.0023789536207914352, 0.002085409127175808, 0.0044047706760466099, 0.0025668218731880188, 0.0043150782585144043, 0.0029166894964873791, 0.0054522347636520863, 0.0015569064998999238, 0.0037658277433365583, 0.0025004351045936346, 0.0030707293190062046, 0.0033460808917880058, 0.0043741133995354176, 0.0014828180428594351, 0.0004680319398175925, 0.0021576858125627041, 0.0015102702891454101, 0.0031418635044246912, 0.0027861818671226501, 0.0013869941467419267, 0.0018618277972564101, 0.0020449105650186539, 0.0039114803075790405, 0.0018821776611730456, 0.0028065759688615799, 0.003071697661653161, 0.0036277503240853548, 0.0013683497672900558, 0.0026249932125210762, 0.0036982214078307152, 0.0023751035332679749, 0.0022008735686540604, 0.0015780533431097865, 0.0015067505883052945, 0.0011934825452044606, 0.0017568729817867279, 0.0030878607649356127, 0.0027576128486543894, 0.00098894687835127115, 0.0021410284098237753, 0.0033649196848273277, 0.0030045323073863983, 0.0010330660734325647, 0.0052680978551506996, 0.0025620493106544018, 0.0041574537754058838, 0.004460169468075037, 0.0015692379092797637, 0.001137907849624753, 0.0019864393398165703, 0.0035335363354533911, 0.0018848533509299159, 0.0017320826882496476, 0.0026593124493956566, 0.0029194115195423365, 0.003094464773312211, 0.001781024388037622, 0.0021271596197038889, 0.0039413892664015293, 0.0017420523799955845, 0.0023742981720715761, 0.0048401029780507088, 0.0033913049846887589, 0.0023140397388488054, 0.0013729706406593323, 0.0036402491386979818, 0.0015055846888571978, 0.28080761432647705, 0.001649189624004066, 0.60764420032501221, 0.0022227922454476357, 0.003376060863956809, 0.0019656838849186897, 0.0023590500932186842, } };
const TfArray<128, int> quant115_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant115 = { (TfLiteFloatArray*)&quant115_scale, (TfLiteIntArray*)&quant115_zero, 0 };
const TfArray<4, int> tensor_dimension116 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant116_scale = { 1, { 1.0880262851715088, } };
const TfArray<1, int> quant116_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant116 = { (TfLiteFloatArray*)&quant116_scale, (TfLiteIntArray*)&quant116_zero, 0 };
const TfArray<4, int> tensor_dimension117 = { 4, { 128,1,1,128 } };
const TfArray<128, float> quant117_scale = { 128, { 0.0051949354819953442, 0.0046022599563002586, 0.0050390181131660938, 0.0069013293832540512, 0.0033846423029899597, 0.0057528498582541943, 0.0055087222717702389, 0.0015837249811738729, 0.0034668820444494486, 0.0019265703158453107, 0.0045899040997028351, 0.0067929802462458611, 0.004167504608631134, 0.0037286272272467613, 0.0028018744196742773, 0.0019680471159517765, 0.0033996780402958393, 0.0031690236646682024, 0.0057601965963840485, 0.0063404138199985027, 0.0018612486310303211, 0.0046291439794003963, 0.0036681790370494127, 0.0083424197509884834, 0.0021213206928223372, 0.0065164654515683651, 0.0047207837924361229, 0.0047404547221958637, 0.002505298238247633, 0.0038623972795903683, 0.0018314665649086237, 0.0035471301525831223, 0.0021330860909074545, 0.004957378376275301, 0.0064850142225623131, 0.0019225090509280562, 0.0044303024187684059, 0.0054059862159192562, 0.0020381920039653778, 0.0014904988929629326, 0.0022460117470473051, 0.001832543290220201, 0.0021315105259418488, 0.0037191163282841444, 0.0067062443122267723, 0.0027286922559142113, 0.0031910529360175133, 0.0029765591025352478, 0.0019033759599551558, 0.0023619055282324553, 0.0026165407616645098, 0.005015927366912365, 0.001759212464094162, 0.0032167970202863216, 0.0050299069844186306, 0.0039363973774015903, 0.0017565920716151595, 0.0054702311754226685, 0.0018473501550033689, 0.0025910595431923866, 0.0012579471804201603, 0.003980475477874279, 0.0031943707726895809, 0.0019987153355032206, 0.0038580391556024551, 0.0037962577771395445, 0.0023368503898382187, 0.0088433250784873962, 0.036751266568899155, 0.002132743364199996, 0.0070872274227440357, 0.0034635034389793873, 0.0027578033041208982, 0.0042157541029155254, 0.0038786786608397961, 0.0022631979081779718, 0.0020545884035527706, 0.004254431463778019, 0.0049392920918762684, 0.00211709039285779, 0.0023937036748975515, 0.0015049752546474338, 0.0011656454298645258, 0.0037576970644295216, 0.0030338543001562357, 0.0028876883443444967, 0.0058421329595148563, 0.0068065701052546501, 0.0039408528245985508, 0.0047304620966315269, 0.0037339306436479092, 0.0017099200049415231, 0.0057857888750731945, 0.0068964837118983269, 0.0038145023863762617, 0.0030392343178391457, 0.0026327301748096943, 0.0027125310152769089, 0.0047639510594308376, 0.0020081130787730217, 0.0048140031285583973, 0.0047006295062601566, 0.0074544032104313374, 0.0041662449948489666, 0.003457746934145689, 0.0022181784734129906, 0.0026611222419887781, 0.0040453220717608929, 0.008763718418776989, 0.0036606935318559408, 0.0031912734266370535, 0.0054262904450297356, 0.0017955483635887504, 0.0033950125798583031, 0.0036442924756556749, 0.0020250133238732815, 0.0027978532016277313, 0.0028063743375241756, 0.0044260900467634201, 0.0017641454469412565, 0.0028660029638558626, 0.0034512693528085947, 0.002991038840264082, 0.22517837584018707, 0.0024558072909712791, 0.0040364009328186512, 0.0044515319168567657, 0.0058040646836161613, } };
const TfArray<128, int> quant117_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant117 = { (TfLiteFloatArray*)&quant117_scale, (TfLiteIntArray*)&quant117_zero, 0 };
const TfArray<1, int> tensor_dimension118 = { 1, { 128 } };
const TfArray<128, float> quant118_scale = { 128, { 0.0056522265076637268, 0.0050073796883225441, 0.0054825842380523682, 0.0075088278390467167, 0.0036825798451900482, 0.0062592518515884876, 0.0059936344623565674, 0.0017231344245374203, 0.0037720587570220232, 0.0020961591508239508, 0.004993936512619257, 0.0073909410275518894, 0.0045343544334173203, 0.0040568443946540356, 0.0030485130846500397, 0.0021412870846688747, 0.0036989389918744564, 0.0034479810856282711, 0.0062672453932464123, 0.0068985368125140667, 0.0020250873640179634, 0.0050366302020847797, 0.0039910753257572651, 0.0090767722576856613, 0.0023080527316778898, 0.0070900856517255306, 0.0051363366656005383, 0.0051577393896877766, 0.0027258303016424179, 0.0042023896239697933, 0.0019926838576793671, 0.0038593709468841553, 0.0023208537604659796, 0.005393757950514555, 0.0070558660663664341, 0.0020917404908686876, 0.004820285364985466, 0.0058818552643060684, 0.002217606408521533, 0.0016217019874602556, 0.0024437198881059885, 0.0019938552286475897, 0.0023191394284367561, 0.004046496469527483, 0.007296570111066103, 0.0029688889626413584, 0.0034719493705779314, 0.0032385746017098427, 0.0020709231030195951, 0.0025698153767734766, 0.0028468652162700891, 0.005457460880279541, 0.0019140694057568908, 0.0034999598283320665, 0.005472671240568161, 0.0042829038575291634, 0.0019112183945253491, 0.0059517552144825459, 0.0020099654793739319, 0.0028191409073770046, 0.0013686795718967915, 0.0043308618478477001, 0.0034755594097077847, 0.0021746547427028418, 0.0041976477950811386, 0.0041304281912744045, 0.0025425546336919069, 0.0096217701211571693, 0.039986342191696167, 0.0023204807657748461, 0.0077110896818339825, 0.0037683828268200159, 0.0030005625449120998, 0.0045868512243032455, 0.0042201043106615543, 0.0024624187499284744, 0.0022354461252689362, 0.0046289330348372459, 0.0053740795701742172, 0.0023034499026834965, 0.0026044126134365797, 0.0016374526312574744, 0.0012682528467848897, 0.0040884730406105518, 0.003300913143903017, 0.0031418807338923216, 0.0063563943840563297, 0.0074057271704077721, 0.0042877513915300369, 0.0051468671299517155, 0.0040626148693263531, 0.0018604379147291183, 0.0062950905412435532, 0.0075035556219518185, 0.0041502788662910461, 0.003306766739115119, 0.0028644795529544353, 0.0029513051267713308, 0.0051833041943609715, 0.0021848797332495451, 0.0052377618849277496, 0.0051144086755812168, 0.008110586553812027, 0.0045329839922487736, 0.0037621194496750832, 0.0024134365376085043, 0.0028953710570931435, 0.0044014165177941322, 0.0095351561903953552, 0.0039829309098422527, 0.0034721894189715385, 0.0059039467014372349, 0.0019536036998033524, 0.0036938628181815147, 0.0039650858379900455, 0.0022032677661627531, 0.0030441377311944962, 0.0030534090474247932, 0.0048157023265957832, 0.0019194366177543998, 0.0031182866077870131, 0.0037550716660916805, 0.0032543288543820381, 0.24499998986721039, 0.0026719828601926565, 0.0043917102739214897, 0.0048433835618197918, 0.0063149747438728809, } };
const TfArray<128, int> quant118_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant118 = { (TfLiteFloatArray*)&quant118_scale, (TfLiteIntArray*)&quant118_zero, 0 };
const TfArray<4, int> tensor_dimension119 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant119_scale = { 1, { 0.3609386682510376, } };
const TfArray<1, int> quant119_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant119 = { (TfLiteFloatArray*)&quant119_scale, (TfLiteIntArray*)&quant119_zero, 0 };
const ALIGN(8) int8_t tensor_data120[1*3*3*128] = { 
  /* [0][0][][] */ 47,120,1,-68,20,8,17,-71,-19,-63,-72,-5,-22,36,40,65,-127,-53,-9,-4,-4,-12,38,66,7,-12,-5,25,-11,-28,-94,-9,-6,68,-20,-1,-96,73,-125,-3,-40,40,127,-8,1,59,127,-5,44,-90,127,-51,-44,127,-18,-23,-23,-41,-51,-42,-1,75,-93,125,-7,0,127,-107,127,22,-52,-67,84,-86,-45,-56,2,-127,101,51,-15,58,-9,-32,-10,-48,74,-3,-82,46,40,-9,87,-52,-45,-46,-27,10,93,-121,-19,-26,86,17,11,-127,-21,48,-127,39,-1,10,-64,33,49,50,-12,-36,83,-3,-14,-17,-109,-65,127,13,-10,-29, 28,17,32,-7,-28,-20,-112,-19,17,37,9,-40,-12,-31,53,-2,-11,-87,-22,57,-40,13,127,0,13,-9,-8,-5,24,-6,-93,-6,-69,-42,-83,93,-47,74,-15,44,-51,-26,26,-22,12,44,19,6,-30,-85,70,-47,-83,9,-2,127,-44,0,12,-19,22,68,-15,37,9,5,23,-35,58,59,73,-46,51,45,36,-3,-9,-82,40,12,-12,-41,-16,22,-18,-28,59,10,71,33,24,70,39,13,1,-19,-38,6,70,19,23,-41,43,-6,10,-68,-36,45,-47,-6,36,-8,-105,66,42,2,-34,-66,127,-119,127,-4,-77,-101,63,42,14,-9, -4,-48,0,47,-71,-28,-116,22,3,30,113,-33,7,21,30,-27,-24,-61,-49,16,-117,-8,63,127,-18,2,74,38,65,-33,-65,-17,-16,-83,100,-43,-52,48,-127,-5,-12,-20,66,31,2,91,8,-29,-31,-24,86,-10,-103,-108,-21,27,-46,36,-39,-46,16,127,53,107,7,-1,-126,6,59,127,39,-48,-35,4,84,38,-38,-46,-28,-109,-10,28,9,-1,70,-48,127,15,127,-16,22,33,127,25,44,16,-34,-12,-125,114,-9,12,19,4,-14,-77,-38,-57,-49,38,-1,-35,63,-14,42,52,3,-75,54,-101,64,26,-67,56,38,-20,17,5, 
  /* [0][1][][] */ -13,-18,54,-81,34,-2,33,-23,-4,-32,17,-6,85,127,12,40,121,2,21,25,-127,42,-41,86,109,-19,-14,-31,42,-21,-93,-12,127,52,71,-37,-17,63,-12,44,-15,127,90,66,-4,127,72,-2,127,127,39,53,127,71,7,-54,-127,-22,16,-65,19,-26,-17,90,15,0,43,65,44,15,4,47,52,-127,1,-13,55,-51,97,63,-90,70,-16,6,-38,20,53,-47,-44,92,23,46,36,-92,-88,24,16,12,63,102,27,6,127,21,-32,-50,10,-56,48,-62,-1,40,95,-17,127,-71,-24,37,-6,-107,-17,-15,-123,127,80,-21,-3,8, 127,101,127,2,127,127,127,127,127,8,127,127,127,0,33,127,70,127,127,72,-55,57,40,38,127,-36,20,127,72,127,-127,86,0,54,57,127,-37,119,-6,127,-5,1,-18,26,127,12,6,-111,-74,20,14,127,109,-22,10,126,-84,127,127,76,127,-67,116,99,127,127,65,72,63,126,127,127,-3,73,127,-52,126,-80,127,-50,93,-74,127,127,29,127,77,46,31,127,127,127,98,127,127,37,87,127,127,51,127,21,-8,-17,127,-48,127,127,63,31,55,127,94,127,1,29,82,127,-34,-122,-25,119,125,2,112,127,127,-31, -4,-127,32,127,16,103,-93,67,2,25,109,23,-14,28,36,39,-7,44,-11,54,45,4,-25,-38,36,-2,127,46,3,-12,-67,64,2,-96,-127,-79,-107,-70,-33,-54,-3,-26,-74,-41,-46,90,16,-127,-59,-66,-23,-43,-77,80,-34,-42,-109,-1,12,18,-15,15,127,108,-21,-3,2,92,50,87,16,-8,14,-25,110,17,127,-58,90,-79,6,-2,16,-3,37,28,89,115,-63,-35,5,54,39,47,-9,21,71,15,-111,-127,16,127,0,-48,-13,-83,-9,-78,45,10,33,56,-2,23,-33,39,21,56,-42,-127,-46,127,29,62,18,-47,-7,90, 
  /* [0][2][][] */ -65,62,10,-11,-102,-14,-34,-50,24,127,-1,-16,32,-24,29,39,3,9,-3,-65,-72,5,-20,51,61,-14,-3,22,69,-29,-1,31,42,-21,-14,-59,-4,108,17,7,-26,65,41,127,10,117,-19,-46,125,68,53,22,12,36,127,-78,-2,-17,13,25,-74,-35,21,127,8,3,-90,2,53,102,62,48,127,-50,110,-23,-76,-35,-59,-15,10,127,27,-95,19,65,83,-30,-2,30,-86,54,48,-81,-20,-40,31,24,59,49,-72,5,67,-68,-15,117,-31,-47,76,6,0,30,87,-3,36,72,21,64,-33,-46,-4,42,51,59,31,-51,17,127, -12,112,1,4,-62,34,-20,-99,22,36,-28,26,12,37,20,49,117,61,77,-127,-4,34,45,-3,93,17,-26,78,48,9,19,127,-45,127,84,-1,-26,39,-14,-26,-72,-72,74,77,-25,33,-51,-66,2,89,48,94,6,-58,-27,35,-3,-57,-5,43,-5,-65,-19,88,-42,49,-80,72,51,51,72,38,13,26,123,127,-63,-16,85,-127,127,-38,93,-7,33,10,21,10,-27,86,-63,61,59,63,71,62,61,65,114,-73,-31,-6,43,-80,36,13,42,-45,74,24,127,-3,43,34,-11,-13,31,61,-42,25,-5,47,127,-4,34,72,40,6, -83,15,-1,76,-19,52,-28,-21,-18,2,-46,40,-37,-21,127,75,37,30,-5,-58,92,127,69,20,53,127,23,85,127,-11,44,-42,-73,42,-5,-11,-127,127,-67,7,-127,-55,71,-10,-37,92,-21,-107,28,19,-21,-90,-29,5,-50,-80,-15,-75,75,127,-86,-67,-5,50,-11,12,-4,127,62,122,87,-120,95,-9,79,111,79,-49,125,-123,46,-70,47,63,127,-11,120,127,-91,5,-101,94,-30,39,8,127,127,37,-5,4,-53,28,47,-127,-8,-65,-5,-28,100,127,48,-48,-127,81,-27,-127,127,35,-92,-28,-22,0,-19,75,27,-56,-14,84, 
};
const TfArray<4, int> tensor_dimension120 = { 4, { 1,3,3,128 } };
const TfArray<128, float> quant120_scale = { 128, { 0.01115904189646244, 0.0062816552817821503, 0.011163955554366112, 0.009568667970597744, 0.0056280950084328651, 0.0084055317565798759, 0.014891866594552994, 0.022647293284535408, 0.01621667668223381, 0.0065593253821134567, 0.0059122513048350811, 0.011222632601857185, 0.0083745326846837997, 0.0083804912865161896, 0.44548624753952026, 0.022435601800680161, 0.0092887440696358681, 0.011857327073812485, 0.015024591237306595, 0.0060749668627977371, 0.005429035983979702, 0.016764434054493904, 0.0091888625174760818, 0.0080301063135266304, 0.0075259101577103138, 0.0138729652389884, 0.0094759128987789154, 0.0073270439170300961, 0.0074217082001268864, 0.015704266726970673, 0.010522858239710331, 0.010674493387341499, 0.0094329919666051865, 0.0074521978385746479, 0.010025596246123314, 0.0075787478126585484, 0.0047560441307723522, 0.0051675229333341122, 0.007776415441185236, 0.014896858483552933, 0.0086553636938333511, 0.010124555788934231, 0.0059315725229680538, 0.010943579487502575, 0.012133873999118805, 0.0097646666690707207, 0.0069911056198179722, 0.0064376378431916237, 0.0086807124316692352, 0.0082364622503519058, 0.012963120825588703, 0.009546009823679924, 0.0089098410680890083, 0.0072367265820503235, 0.0083379438146948814, 0.005265318788588047, 0.007044411264359951, 0.0072933593764901161, 0.0087147746235132217, 0.0077405078336596489, 0.02136714942753315, 0.021301276981830597, 0.006588115356862545, 0.0077086347155272961, 0.017659064382314682, 1.7547580003738403, 0.013211505487561226, 0.0095425806939601898, 0.38738423585891724, 0.017895139753818512, 0.0047296425327658653, 0.0092096161097288132, 0.0101345619186759, 0.011337199248373508, 0.0094404108822345734, 0.010194081813097, 0.0050968034192919731, 0.0055621541105210781, 0.0032100551761686802, 0.0064534135162830353, 0.0085436888039112091, 0.0088043613359332085, 0.018821703270077705, 0.013937946408987045, 0.063025727868080139, 0.01805499941110611, 0.0059086857363581657, 0.0066263326443731785, 0.006191775668412447, 0.0065405378118157387, 0.0070282397791743279, 0.42493441700935364, 0.024352295324206352, 0.0085889436304569244, 0.011820970103144646, 0.011451120488345623, 0.0079206246882677078, 0.0080097243189811707, 0.0050299325957894325, 0.0087810130789875984, 0.01239425502717495, 0.010811755433678627, 0.013433308340609074, 0.005479159764945507, 0.0085725244134664536, 0.0067760092206299305, 0.010443428531289101, 0.012336590327322483, 0.011801932007074356, 0.011945400387048721, 0.79931086301803589, 0.014611274003982544, 0.0088648544624447823, 0.017295224592089653, 0.0078323734924197197, 0.0063184001483023167, 0.011200100183486938, 0.008534860797226429, 0.0054530017077922821, 0.0037244507111608982, 0.0073878858238458633, 0.95989292860031128, 0.0067520122975111008, 0.012002943083643913, 0.14675560593605042, 0.010590866208076477, 0.0074591212905943394, 0.0070381471887230873, } };
const TfArray<128, int> quant120_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant120 = { (TfLiteFloatArray*)&quant120_scale, (TfLiteIntArray*)&quant120_zero, 3 };
const ALIGN(8) int32_t tensor_data121[128] = { 
    -181, -427, -682, -194, 601, -1307, 655, 14, -322, -476, 
    -146, -361, -308, -447, -15, -320, -775, -244, -303, 289, 
    1928, -530, -509, -679, -1043, -52, -464, -908, -1202, 43, 
    1467, -490, 205, -37, -9, 141, 1710, -508, 1349, -448, 
    1793, -93, -787, -403, -153, -843, -191, 2218, 373, -74, 
    -721, -13, 17, -363, 210, -414, 1256, 525, -412, -121, 
    -81, -227, -543, -494, -146, -5, -13, -499, -2, -314, 
    -1507, 310, -427, 535, -778, -223, -936, 2255, -2201, 1546, 
    -92, 219, -227, -187, -16, -219, -1181, -201, 175, -1049, 
    442, -20, -242, -126, -251, -413, -556, -923, -864, 150, 
    140, -301, -518, 1750, -237, 1354, -6, 186, -654, -554, 
    -8, -448, 17, -493, -810, 71, -464, -408, 4, 2576, 
    358, -11, 308, -400, -59, -239, -523, -621, 
};
const TfArray<1, int> tensor_dimension121 = { 1, { 128 } };
const TfArray<128, float> quant121_scale = { 128, { 0.0040277298539876938, 0.0022672922350466251, 0.0040295030921697617, 0.003453702200204134, 0.0020313970744609833, 0.0030338815413415432, 0.0053750504739582539, 0.008174283429980278, 0.005853225477039814, 0.0023675141856074333, 0.0021339601371437311, 0.0040506818331778049, 0.0030226926319301128, 0.0030248432885855436, 0.16079321503639221, 0.0080978758633136749, 0.0033526669722050428, 0.0042797676287591457, 0.0054229558445513248, 0.0021926905028522015, 0.0019595490302890539, 0.0060509326867759228, 0.0033166157081723213, 0.0028983759693801403, 0.002716392045840621, 0.0050072898156940937, 0.0034202234819531441, 0.0026446133852005005, 0.0026787815149873495, 0.00566827692091465, 0.0037981064524501562, 0.003852837486192584, 0.0034047316294163465, 0.0026897862553596497, 0.003618625458329916, 0.0027354632038623095, 0.0017166401958093047, 0.0018651587888598442, 0.0028068090323358774, 0.0053768521174788475, 0.003124055452644825, 0.0036543437745422125, 0.0021409338805824518, 0.0039499611593782902, 0.0043795844539999962, 0.0035244456958025694, 0.0025233603082597256, 0.0023235923144966364, 0.0031332047656178474, 0.0029728577937930822, 0.0046788915060460567, 0.0034455240238457918, 0.0032159062102437019, 0.0026120145339518785, 0.0030094862449914217, 0.0019004571950063109, 0.0025426005013287067, 0.0026324554346501827, 0.0031454991549253464, 0.0027938485145568848, 0.0077122305519878864, 0.0076884543523192406, 0.0023779056500643492, 0.0027823443524539471, 0.0063738389872014523, 0.63336002826690674, 0.0047685434110462666, 0.0034442862961441278, 0.13982194662094116, 0.0064590480178594589, 0.0017071109032258391, 0.0033241065684705973, 0.0036579552106559277, 0.0040920334868133068, 0.0034074094146490097, 0.0036794382613152266, 0.0018396334489807487, 0.0020075964275747538, 0.0011586330365389585, 0.0023292864207178354, 0.0030837475787848234, 0.0031778344418853521, 0.0067934803664684296, 0.0050307437777519226, 0.022748421877622604, 0.0065167476423084736, 0.0021326730493456125, 0.0023916997015476227, 0.0022348512429744005, 0.0023607329931110144, 0.0025367634370923042, 0.15337526798248291, 0.0087896846234798431, 0.0031000818125903606, 0.0042666452936828136, 0.0041331523098051548, 0.0028588597197085619, 0.002891019219532609, 0.0018154971767216921, 0.0031694071367383003, 0.0044735660776495934, 0.0039023805875331163, 0.0048486003652215004, 0.0019776406697928905, 0.0030941555742174387, 0.0024457236286252737, 0.0037694370839744806, 0.0044527524150907993, 0.0042597735300660133, 0.0043115569278597832, 0.28850218653678894, 0.0052737738005816936, 0.0031996688339859247, 0.0062425155192613602, 0.0028270063921809196, 0.0022805549670010805, 0.0040425490587949753, 0.0030805612914264202, 0.0019681991543620825, 0.0013442982453852892, 0.0026665737386792898, 0.34646248817443848, 0.0024370623286813498, 0.004332326352596283, 0.05296977236866951, 0.0038226530887186527, 0.0026922852266579866, 0.002540339482948184, } };
const TfArray<128, int> quant121_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant121 = { (TfLiteFloatArray*)&quant121_scale, (TfLiteIntArray*)&quant121_zero, 0 };
const TfArray<4, int> tensor_dimension122 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant122_scale = { 1, { 0.47920939326286316, } };
const TfArray<1, int> quant122_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant122 = { (TfLiteFloatArray*)&quant122_scale, (TfLiteIntArray*)&quant122_zero, 0 };
const TfArray<4, int> tensor_dimension123 = { 4, { 128,1,1,128 } };
const TfArray<128, float> quant123_scale = { 128, { 0.001780665828846395, 0.002517814515158534, 0.0016120487125590444, 0.00089853239478543401, 0.0047827083617448807, 0.0038100420497357845, 0.0013422459596768022, 0.001306178979575634, 0.001347045530565083, 0.0039484221488237381, 0.0036875400692224503, 0.0021906821057200432, 0.0012547828955575824, 0.0049087372608482838, 0.16381821036338806, 0.001434899982996285, 0.0025999001227319241, 0.0015418590046465397, 0.0010393643751740456, 0.0041111460886895657, 0.0033388289157301188, 0.0020798847544938326, 0.0021951273083686829, 0.0010542541276663542, 0.0020143282599747181, 0.0032932884059846401, 0.0034651448950171471, 0.0015735110500827432, 0.0031953980214893818, 0.0021823125425726175, 0.0022349159698933363, 0.0018225407693535089, 0.0028106505051255226, 0.003478864673525095, 0.0029031424783170223, 0.0032143073622137308, 0.0067578661255538464, 0.0007772478275001049, 0.0046327454037964344, 0.0042125917971134186, 0.0032610634807497263, 0.0027794972993433475, 0.002489584032446146, 0.0017578371334820986, 0.0036879200488328934, 0.0011291856644675136, 0.0029353173449635506, 0.0037832120433449745, 0.002302414970472455, 0.0019251329358667135, 0.001739456201903522, 0.0019103324739262462, 0.0035376010928303003, 0.0038366720546036959, 0.0039963517338037491, 0.0020709626842290163, 0.0060634431429207325, 0.003520230995491147, 0.0019849971868097782, 0.0025461716577410698, 0.0014245170168578625, 0.0046242470853030682, 0.002614117693156004, 0.0017679312732070684, 0.0022603448014706373, 0.00086806307081133127, 0.0024822603445500135, 0.0010217903181910515, 0.0010670563206076622, 0.0016872647684067488, 0.0025466366205364466, 0.0016765802865847945, 0.0020290424581617117, 0.0032277330756187439, 0.0020412174053490162, 0.0013152816100046039, 0.0013283244334161282, 0.0039504817686975002, 0.0028780656866729259, 0.0045913346111774445, 0.0026934777852147818, 0.0014783106744289398, 0.0012601139023900032, 0.0028099615592509508, 0.00082300376379862428, 0.0026182008441537619, 0.0015073588583618402, 0.002192062558606267, 0.0035225851461291313, 0.0011676580179482698, 0.0032483946997672319, 0.060771439224481583, 0.0010710889473557472, 0.0017817419720813632, 0.0017133370274677873, 0.0035283623728901148, 0.0015071590896695852, 0.002286938950419426, 0.0035477038472890854, 0.0021189465187489986, 0.0018029722850769758, 0.0028797527775168419, 0.0018945416668429971, 0.004281072411686182, 0.0020433468744158745, 0.0041512632742524147, 0.0011707969242706895, 0.0019693765789270401, 0.0015352079644799232, 0.0010431114351376891, 0.00069616042310371995, 0.0018040684517472982, 0.0020709892269223928, 0.00096808536909520626, 0.0026843990199267864, 0.0029521589167416096, 0.0031110250856727362, 0.0015781061956658959, 0.0048347418196499348, 0.0051702852360904217, 0.0023434776812791824, 0.11489260941743851, 0.0014820406213402748, 0.001344313146546483, 0.0017197601264342666, 0.0015996090369299054, 0.0025739753618836403, 0.0017121373675763607, } };
const TfArray<128, int> quant123_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant123 = { (TfLiteFloatArray*)&quant123_scale, (TfLiteIntArray*)&quant123_zero, 0 };
const TfArray<1, int> tensor_dimension124 = { 1, { 128 } };
const TfArray<128, float> quant124_scale = { 128, { 0.00085331179434433579, 0.0012065604096278548, 0.00077250890899449587, 0.00043058517621830106, 0.0022919187322258949, 0.0018258079653605819, 0.00064321688842028379, 0.000625933229457587, 0.00064551684772595763, 0.0018921209266409278, 0.0017671037930995226, 0.0010497954208403826, 0.00060130376368761063, 0.0023523129057139158, 0.078503228724002838, 0.00068761757574975491, 0.001245896564796567, 0.00073887332109734416, 0.00049807317554950714, 0.001970099750906229, 0.0015999982133507729, 0.00099670025520026684, 0.0010519255883991718, 0.00050520850345492363, 0.00096528499852865934, 0.001578174764290452, 0.0016605299897491932, 0.00075404124800115824, 0.0015312647446990013, 0.001045784680172801, 0.0010709926718845963, 0.00087337865261361003, 0.0013468901161104441, 0.0016671046614646912, 0.0013912131544202566, 0.0015403262805193663, 0.0032384330406785011, 0.00037246444844640791, 0.0022200550884008408, 0.0020187136251479387, 0.0015627322718501091, 0.0013319612480700016, 0.0011930320179089904, 0.00084237207192927599, 0.0017672859830781817, 0.00054111640201881528, 0.0014066316653043032, 0.0018129507079720497, 0.0011033389018848538, 0.00092254177434369922, 0.00083356373943388462, 0.00091544928727671504, 0.0016952516743913293, 0.0018385692965239286, 0.0019150893203914165, 0.00099242478609085083, 0.0029056589119136333, 0.0016869277460500598, 0.0009512293036095798, 0.0012201493373140693, 0.0006826419266872108, 0.0022159826476126909, 0.0012527097715064883, 0.00084720924496650696, 0.0010831784456968307, 0.00041598398820497096, 0.0011895224452018738, 0.00048965151654556394, 0.00051134341629222035, 0.00080855312990024686, 0.001220372156240046, 0.00080343300942331553, 0.00097233621636405587, 0.0015467599732801318, 0.00097817054484039545, 0.00063029531156644225, 0.00063654553378000855, 0.0018931080121546984, 0.0013791960664093494, 0.0022002106998115778, 0.0012907398631796241, 0.00070842035347595811, 0.0006038584397174418, 0.0013465599622577429, 0.0003943911287933588, 0.0012546664802357554, 0.0007223405409604311, 0.001050457009114325, 0.0016880559269338846, 0.00055955268908292055, 0.0015566612128168344, 0.029122244566679001, 0.00051327591063454747, 0.00085382751422002912, 0.00082104717148467898, 0.001690824399702251, 0.00072224478935822845, 0.001095922663807869, 0.001700093038380146, 0.0010154190240427852, 0.0008640012820251286, 0.0013800045708194375, 0.00090788217494264245, 0.002051530173048377, 0.00097919104155153036, 0.0019893243443220854, 0.00056105689145624638, 0.00094374374020844698, 0.00073568610241636634, 0.0004998688236810267, 0.00033360661473125219, 0.00086452654795721173, 0.00099243747536092997, 0.00046391561045311391, 0.0012863891897723079, 0.0014147022739052773, 0.0014908324228599668, 0.00075624330202117562, 0.0023168537300080061, 0.0024776493664830923, 0.0011230164673179388, 0.055057618767023087, 0.00071020779432728887, 0.00064420746639370918, 0.00082412519259378314, 0.00076654768781736493, 0.0012334731873124838, 0.00082047231262549758, } };
const TfArray<128, int> quant124_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant124 = { (TfLiteFloatArray*)&quant124_scale, (TfLiteIntArray*)&quant124_zero, 0 };
const TfArray<4, int> tensor_dimension125 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant125_scale = { 1, { 0.2219281792640686, } };
const TfArray<1, int> quant125_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant125 = { (TfLiteFloatArray*)&quant125_scale, (TfLiteIntArray*)&quant125_zero, 0 };
const ALIGN(8) int8_t tensor_data126[1*3*3*128] = { 
  /* [0][0][][] */ 125,65,13,30,10,-16,22,58,116,-28,-37,-33,-14,9,3,-10,84,-60,77,-22,114,13,-22,26,-48,-63,-37,15,-85,-45,117,71,-38,-33,-80,-109,43,-20,-37,36,22,-39,-49,-28,-13,28,-6,28,-38,69,-40,-9,71,127,37,-49,-35,127,45,-77,41,8,-37,62,127,-29,109,8,44,-29,-39,-12,25,42,126,127,19,127,23,-25,-18,66,-62,58,10,43,-27,78,-13,47,-34,18,1,-5,-127,127,-2,127,41,65,127,-5,16,-6,34,-52,-37,64,109,-8,-39,-76,-86,66,-59,52,-62,0,56,83,-49,110,-29,21,-30,-42,92,-91, 107,37,-47,27,-91,12,22,86,127,-127,127,101,-28,0,26,49,52,14,127,-22,6,10,-25,59,5,-50,127,127,-33,72,58,69,-115,71,-15,38,71,-74,-23,28,-32,33,-33,6,-27,20,-56,73,52,23,82,93,51,87,39,-43,-54,116,32,-63,111,127,-4,116,22,-28,70,-44,59,-24,-26,87,60,0,127,2,20,65,79,32,-47,67,-24,26,-15,-45,-1,104,15,60,-27,88,-32,-8,-63,48,17,54,43,9,63,88,44,38,-32,-7,-11,127,26,127,127,-12,-92,99,127,-9,-25,-103,28,97,-51,61,-77,48,-55,12,82,-59, 127,-48,26,1,-41,4,24,83,24,-99,-16,65,-26,57,12,-28,63,-40,-21,-2,-23,-27,-28,38,34,-81,14,32,-12,105,82,0,-46,37,57,73,36,-36,-34,-110,-35,-59,-47,4,-45,39,10,16,-79,-60,53,9,38,-37,-55,-51,-27,-120,20,-24,57,42,9,57,22,-43,29,-23,21,-8,-90,-10,58,46,46,-72,-20,-21,31,-15,-62,87,26,83,-10,20,66,127,-11,46,-22,-84,-92,33,4,2,13,14,-24,-56,30,76,-27,51,-16,21,-50,52,54,53,44,-92,-15,-7,14,-49,5,31,68,2,-38,-34,34,14,-40,-27,82,-19, 
  /* [0][1][][] */ 44,25,-37,41,47,-12,14,69,24,-10,-125,-127,-48,97,3,3,-24,7,127,-29,127,10,2,31,42,47,-5,4,-82,-13,41,96,-89,-13,127,125,78,-14,127,29,127,14,25,1,-127,46,23,49,13,26,-28,-16,-46,-29,41,-11,39,62,93,-8,72,-38,46,29,-13,38,-95,-71,1,-44,122,1,38,82,40,95,22,29,26,0,99,-24,14,127,-29,9,-4,-16,46,86,25,-45,-11,-21,-34,-34,6,-13,11,127,64,-77,54,-28,91,-7,9,57,127,-85,-36,-17,103,18,-78,127,-43,127,127,127,-7,127,64,92,46,-32,23,-36, -59,127,-15,127,127,127,112,127,-31,60,79,-42,-46,-25,-4,127,60,127,104,-105,43,127,127,127,127,127,117,93,-57,87,127,107,-32,127,-2,-7,126,-124,102,101,36,-1,127,127,-11,107,33,127,-93,127,127,127,-127,-10,127,-41,22,11,-6,127,127,97,70,5,-8,40,75,-90,73,51,48,103,98,-127,-49,11,127,58,127,127,86,-127,18,-22,120,48,127,23,83,127,127,50,3,-114,-53,-25,127,9,127,90,-65,127,127,127,20,127,127,83,115,-36,11,-91,127,127,65,103,-36,77,105,65,7,-14,5,127,125,121,30,127, 30,-37,127,27,18,-52,64,23,2,-70,22,75,-2,-90,55,18,-19,104,121,-62,-108,19,20,35,73,51,10,23,-127,-43,25,124,101,59,15,13,127,-75,4,-127,19,62,26,58,52,51,47,28,-46,-73,-16,-46,-64,-32,105,-127,51,-115,-83,30,71,-62,22,-26,36,66,-80,-31,39,56,-112,108,29,-56,-27,-33,38,-48,11,-34,38,-100,-45,31,127,127,79,33,4,40,-2,-5,25,-24,17,-124,98,82,-35,-57,-8,-12,21,114,7,54,-66,35,66,-19,21,-57,-24,68,4,-54,-52,6,23,34,20,-11,122,27,5,-127,76,111, 
  /* [0][2][][] */ 52,24,49,34,9,71,31,71,-33,-53,-54,-69,-107,127,0,28,-54,62,61,123,42,25,7,0,-13,9,-6,-8,-4,-37,47,7,-91,4,100,127,-1,75,-18,-60,25,54,7,-9,-28,74,8,23,43,11,-23,6,-67,-103,19,6,39,-4,127,11,-22,-24,-63,-48,-99,-41,39,54,-33,13,127,-127,39,121,97,-22,17,50,21,-7,127,42,14,1,8,92,-57,-90,127,12,-30,-86,-47,-58,-103,98,-25,-50,-26,73,-66,-49,8,50,127,36,47,-104,120,-13,-36,10,47,-44,27,45,-127,126,86,55,37,52,127,70,39,44,84,23, -104,64,24,59,17,68,53,11,-102,25,86,-50,-127,21,1,109,-51,70,117,127,-2,42,56,58,39,41,66,47,19,29,40,41,-127,49,37,-52,-43,-23,87,-114,-7,75,38,46,-39,98,50,-15,-43,33,95,24,-77,-23,44,20,35,-79,68,35,36,6,-66,-127,-23,34,-37,-127,-40,127,30,50,67,-71,-64,-44,52,25,-5,16,15,-78,127,-27,-10,112,-25,19,34,-55,35,-23,100,-127,-40,77,-21,20,38,39,-45,-67,46,28,10,106,41,105,52,-15,-30,-127,106,85,-105,-5,-44,52,32,-7,6,-18,66,75,127,91,112,-34, -8,9,11,32,72,18,127,-49,43,-5,12,-111,-60,22,127,91,-127,43,98,-9,21,35,14,15,0,8,76,22,-110,-127,-95,127,98,2,-39,104,25,-127,-13,-14,-101,127,1,-22,68,127,127,-56,-127,-33,-77,3,14,11,42,-115,127,-73,-37,2,100,-66,-127,24,68,127,-127,-93,127,46,-29,26,127,-79,-45,-71,6,-12,-30,-27,14,-111,-30,51,109,123,-3,34,24,-32,10,127,127,-105,2,-43,26,20,-5,-79,-34,-31,6,55,53,67,-5,82,85,-82,-21,-78,12,84,14,-27,-70,33,-111,-24,127,1,93,34,14,42,127,-103, 
};
const TfArray<4, int> tensor_dimension126 = { 4, { 1,3,3,128 } };
const TfArray<128, float> quant126_scale = { 128, { 0.0092726182192564011, 0.011127112433314323, 0.0094603272154927254, 0.48049920797348022, 0.0074871419928967953, 0.0054041254334151745, 0.087283164262771606, 0.0090235229581594467, 0.0099700503051280975, 0.004237231332808733, 0.0038069151341915131, 0.017215307801961899, 0.0078696729615330696, 0.0067211063578724861, 0.26896575093269348, 0.080701738595962524, 0.0067243184894323349, 0.006939304992556572, 0.0064043253660202026, 0.0044168056920170784, 0.0042277481406927109, 0.015484442003071308, 0.012783315032720566, 0.010017653927206993, 0.0062860390171408653, 0.0095496857538819313, 0.0049325739964842796, 0.050554603338241577, 0.0027387773152440786, 0.0076586310751736164, 0.01303747296333313, 0.0051129776984453201, 0.0043091680854558945, 0.00610762694850564, 0.0051621990278363228, 0.0045600468292832375, 0.0056503121741116047, 0.0081576649099588394, 0.010859755799174309, 0.0078688366338610649, 0.0087139233946800232, 0.0063276118598878384, 0.0075004617683589458, 0.0067959544248878956, 0.006964593194425106, 0.040798336267471313, 0.0059107588604092598, 0.0076478822156786919, 0.0033659450709819794, 0.0086829708889126778, 0.011060575023293495, 0.0063503277488052845, 0.0053972173482179642, 0.0050106733106076717, 0.0069203679449856281, 0.0086984261870384216, 0.0071594822220504284, 0.0032680293079465628, 0.0059405169449746609, 0.010055229999125004, 0.024253202602267265, 0.0094261094927787781, 0.0086207566782832146, 0.0026123905554413795, 0.005791135597974062, 0.015445600263774395, 0.0069749592803418636, 0.010782818309962749, 0.011474665254354477, 0.0056010042317211628, 0.0038235301617532969, 0.0052848905324935913, 0.010366311296820641, 0.011363907717168331, 0.016745811328291893, 0.0054903547279536724, 0.0079252775758504868, 0.01364140585064888, 0.0073431506752967834, 0.0077371131628751755, 0.0050260331481695175, 0.0081864418461918831, 0.0080639570951461792, 0.0047415830194950104, 0.013596909120678902, 0.0072836298495531082, 0.0070837135426700115, 0.006365013774484396, 0.0056257853284478188, 0.022281613200902939, 0.014531053602695465, 0.0049773044884204865, 0.0081256544217467308, 0.0051485332660377026, 0.0073954430408775806, 0.0061949053779244423, 0.013989337719976902, 0.0056200339458882809, 0.008821684867143631, 0.0043101757764816284, 0.0069743874482810497, 0.0071507962420582771, 0.0085883894935250282, 0.0065439925529062748, 0.007198053877800703, 0.0079320194199681282, 0.0057297390885651112, 0.010689194314181805, 0.017512401565909386, 0.0062029543332755566, 0.010059213265776634, 0.001431539305485785, 0.0050020511262118816, 0.024243475869297981, 0.0080583700910210609, 0.0047680954448878765, 0.0064412676729261875, 0.0048371590673923492, 0.0041963439434766769, 0.0064136520959436893, 0.0076859253458678722, 0.0077169914729893208, 0.0065400218591094017, 0.038795363157987595, 0.0090495124459266663, 0.0052589206025004387, 0.0053871441632509232, 0.0058554690331220627, } };
const TfArray<128, int> quant126_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant126 = { (TfLiteFloatArray*)&quant126_scale, (TfLiteIntArray*)&quant126_zero, 3 };
const ALIGN(8) int32_t tensor_data127[128] = { 
    -266, -682, -144, -18, -611, -319, -55, -284, -165, 3182, 
    1068, -1023, 2208, -405, -62, -263, -1128, -513, -596, 366, 
    -238, -663, -491, -557, 44, -301, -1212, -286, 7633, 359, 
    -247, -426, 2347, -827, -300, -961, -1131, 2416, -197, 1415, 
    54, -664, -515, -508, 595, -131, -824, -672, 3853, 29, 
    -569, -375, 1356, -868, -489, 2097, -258, 1202, -772, 2, 
    -362, 201, 983, -1811, -168, -87, 71, 1810, -150, -710, 
    -98, -246, -655, 268, -650, -411, -503, -735, -179, -1123, 
    -393, 1388, -29, -1456, -835, -684, -480, -426, -478, -435, 
    -50, -122, -146, 2486, 2577, -14, -758, 16, -541, -595, 
    199, -23, -791, -565, -592, -1342, 231, -774, 11, 777, 
    68, -437, -436, -646, -397, 102, 3284, -955, -96, -696, 
    -121, -279, -585, -366, -341, -58, -663, 351, 
};
const TfArray<1, int> tensor_dimension127 = { 1, { 128 } };
const TfArray<128, float> quant127_scale = { 128, { 0.0020578552503138781, 0.0024694197345525026, 0.0020995133090764284, 0.10663631558418274, 0.001661607762798667, 0.001199327758513391, 0.019370593130588531, 0.0020025740377604961, 0.0022126350086182356, 0.00094036106020212173, 0.00084486173000186682, 0.0038205618038773537, 0.0017465022392570972, 0.0014916028594598174, 0.059691078960895538, 0.01790999062359333, 0.0014923157868906856, 0.0015400273259729147, 0.0014213002286851406, 0.00098021363373845816, 0.00093825644580647349, 0.0034364340826869011, 0.0028369778301566839, 0.0022231996990740299, 0.0013950491556897759, 0.0021193444263190031, 0.0010946771362796426, 0.011219491250813007, 0.00060781184583902359, 0.0016996660269796848, 0.0028933826833963394, 0.0011347138788551092, 0.00095632584998384118, 0.001355454558506608, 0.001145637477748096, 0.0010120029328390956, 0.0012539634481072426, 0.0018104157643392682, 0.0024100858718156815, 0.0017463165568187833, 0.0019338651327416301, 0.001404275419190526, 0.0016645637806504965, 0.0015082138124853373, 0.0015456394758075476, 0.0090543003752827644, 0.0013117640046402812, 0.0016972805606201291, 0.00074699806282296777, 0.00192699593026191, 0.0024546533823013306, 0.0014093166682869196, 0.0011977945687249303, 0.0011120096314698458, 0.0015358246164396405, 0.0019304258748888969, 0.0015888909110799432, 0.00072526780422776937, 0.0013183681294322014, 0.0022315389942377806, 0.0053824689239263535, 0.0020919193048030138, 0.0019131888402625918, 0.0005797630874440074, 0.0012852161889895797, 0.0034278139937669039, 0.0015479399589821696, 0.0023930112365633249, 0.0025465516373515129, 0.0012430206406861544, 0.00084854906890541315, 0.0011728660902008414, 0.0023005765397101641, 0.0025219712406396866, 0.0037163675297051668, 0.001218464458361268, 0.0017588423797860742, 0.0030274123419076204, 0.0016296521062031388, 0.0017170833889394999, 0.0011154183885082603, 0.0018168020760640502, 0.0017896193312481046, 0.0010522908996790648, 0.0030175372958183289, 0.0016164426924660802, 0.0015720756491646171, 0.0014125759480521083, 0.0012485203333199024, 0.0049449177458882332, 0.0032248501665890217, 0.001104604103602469, 0.0018033116357401013, 0.0011426046257838607, 0.0016412572003901005, 0.0013748240889981389, 0.0031046282965689898, 0.0012472439557313919, 0.0019577804487198591, 0.00095654948381707072, 0.0015478130662813783, 0.001586963189765811, 0.0019060056656599045, 0.0014522963901981711, 0.0015974510461091995, 0.0017603386659175158, 0.0012715905904769897, 0.0023722334299236536, 0.0038864954840391874, 0.0013766103656962514, 0.0022324228193610907, 0.0003176988975610584, 0.0011100961128249764, 0.0053803105838596821, 0.0017883793916553259, 0.0010581747628748417, 0.0014294987777248025, 0.0010735018877312541, 0.00093128695152699947, 0.0014233700931072235, 0.0017057234654203057, 0.0017126178136095405, 0.0014514151262119412, 0.0086097847670316696, 0.0020083417184650898, 0.0011671027168631554, 0.0011955590452998877, 0.0012994935968890786, } };
const TfArray<128, int> quant127_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant127 = { (TfLiteFloatArray*)&quant127_scale, (TfLiteIntArray*)&quant127_zero, 0 };
const TfArray<4, int> tensor_dimension128 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant128_scale = { 1, { 0.24428486824035645, } };
const TfArray<1, int> quant128_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant128 = { (TfLiteFloatArray*)&quant128_scale, (TfLiteIntArray*)&quant128_zero, 0 };
const TfArray<4, int> tensor_dimension129 = { 4, { 128,1,1,128 } };
const TfArray<128, float> quant129_scale = { 128, { 0.0021313310135155916, 0.0021415322553366423, 0.0025876385625451803, 0.022080259397625923, 0.0020155599340796471, 0.0036040856502950191, 0.0015629689441993833, 0.0019549489952623844, 0.001126954797655344, 0.0083067463710904121, 0.0035245504695922136, 0.0088270781561732292, 0.0057483059354126453, 0.0039005910512059927, 0.044998988509178162, 0.0015600491315126419, 0.0037202718667685986, 0.0019388778600841761, 0.001941462978720665, 0.0049191489815711975, 0.0015144251519814134, 0.0021687343250960112, 0.0010748959612101316, 0.0010229089530184865, 0.001129781361669302, 0.0014595970278605819, 0.0027767564170062542, 0.0019595061894506216, 0.0050216671079397202, 0.0033722196239978075, 0.0016160808736458421, 0.0011579990386962891, 0.0035564617719501257, 0.0026433495804667473, 0.001014704117551446, 0.0030020498670637608, 0.0014073014026507735, 0.002941882936283946, 0.0030840025283396244, 0.0024766961578279734, 0.0023126683663576841, 0.0033983285538852215, 0.0012609740952029824, 0.0025921594351530075, 0.00397831154987216, 0.0014681841712445021, 0.002070301678031683, 0.0018213968724012375, 0.0057437517680227757, 0.0025845849886536598, 0.0020341211929917336, 0.001702167559415102, 0.0039213323034346104, 0.0015219738706946373, 0.0022464210633188486, 0.0044352333061397076, 0.0014197803102433681, 0.0045292973518371582, 0.0019570000004023314, 0.0020458742510527372, 0.001078424509614706, 0.0034550982527434826, 0.0015631462447345257, 0.0017719930037856102, 0.0035276401322335005, 0.0035688590724021196, 0.0036668437533080578, 0.0037737777456641197, 0.0014389968710020185, 0.0030580002348870039, 0.0033962614834308624, 0.002792188199236989, 0.0018333477200940251, 0.0024005253799259663, 0.0014572915388271213, 0.0027551872190088034, 0.0013732152292504907, 0.0031142698135226965, 0.001096303341910243, 0.0014911330072209239, 0.0027559255249798298, 0.0025056388694792986, 0.0021211521234363317, 0.0054078856483101845, 0.0021455895621329546, 0.0018714114557951689, 0.0022003736812621355, 0.0016208174638450146, 0.0011667982907965779, 0.0015891484217718244, 0.0016898820176720619, 0.0047578946687281132, 0.0026940933894366026, 0.0061278082430362701, 0.0039406470023095608, 0.0028673142660409212, 0.0012779827229678631, 0.0029486319981515408, 0.00096438120817765594, 0.0015438518021255732, 0.0037147281691431999, 0.0037500313483178616, 0.00088583282195031643, 0.0014708035159856081, 0.0014109748881310225, 0.0022150077857077122, 0.0024687368422746658, 0.00080871593672782183, 0.0014873100444674492, 0.003389931982383132, 0.0052915439009666443, 0.13045164942741394, 0.0013316604308784008, 0.0018356952350586653, 0.0042138104327023029, 0.0022081723436713219, 0.0043321028351783752, 0.005985782016068697, 0.0008217318682000041, 0.0017822904046624899, 0.0034334519878029823, 0.0028480042237788439, 0.0015079510631039739, 0.0011490728938952088, 0.0020059605594724417, 0.0016336410772055387, 0.0033056510146707296, 0.0038940983358770609, } };
const TfArray<128, int> quant129_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant129 = { (TfLiteFloatArray*)&quant129_scale, (TfLiteIntArray*)&quant129_zero, 0 };
const TfArray<1, int> tensor_dimension130 = { 1, { 128 } };
const TfArray<128, float> quant130_scale = { 128, { 0.00052065192721784115, 0.00052314391359686852, 0.00063212093664333224, 0.0053938734345138073, 0.00049237080384045839, 0.0008804235840216279, 0.00038180965930223465, 0.00047756446292623878, 0.00027529799262993038, 0.002029212424531579, 0.00086099433246999979, 0.0021563216578215361, 0.0014042241964489222, 0.00095285539282485843, 0.010992571711540222, 0.00038109638262540102, 0.00090880610514432192, 0.00047363853082060814, 0.00047427002573385835, 0.0012016736436635256, 0.00036995115806348622, 0.00052978895837441087, 0.00026258081197738647, 0.00024988118093460798, 0.00027598848100751638, 0.00035655745887197554, 0.00067831960041075945, 0.0004786777135450393, 0.0012267172569409013, 0.00082378223305568099, 0.00039478411781601608, 0.00028288163593970239, 0.00086878979345783591, 0.00064573029521852732, 0.00024787685833871365, 0.00073335535125806928, 0.00034378244890831411, 0.00071865750942379236, 0.00075337517773732543, 0.0006050193915143609, 0.00056494987802579999, 0.00083016022108495235, 0.00030803689151071012, 0.00063322531059384346, 0.00097184133483096957, 0.00035865517565980554, 0.00050574337365105748, 0.00044493970926851034, 0.0014031116152182221, 0.00063137500546872616, 0.00049690500600263476, 0.00041581378900445998, 0.00095792213687673211, 0.00037179517676122487, 0.00054876669310033321, 0.0010834604036062956, 0.00034683084231801331, 0.0011064388090744615, 0.00047806548536755145, 0.00049977609887719154, 0.00026344278012402356, 0.00084402819629758596, 0.00038185296580195427, 0.00043287107837386429, 0.00086174911120906472, 0.00087181827984750271, 0.00089575443416833878, 0.00092187681002542377, 0.00035152517375536263, 0.00074702320853248239, 0.00082965526962652802, 0.00068208930315449834, 0.0004478591145016253, 0.00058641203213483095, 0.00035599427064880729, 0.00067305052652955055, 0.00033545569749549031, 0.00076076900586485863, 0.00026781030464917421, 0.00036426124279387295, 0.00067323091207072139, 0.00061208964325487614, 0.00051816535415127873, 0.0013210646575316787, 0.00052413507364690304, 0.00045715749729424715, 0.00053751800442114472, 0.00039594116969965398, 0.00028503115754574537, 0.00038820490590296686, 0.0004128126020077616, 0.0011622817255556583, 0.00065812625689432025, 0.0014969308394938707, 0.00096264044987037778, 0.00070044148014858365, 0.00031219184165820479, 0.00072030618321150541, 0.00023558373504783958, 0.0003771396295633167, 0.0009074519039131701, 0.00091607589274644852, 0.00021639555052388459, 0.00035929505247622728, 0.00034467980731278658, 0.00054109288612380624, 0.00060307508101686835, 0.00019755706307478249, 0.00036332732997834682, 0.00082810909952968359, 0.0012926440685987473, 0.031867362558841705, 0.00032530448515899479, 0.00044843257637694478, 0.0010293701197952032, 0.0005394230829551816, 0.0010582671966403723, 0.0014622359303757548, 0.00020073665655218065, 0.0004353865806479007, 0.00083874037954956293, 0.00069572433130815625, 0.00036836962681263685, 0.00028070111875422299, 0.00049002579180523753, 0.00039907378959469497, 0.00080752052599564195, 0.00095126929227262735, } };
const TfArray<128, int> quant130_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant130 = { (TfLiteFloatArray*)&quant130_scale, (TfLiteIntArray*)&quant130_zero, 0 };
const TfArray<4, int> tensor_dimension131 = { 4, { 1,8,8,128 } };
const TfArray<1, float> quant131_scale = { 1, { 0.079008184373378754, } };
const TfArray<1, int> quant131_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant131 = { (TfLiteFloatArray*)&quant131_scale, (TfLiteIntArray*)&quant131_zero, 0 };
const ALIGN(8) int8_t tensor_data132[1*3*3*128] = { 
  /* [0][0][][] */ 13,-109,-100,-66,127,9,-22,-127,127,75,-127,-53,-127,109,-30,121,31,11,-20,70,30,-95,127,127,118,18,-7,-20,105,-101,-81,127,-79,-93,29,-9,-72,-84,-23,-40,-1,-90,127,-127,-49,125,-7,-30,-53,-20,-6,66,-127,-106,-86,-26,127,-127,64,14,56,-94,27,43,-82,-103,-13,-50,6,127,2,117,-102,-26,27,-93,-127,72,-61,-19,-93,17,-127,83,127,-104,119,-31,-95,-46,127,-19,-87,-70,116,-127,127,61,-6,-39,-70,-58,127,127,-54,-118,-119,-108,-62,4,-33,10,2,-71,-64,-75,23,-30,9,-1,-91,-68,127,41,-67,-54,-58,15, -127,-118,-78,-48,58,-27,-119,-78,35,95,56,-98,-55,-3,-33,91,-64,-127,-108,58,7,122,37,48,97,-25,-90,-1,127,-32,-76,68,-46,-79,18,-104,35,-49,-127,-4,27,-2,39,15,-127,127,-6,-127,-84,127,-40,28,-61,-39,-101,19,15,-14,127,-5,64,127,-33,26,-59,-31,20,-36,5,31,11,118,79,69,15,-18,91,12,82,-11,-43,-118,-87,-17,26,-127,127,49,-110,-127,31,-42,54,-56,-127,-121,125,80,29,127,-48,-127,64,104,-76,22,-12,-119,-76,-125,-127,-127,-66,-44,33,-16,-81,56,9,-48,-24,-35,85,14,-114,-57,-127,-35, -100,96,2,-47,-24,-28,-41,0,1,-59,89,-28,-38,127,-23,-33,-86,2,5,53,-23,-118,-41,-33,24,-3,-114,-19,29,2,-113,-27,13,7,-110,-14,-28,-68,-37,-90,-18,-70,-13,-1,-83,13,-41,-45,-8,-22,-5,-15,-36,-44,-41,127,-5,-3,-31,-4,-3,-30,-22,-18,-16,45,-16,-15,0,3,-38,28,-67,-83,-49,-47,-60,-5,-40,-13,48,-35,-18,-59,-14,-78,18,-27,-39,-62,-6,-57,-55,-49,-116,-69,9,9,-4,45,-8,-70,-26,49,-4,-74,-88,-5,-15,-56,-17,7,18,4,-35,-78,-20,-38,-21,19,-35,-29,-28,-43,-65,16,-64,-87, 
  /* [0][1][][] */ -62,-31,-70,40,78,127,-62,-48,78,66,-30,6,23,15,3,116,22,-19,-53,-127,10,-90,88,71,127,82,-10,42,46,-127,-65,89,-76,-122,79,-18,-22,1,8,-88,127,-98,84,-119,-35,110,-26,-18,-127,19,23,81,-24,112,-57,-70,82,-4,77,74,127,-83,-118,44,62,-36,-65,127,12,-39,-8,122,-82,-127,71,-127,-52,103,-127,51,-44,8,-100,-16,79,-94,65,34,-23,32,31,-94,-74,-76,45,63,91,104,-18,73,35,-32,108,83,-116,-68,33,106,-50,-78,-80,6,-12,-127,-114,-68,88,-49,102,-61,-48,15,64,127,-65,3,-66,-104, -35,-53,-127,24,90,126,-127,-83,73,28,56,-127,63,-63,127,127,127,103,-88,-96,127,127,85,96,119,127,-67,97,82,-78,-89,100,-98,-96,127,-72,-127,-27,-112,-6,13,49,89,-15,-9,113,9,-72,-96,71,44,20,33,-76,-127,-36,66,34,94,60,70,105,-103,-16,35,-34,32,6,127,-7,120,127,108,117,127,-23,101,64,107,40,82,-13,-22,-127,72,-53,74,127,-127,-71,43,109,127,-127,-103,109,78,127,127,36,109,-48,86,38,13,-16,78,127,-127,-127,-29,-123,-127,-48,127,122,-29,97,127,-95,-92,-109,57,-9,-127,84,-102,102, -67,70,-67,-5,4,61,-70,-50,-40,-47,116,-95,56,78,62,63,-10,20,-127,-66,-1,-119,-35,-5,-2,-20,-127,-6,50,-7,-127,12,-127,-100,-8,-22,-19,-60,-62,-127,-4,121,-29,-6,-39,35,-18,-46,-2,5,73,-1,42,-31,-57,83,-22,62,26,-5,-11,-63,11,-34,5,-127,-31,-4,-6,2,-22,42,-120,-98,1,-118,-34,14,-50,-24,90,39,9,-55,-32,-8,44,64,-92,-49,-5,21,-11,-89,-84,54,-21,67,24,-40,60,-55,-36,75,14,-61,127,50,-82,-46,-70,-41,-10,-17,-93,127,-92,16,17,-69,-83,-127,13,-25,-81,-127,-10,-18, 
  /* [0][2][][] */ -73,60,-47,-127,22,6,-42,26,2,-34,-24,4,2,-75,-22,90,53,-95,-115,-39,51,-91,-9,-3,36,-42,-36,-12,40,-34,-85,67,-72,95,40,-127,27,-64,5,111,16,-127,5,-8,-90,11,-127,-19,-74,-9,64,19,-82,127,-62,-51,3,1,25,49,-13,-84,-45,12,98,-1,-91,-107,55,6,20,-12,-5,-28,51,-48,-49,127,-33,3,67,80,-40,6,1,31,56,8,37,47,1,-35,13,-15,21,-4,-34,87,5,39,75,20,11,-22,-31,-127,43,-56,-10,-42,111,-57,15,-56,17,-82,110,127,-19,86,13,-59,92,45,-18,-19,-50,-127, 16,-127,15,-84,0,6,-98,-24,-13,-127,64,-99,90,-29,-112,-48,108,-91,-84,-2,39,102,-26,1,57,-39,-45,38,16,-90,-103,52,3,-127,42,-35,26,-7,-109,32,0,25,-29,42,-90,4,41,-18,-18,31,69,-127,48,-96,-60,-74,-4,51,16,-14,12,63,31,-127,127,-16,-127,-68,82,-25,127,16,25,74,104,-78,7,68,45,24,109,127,32,-45,-19,22,66,17,-37,-33,6,-112,7,-37,11,-73,59,83,86,-29,127,-79,-9,-44,113,-36,61,-106,-38,-67,110,-89,-118,-9,-31,-98,127,71,-66,-4,-86,38,40,-60,-77,-80,-24,-7, 26,-64,32,-6,-4,8,-18,11,-4,92,95,-69,58,-31,-69,-29,-1,-123,-50,12,26,-109,-4,-18,-24,-13,-43,-127,55,-30,-94,2,-48,-111,-92,-77,-32,-127,-14,45,64,47,5,103,-108,-29,-74,-64,34,-24,127,5,17,-2,-23,41,-18,78,53,-127,-22,-49,127,-58,120,29,-87,-46,0,-23,59,11,-127,-40,63,1,3,-31,29,-127,127,114,-4,-31,-5,47,115,-84,5,-43,0,-127,4,-42,-9,-107,19,30,-2,64,125,-77,-37,23,127,-101,104,-56,20,-51,-90,-117,12,21,2,-89,-4,103,-105,-127,-127,41,6,26,4,11,20,33, 
};
const TfArray<4, int> tensor_dimension132 = { 4, { 1,3,3,128 } };
const TfArray<128, float> quant132_scale = { 128, { 0.0045922985300421715, 0.0015153002459555864, 0.0011034609051421285, 0.0024243015795946121, 0.012596252374351025, 0.0047267875634133816, 0.0014413775643333793, 0.0020237311255186796, 0.0086024943739175797, 0.0041236495599150658, 0.0028317463584244251, 0.0016646687872707844, 0.0033817852381616831, 0.0028823777101933956, 0.0011521340347826481, 0.0031860494054853916, 0.008880949579179287, 0.0022144804242998362, 0.0010372340911999345, 0.0031324080191552639, 0.017031505703926086, 0.0023154160007834435, 0.011834275908768177, 0.0083667151629924774, 0.001766407280229032, 0.013471941463649273, 0.0029760426841676235, 0.0050921174697577953, 0.0024649221450090408, 0.0015735568013042212, 0.0028091475833207369, 0.0083807222545146942, 0.0015607776585966349, 0.00072857871418818831, 0.0050961212255060673, 0.0056027094833552837, 0.0026270940434187651, 0.0011609016219154, 0.0011557722464203835, 0.0017355494201183319, 0.0036049082409590483, 0.0013289606431499124, 0.013889182358980179, 0.0030978021677583456, 0.0015367645537480712, 0.002480953698977828, 0.0030325062107294798, 0.0018064640462398529, 0.0012746398570016026, 0.0026853163726627827, 0.0021411827765405178, 0.0057694460265338421, 0.0034409589134156704, 0.0013211847981438041, 0.0014720066683366895, 0.004861864261329174, 0.012299132533371449, 0.0029747285880148411, 0.005044473335146904, 0.0030161777976900339, 0.014176052995026112, 0.0013093117158859968, 0.0022867002990096807, 0.002873291028663516, 0.0010883072391152382, 0.0037589885760098696, 0.002039359649643302, 0.0046493238769471645, 0.024395009502768517, 0.0021205602679401636, 0.0044195926748216152, 0.0032042483799159527, 0.003524756757542491, 0.0013636498479172587, 0.0043465648777782917, 0.0021813495550304651, 0.0022074505686759949, 0.001362053444609046, 0.0027166970539838076, 0.013699308037757874, 0.0025490056723356247, 0.0024283146485686302, 0.0029265573248267174, 0.0027952487580478191, 0.024980159476399422, 0.0020391193684190512, 0.003518995363265276, 0.0033186809159815311, 0.0017548833275213838, 0.0024453604128211737, 0.074839219450950623, 0.001814128365367651, 0.0025477178860455751, 0.0016179309459403157, 0.0024544240441173315, 0.0013755495892837644, 0.0017717875307425857, 0.0029253067914396524, 0.0013490617275238037, 0.0072749280370771885, 0.0010836573783308268, 0.0011539200786501169, 0.010042931884527206, 0.0017537572421133518, 0.0024002855643630028, 0.0027577050495892763, 0.0019244070863351226, 0.0024877388495951891, 0.0016978535568341613, 0.0013901602942496538, 0.0017726857913658023, 0.0016812871908769011, 0.0023764001671224833, 0.002335959579795599, 0.0028432146646082401, 0.0014986870810389519, 0.0018214468145743012, 0.0014395295875146985, 0.0066152820363640785, 0.0014620336005464196, 0.001125769573263824, 0.0018158885650336742, 0.0036800028756260872, 0.0018674578750506043, 0.0017254891572520137, 0.0070222173817455769, 0.001200981205329299, 0.00185759412124753, } };
const TfArray<128, int> quant132_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant132 = { (TfLiteFloatArray*)&quant132_scale, (TfLiteIntArray*)&quant132_zero, 3 };
const ALIGN(8) int32_t tensor_data133[128] = { 
    414, -2163, 10292, 2713, -1422, -1105, 10589, 9927, -2330, -5183, 
    1964, 5039, -1463, -482, 418, 181, -2320, -3863, 5641, 1991, 
    -8, -1122, -1578, -2394, 209, -1006, 3883, -5221, -791, 13950, 
    730, -434, 7225, 8641, -3678, -200, -2317, 86, 12200, -1902, 
    199, -461, -937, 1624, -181, -183, -2470, 6371, 9791, -7700, 
    -4695, -530, -2383, 1972, 11415, -22, -1074, -20, -134, 401, 
    851, 2189, 6173, 3172, 273, 278, 6387, -482, -599, 127, 
    -4296, -1962, 2816, 1647, 13, 125, 416, 732, 423, -1358, 
    736, -2278, 6672, -115, -597, 5609, -4190, -4827, 10447, 5778, 
    -191, 1241, -454, 7079, 4658, 3108, -190, 53, -2833, -4171, 
    -239, 6884, -1486, 1121, 2457, 156, -1847, 72, 14577, 8216, 
    1206, -3573, 5310, 2707, -37, 833, -420, -2909, -1916, 9340, 
    8779, 9138, -835, -31, 6483, -196, 7384, -4909, 
};
const TfArray<1, int> tensor_dimension133 = { 1, { 128 } };
const TfArray<128, float> quant133_scale = { 128, { 0.00036282915971241891, 0.0001197211240651086, 8.7182444985955954e-05, 0.00019153967150487006, 0.00099520699586719275, 0.00037345491000451148, 0.00011388062557671219, 0.00015989132225513458, 0.0006796674570068717, 0.00032580207334831357, 0.00022373114188667387, 0.00013152246538084, 0.00026718870503827929, 0.00022773143427912146, 9.1028021415695548e-05, 0.00025172397727146745, 0.00070166768273338675, 0.00017496207146905363, 8.1949983723461628e-05, 0.00024748587748035789, 0.0013456282904371619, 0.00018293681205250323, 0.00093500467482954264, 0.00066103896824643016, 0.00013956063776277006, 0.0010643936693668365, 0.00023513172345701605, 0.00040231895400211215, 0.00019474902364891022, 0.00012432386574801058, 0.00022194565099198371, 0.00066214567050337791, 0.0001233142102137208, 5.7563680456951261e-05, 0.00040263528353534639, 0.00044265988981351256, 0.00020756192679982632, 9.1720728960353881e-05, 9.1315465397201478e-05, 0.00013712260988540947, 0.00028481724439188838, 0.0001049987695296295, 0.0010973591124638915, 0.00024475171812810004, 0.00012141697516199201, 0.00019601565145421773, 0.00023959281679708511, 0.00014272544649429619, 0.00010070698044728488, 0.00021216197637841105, 0.0001691709621809423, 0.00045583344763144851, 0.00027186391525901854, 0.00010438440949656069, 0.00011630057269940153, 0.00038412708090618253, 0.00097173213725909591, 0.00023502791009377688, 0.00039855469367466867, 0.00023830273130442947, 0.0011200242443010211, 0.00010344634210923687, 0.00018066803750116378, 0.00022701350098941475, 8.5985178884584457e-05, 0.00029699085280299187, 0.00016112611046992242, 0.00036733463639393449, 0.0019274053629487753, 0.00016754161333665252, 0.00034918400342576206, 0.00025316185201518238, 0.00027848462923429906, 0.00010773949907161295, 0.00034341419814154506, 0.000172344472957775, 0.00017440666852053255, 0.00010761337034637108, 0.00021464130259118974, 0.0010823574848473072, 0.00020139230764470994, 0.00019185672863386571, 0.00023122198763303459, 0.00022084753436502069, 0.0019736371468752623, 0.0001611071202205494, 0.00027802944532595575, 0.0002622029569465667, 0.00013865013897884637, 0.00019320347928442061, 0.0059129106812179089, 0.00014333099534269422, 0.0002012905606534332, 0.00012782978592440486, 0.00019391959358472377, 0.00010867967648664489, 0.00013998571375850588, 0.00023112318012863398, 0.00010658691462595016, 0.00057477888185530901, 8.5617801232729107e-05, 9.1169131337665021e-05, 0.00079347379505634308, 0.00013856116856914014, 0.00018964220362249762, 0.00021788127196487039, 0.00015204391092993319, 0.00019655172945931554, 0.00013414432760328054, 0.00010983404354192317, 0.00014005668344907463, 0.00013283545558806509, 0.00018775506759993732, 0.00018455991812516004, 0.00022463723144028336, 0.00011840854858746752, 0.00014390920114237815, 0.00011373461893526837, 0.00052266143029555678, 0.00011551262286957353, 8.8945009338203818e-05, 0.0001434700534446165, 0.00029075035126879811, 0.00014754445874132216, 0.00013632776972372085, 0.00055481266463175416, 9.4887342129368335e-05, 0.0001467651454731822, } };
const TfArray<128, int> quant133_zero = { 128, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant133 = { (TfLiteFloatArray*)&quant133_scale, (TfLiteIntArray*)&quant133_zero, 0 };
const TfArray<4, int> tensor_dimension134 = { 4, { 1,4,4,128 } };
const TfArray<1, float> quant134_scale = { 1, { 0.025794303044676781, } };
const TfArray<1, int> quant134_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant134 = { (TfLiteFloatArray*)&quant134_scale, (TfLiteIntArray*)&quant134_zero, 0 };
const TfArray<4, int> tensor_dimension135 = { 4, { 512,1,1,128 } };
const TfArray<512, float> quant135_scale = { 512, { 0.00042074883822351694, 0.0015719763468950987, 0.0016481846105307341, 0.001588921993970871, 0.0011096234666183591, 0.00045861274702474475, 0.0002967467880807817, 0.0009477499988861382, 0.0014147282345220447, 0.00055951945250853896, 0.00025806552730500698, 0.0012560958275571465, 0.00094998435815796256, 0.00097005174029618502, 0.0007989158621057868, 0.00095288013108074665, 0.00031516593298874795, 0.00070890726055949926, 0.00062920257914811373, 0.00085852830670773983, 0.00034831164521165192, 0.00041825708467513323, 0.00040688979788683355, 0.00026409464771859348, 0.00042199317249469459, 0.00042121217120438814, 0.001090891077183187, 0.00082078232662752271, 0.00042346911504864693, 0.00068856572033837438, 0.00030786666320636868, 0.00031805754406377673, 0.0012613045983016491, 0.000521389942150563, 0.00068095687311142683, 0.00020483483967836946, 0.0014178646961227059, 0.00048522005090489984, 0.00086112471763044596, 0.00087767309742048383, 0.00030554801924154162, 0.00069898372748866677, 0.00043587016989476979, 0.0005899062380194664, 0.001270934590138495, 0.0010967705165967345, 0.00068593438481912017, 0.0011564273154363036, 0.00083283102139830589, 0.00026378018083050847, 0.00056112965103238821, 0.00034200923983007669, 0.0006840128917247057, 0.00083294539945200086, 0.00041226448956876993, 0.0013758435379713774, 0.00038811418926343322, 0.0010291527723893523, 0.00028450231184251606, 0.00024365681747440249, 0.00052532082190737128, 0.0009978247107937932, 0.00022196302597876638, 0.00042864310671575367, 0.00081187300384044647, 0.0013861657353118062, 0.00078654184471815825, 0.00097242888296023011, 0.00021900607680436224, 0.0010144958505406976, 0.0013773178216069937, 0.005459928885102272, 0.00063645112095400691, 0.0038221273571252823, 0.00030892228824086487, 0.00030846017762087286, 0.0010180430253967643, 0.00085020391270518303, 0.0014507301384583116, 0.00097530428320169449, 0.00052823021542280912, 0.00051472929771989584, 0.00022717396495863795, 0.00049481308087706566, 0.00053305621258914471, 0.0012898141285404563, 0.00030481701833195984, 0.00070377514930441976, 0.0012570340186357498, 0.00064338860101997852, 0.00058866129256784916, 0.00048931461060419679, 0.00041466212132945657, 0.0010702856816351414, 0.0010845853248611093, 0.00036563491448760033, 0.00036556381382979453, 0.00047207192983478308, 0.0006565229850821197, 0.00073354848427698016, 0.00095364614389836788, 0.00022189709125086665, 0.00026864875690080225, 0.0010438411263749003, 0.00097435800125822425, 0.0011835920158773661, 0.0013718791306018829, 0.00040265297866426408, 0.00033975698170252144, 0.00040790866478346288, 0.0012416993267834187, 0.0010710088536143303, 0.0034618431236594915, 0.00042135120020247996, 0.0010637413943186402, 0.00041521902312524617, 0.00023544786381535232, 0.00043314194772392511, 0.0011038932716473937, 0.0004970983718521893, 0.0002722237550187856, 0.00061421800637617707, 0.00075670669320970774, 0.000209918332984671, 0.00091153883840888739, 0.00056142464745789766, 0.00078245333861559629, 0.00097179989097639918, 0.00075581483542919159, 0.0010739200515672565, 0.00060010183369740844, 0.0010702942963689566, 0.00042368669528514147, 0.0020547877065837383, 0.00096697255503386259, 0.0015620889607816935, 0.00038425179081968963, 0.00033894836087711155, 0.00030429274193011224, 0.006312753539532423, 0.002271376084536314, 0.00090848165564239025, 0.00062039936892688274, 0.0012966040521860123, 0.00034214867628179491, 0.00097636011196300387, 0.0010546172270551324, 0.00082328071584925056, 0.00083241797983646393, 0.00062178954249247909, 0.00030941670411266387, 0.00071054062573239207, 0.00038043473614379764, 0.00040052144322544336, 0.0020458870567381382, 0.00047199203982017934, 0.00040815307875163853, 0.0013282154686748981, 0.00079222040949389338, 0.00076528254430741072, 0.00038531888276338577, 0.00079724594252184033, 0.00061426492175087333, 0.00025024500791914761, 0.00024587882217019796, 0.00027939051506109536, 0.00074372714152559638, 0.00050340796587988734, 0.0013097146293148398, 0.0021299095824360847, 0.0012101134052500129, 0.0015306253917515278, 0.00061983009800314903, 0.00034526863601058722, 0.00036105865729041398, 0.00088528258493170142, 0.0007212634664028883, 0.00074958417098969221, 0.0010799256851896644, 0.0011737262830138206, 0.0013452137354761362, 0.00026858717319555581, 0.00060625735204666853, 0.00075921160168945789, 0.00058169546537101269, 0.00053300050785765052, 0.00054410099983215332, 0.00025502053904347122, 0.0012792885536327958, 0.00047448280383832753, 0.00044967493158765137, 0.0071342950686812401, 0.00027144592604599893, 0.00033493220689706504, 0.00067114387638866901, 0.00028727366589009762, 0.00089188123820349574, 0.0003435870457906276, 0.0012931777164340019, 0.00060621538432314992, 0.00049254548503085971, 0.00029213179368525743, 0.0018333370098844171, 0.00065593881299719214, 0.001691976678557694, 0.00029625921160914004, 0.00042641194886527956, 0.0013360647717490792, 0.00061932636890560389, 0.0071749463677406311, 0.00053606287110596895, 0.00022940908093005419, 0.00098676455672830343, 0.00081942824181169271, 0.0005078496178612113, 0.0012449879432097077, 0.0004875341837760061, 0.00051139254355803132, 0.00069915689527988434, 0.0003273261827416718, 0.00054538191761821508, 0.00062888331012800336, 0.0060412748716771603, 0.00032688345527276397, 0.00057799316709861159, 0.00033546198392286897, 0.00022368608915712684, 0.00032624375307932496, 0.00067778804805129766, 0.0008531907806172967, 0.00094499561237171292, 0.00044477402116172016, 0.000325556262396276, 0.0016957857878878713, 0.00025580605142749846, 0.0019160192459821701, 0.0012513879919424653, 0.0003626145189628005, 0.0007864508661441505, 0.00050188211025670171, 0.0014350410783663392, 0.00086905329953879118, 0.0005110017373226583, 0.00045247314847074449, 0.0021519805304706097, 0.00096152478363364935, 0.00064457562984898686, 0.00083889241795986891, 0.00042959584970958531, 0.0013219423126429319, 0.00082693423610180616, 0.00064025545725598931, 0.00035111547913402319, 0.00056453648721799254, 0.00028969167033210397, 0.00060283869970589876, 0.0010523814707994461, 0.0010839933529496193, 0.0031452979892492294, 0.00026822698418982327, 0.0004427773819770664, 0.001195371150970459, 0.00029662300948984921, 0.00092405296163633466, 0.00050924613606184721, 0.00039411650504916906, 0.00044304889161139727, 0.0002610039955470711, 0.00062167638679966331, 0.0048686512745916843, 0.00090207683388143778, 0.0017486477736383677, 0.00072848779382184148, 0.0003994196595158428, 0.00059665890876203775, 0.0009097283473238349, 0.00087325030472129583, 0.001641259528696537, 0.0016382103785872459, 0.00092887668870389462, 0.00062956835608929396, 0.00033196096774190664, 0.00075012631714344025, 0.00078835460590198636, 0.0010669452603906393, 0.00089672545436769724, 0.00076892913784831762, 0.00028881905018351972, 0.00054356612963601947, 0.00021445353922899812, 0.00035625073360279202, 0.00080756173701956868, 0.00030665434314869344, 0.001006352948024869, 0.00082606368232518435, 0.00045249858521856368, 0.00028320052661001682, 0.0008317531319335103, 0.00053060124628245831, 0.00069386977702379227, 0.000874246412422508, 0.00044267898192629218, 0.00025247590383514762, 0.0097878482192754745, 0.0014177936827763915, 0.0015443286392837763, 0.00052789767505601048, 0.00085868657333776355, 0.0014789425767958164, 0.00029845090466551483, 0.00077424017945304513, 0.0007896596216596663, 0.00048467126907780766, 0.00030483477166853845, 0.0003988675307482481, 0.0015230964636430144, 0.00041825542575679719, 0.00073938624700531363, 0.0007537787314504385, 0.00074434222187846899, 0.00090071506565436721, 0.00089268380543217063, 0.0014907282311469316, 0.00041792777483351529, 0.00090263085439801216, 0.0010043289512395859, 0.001131843775510788, 0.0045734015293419361, 0.00175249925814569, 0.00051784724928438663, 0.00047684766468591988, 0.00066793500445783138, 0.0003789432521443814, 0.00068940653000026941, 0.00051001535030081868, 0.00076656771125271916, 0.00088654609862715006, 0.00032917881617322564, 0.00048244622303172946, 0.00062246067682281137, 0.0033622297924011946, 0.00062338344287127256, 0.00029482276295311749, 0.00081835099263116717, 0.00037298092502169311, 0.00077437650179490447, 0.00022666102449875325, 0.0023439002688974142, 0.0002513557265046984, 0.0009061997989192605, 0.00097273424034938216, 0.00079221377382054925, 0.0026909334119409323, 0.0007846031803637743, 0.00027829510509036481, 0.00061332056066021323, 0.00037722048000432551, 0.00053606071742251515, 0.001286222948692739, 0.0003090481914114207, 0.00093091279268264771, 0.00065173982875421643, 0.00026187722687609494, 0.00074385001789778471, 0.00099709839560091496, 0.00046621172805316746, 0.00054569484200328588, 0.0025739814154803753, 0.00051466136937960982, 0.0018018472474068403, 0.00060127227334305644, 0.00048196528223343194, 0.00051417900249361992, 0.00023767701350152493, 0.0002389500878052786, 0.00035255376133136451, 0.00040015214472077787, 0.0011186307528987527, 0.0033117551356554031, 0.0018875019159168005, 0.0021049240604043007, 0.0009691842133179307, 0.00086091551929712296, 0.00057755562011152506, 0.0011845071567222476, 0.000944217958021909, 0.00077699765097349882, 0.00097481789998710155, 0.00073528452776372433, 0.0020176530815660954, 0.00032299209851771593, 0.000154481953359209, 0.00068435061257332563, 0.00089432613458484411, 0.0009547232766635716, 0.0010592237813398242, 0.00067634228616952896, 0.0011709587415680289, 0.00035414504236541688, 0.00034664434497244656, 0.0010055863531306386, 0.00023458637588191777, 0.0037252004258334637, 0.00058534042909741402, 0.004352180752903223, 0.00083572801668196917, 0.00092155125457793474, 0.00041492449236102402, 0.00057416461640968919, 0.0013308435445651412, 0.001027991995215416, 0.00067850644700229168, 0.00021053160890005529, 0.00082414684584364295, 0.00063508708262816072, 0.00078277487773448229, 0.001262679579667747, 0.0010508308187127113, 0.00044030052958987653, 0.00070294830948114395, 0.00050245557213202119, 0.00030377725488506258, 0.00070301577216014266, 0.0012572065461426973, 0.0010621320689097047, 0.00091150077059864998, 0.0014829252613708377, 0.00068165973061695695, 0.00059874489670619369, 0.00035914496402256191, 0.0014705260982736945, 0.00093326950445771217, 0.00089337106328457594, 0.0013493336737155914, 0.00044924940448254347, 0.00049579556798562407, 0.0013502622023224831, 0.00051514338701963425, 0.0003996604064013809, 0.00024203081557061523, 0.00067563389893621206, 0.0016664376016706228, 0.00068732607178390026, 0.00049884227337315679, 0.0010213031200692058, 0.00040239625377580523, 0.00052670238073915243, 0.00048580343718640506, 0.00083251105388626456, 0.00031618520733900368, 0.0020596184767782688, 0.0010223230347037315, 0.0011555337114259601, 0.00029834458837285638, 0.00054515228839591146, 0.00078346353257074952, 0.00053398747695609927, 0.00063738209428265691, 0.00028969941195100546, 0.0011259698076173663, 0.00064713688334450126, 0.00065575388725847006, 0.0011178638087585568, 0.00034517195308580995, 0.00090402824571356177, 0.00065960694337263703, 0.00051935447845607996, 0.00095446419436484575, 0.0017869978910312057, 0.0010693975491449237, 0.00024822776322253048, 0.00052176316967234015, 0.00050842697964981198, 0.0003733508347067982, 0.001718303537927568, 0.00045663135824725032, 0.00069348159013316035, 0.0005440758541226387, 0.0010800639865919948, 0.0001971640158444643, 0.0014411576557904482, 0.00067423144355416298, 0.00079160742461681366, 0.0002879690146073699, 0.00032401666976511478, 0.00071031268453225493, 0.00071327487239614129, 0.00064317137002944946, 0.00138539366889745, 0.00063201284501701593, 0.00052630470599979162, 0.00070349645102396607, 0.00019832946418318897, 0.0007262222352437675, 0.00069340656045824289, 0.00098538631573319435, 0.0010927157709375024, 0.00036174216074869037, 0.0018033540109172463, 0.00084148946916684508, 0.0011396607151255012, 0.00084612361388280988, 0.00078765721991658211, 0.00024113171093631536, 0.0012517709983512759, 0.00042334260069765151, 0.0015325042186304927, 0.0004906704998575151, 0.0010706970933824778, 0.00045620932360179722, 0.001025593257509172, 0.0010861883638426661, } };
const TfArray<512, int> quant135_zero = { 512, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant135 = { (TfLiteFloatArray*)&quant135_scale, (TfLiteIntArray*)&quant135_zero, 0 };
const TfArray<1, int> tensor_dimension136 = { 1, { 512 } };
const TfArray<512, float> quant136_scale = { 512, { 1.0852922969206702e-05, 4.0548035030951723e-05, 4.2513773223618045e-05, 4.0985134546644986e-05, 2.8621963792829774e-05, 1.1829596587631386e-05, 7.6543765317182988e-06, 2.444655001454521e-05, 3.6491928767645732e-05, 1.4432413991016801e-05, 6.6566203713591676e-06, 3.2400115742348135e-05, 2.450418469379656e-05, 2.5021809051395394e-05, 2.0607478290912695e-05, 2.4578879674663767e-05, 8.1294856499880552e-06, 1.828576932894066e-05, 1.6229842003667727e-05, 2.2145139155327342e-05, 8.9844561443896964e-06, 1.0788649888127111e-05, 1.0495438800717238e-05, 6.8121375988994259e-06, 1.088501994672697e-05, 1.08648746390827e-05, 2.8138774723629467e-05, 2.1171508706174791e-05, 1.0923090485448483e-05, 1.776107274054084e-05, 7.9412056948058307e-06, 8.2040724009857513e-06, 3.2534473575651646e-05, 1.3448890058498364e-05, 1.7564807421877049e-05, 5.2835721362498589e-06, 3.6572830140357837e-05, 1.251591311302036e-05, 2.2212112526176497e-05, 2.2638965674559586e-05, 7.8813982327119447e-06, 1.802979750209488e-05, 1.1242967048019636e-05, 1.5216220162983518e-05, 3.2782871130621061e-05, 2.8290431146160699e-05, 1.769319896993693e-05, 2.9829236154910177e-05, 2.1482295778696425e-05, 6.8040258156543132e-06, 1.4473947885562666e-05, 8.8218903329106979e-06, 1.7643635146669112e-05, 2.1485246179508977e-05, 1.0634074897097889e-05, 3.5488923458615318e-05, 1.0011134691012558e-05, 2.6546278604655527e-05, 7.3385390351177193e-06, 6.2849576352164149e-06, 1.3550284165830817e-05, 2.573819256213028e-05, 5.7253814702562522e-06, 1.1056549737986643e-05, 2.0941697584930807e-05, 3.5755179851548746e-05, 2.02882984012831e-05, 2.5083125365199521e-05, 5.64910897082882e-06, 2.6168212571064942e-05, 3.5526954889064655e-05, 0.00014083506539463997, 1.6416812286479399e-05, 9.8589109256863594e-05, 7.9684350566822104e-06, 7.9565152191207744e-06, 2.6259709557052702e-05, 2.1930416551185772e-05, 3.7420573789859191e-05, 2.5157294658129103e-05, 1.3625330211652908e-05, 1.3277083780849352e-05, 5.8597938732418697e-06, 1.2763358427037019e-05, 1.3749813660979271e-05, 3.3269858249695972e-05, 7.8625425885547884e-06, 1.8153388737118803e-05, 3.2424315577372909e-05, 1.6595760826021433e-05, 1.518410772405332e-05, 1.2621529094758444e-05, 1.0695920536818448e-05, 2.7607273295870982e-05, 2.79761225101538e-05, 9.4312981673283502e-06, 9.4294637165148742e-06, 1.2176766176708043e-05, 1.6934553059400059e-05, 1.8921371520264074e-05, 2.4598637537565082e-05, 5.7236807151639368e-06, 6.9296074798330665e-06, 2.6925154088530689e-05, 2.5132885639322922e-05, 3.0529932701028883e-05, 3.5386667150305584e-05, 1.0386153007857502e-05, 8.7637945398455486e-06, 1.0521719559619669e-05, 3.2028769055614248e-05, 2.7625927032204345e-05, 8.92958341864869e-05, 1.0868460776691791e-05, 2.743846744124312e-05, 1.071028509613825e-05, 6.0732136262231506e-06, 1.1172594895469956e-05, 2.8474158170865849e-05, 1.282230641663773e-05, 7.0218220571405254e-06, 1.5843324945308268e-05, 1.9518722183420323e-05, 5.4146971706359182e-06, 2.3512509869760834e-05, 1.44815576277324e-05, 2.0182838852633722e-05, 2.5066899979719892e-05, 1.9495717424433678e-05, 2.7701018552761525e-05, 1.5479208741453476e-05, 2.7607495212578215e-05, 1.0928702977253124e-05, 5.3001815103925765e-05, 2.4942382879089564e-05, 4.0292994526680559e-05, 9.9115068223909475e-06, 8.74293709784979e-06, 7.8490193118341267e-06, 0.00016283307923004031, 5.8588564570527524e-05, 2.343365122214891e-05, 1.600276846147608e-05, 3.3444997825426981e-05, 8.8254864749615081e-06, 2.5184528567478992e-05, 2.7203115678275935e-05, 2.1235951862763613e-05, 2.1471641957759857e-05, 1.6038628018577583e-05, 7.9811879913904704e-06, 1.8327900761505589e-05, 9.8130485639558174e-06, 1.0331171324651223e-05, 5.2772229537367821e-05, 1.2174705261713825e-05, 1.0528024176892359e-05, 3.4260392567375675e-05, 2.043477252300363e-05, 1.9739929484785534e-05, 9.9390317700454034e-06, 2.0564402802847326e-05, 1.584453639225103e-05, 6.4548953560006339e-06, 6.3422726270800922e-06, 7.2066836764861364e-06, 1.918392263178248e-05, 1.298505776503589e-05, 3.3783177059376612e-05, 5.4939533583819866e-05, 3.1214032787829638e-05, 3.9481416024500504e-05, 1.5988085579010658e-05, 8.9059640231425874e-06, 9.3132566689746454e-06, 2.2835247364128008e-05, 1.8604489014251158e-05, 1.9335000615683384e-05, 2.7855930966325104e-05, 3.0275450626504607e-05, 3.4698849049163982e-05, 6.92801904733642e-06, 1.5637986507499591e-05, 1.9583334506023675e-05, 1.5004428860265762e-05, 1.374837665935047e-05, 1.4034706509846728e-05, 6.5780768636614084e-06, 3.2998355891322717e-05, 1.2238952876941767e-05, 1.1599051504163072e-05, 0.00018402417481411248, 7.0017586040194146e-06, 8.6393429228337482e-06, 1.7311687770416029e-05, 7.4100239544350188e-06, 2.3005455659586005e-05, 8.8625884018256329e-06, 3.3356616768287495e-05, 1.5636904208804481e-05, 1.27048679132713e-05, 7.5353359534346964e-06, 4.7289649955928326e-05, 1.6919484551181085e-05, 4.3643358367262408e-05, 7.6418000389821827e-06, 1.0998998732247856e-05, 3.4462860639905557e-05, 1.597509253770113e-05, 0.00018507274216972291, 1.3827368093188852e-05, 5.9174471971346065e-06, 2.5452904083067551e-05, 2.1136580471647903e-05, 1.3099626812618226e-05, 3.2113595807459205e-05, 1.257560415979242e-05, 1.3191014659241773e-05, 1.8034264940069988e-05, 8.4431503637460992e-06, 1.4067746633372735e-05, 1.6221607438637875e-05, 0.00015583047934342176, 8.4317307482706383e-06, 1.4908931007084902e-05, 8.6530080807278864e-06, 5.7698266573424917e-06, 8.4152297858963721e-06, 1.7483071133028716e-05, 2.200746166636236e-05, 2.4375503926421516e-05, 1.1472636288090143e-05, 8.3974964582012035e-06, 4.3741612898884341e-05, 6.5983385866275057e-06, 4.9422382289776579e-05, 3.2278680009767413e-05, 9.3533890321850777e-06, 2.0285951904952526e-05, 1.2945699381816667e-05, 3.7015885027358308e-05, 2.2416623323806562e-05, 1.3180933819967322e-05, 1.1671229913190473e-05, 5.5508837249362841e-05, 2.480186230968684e-05, 1.662637987465132e-05, 2.1638645193888806e-05, 1.1081125194323249e-05, 3.4098578908015043e-05, 2.1330191884771921e-05, 1.651494312682189e-05, 9.0567791630746797e-06, 1.456182508263737e-05, 7.4723948273458518e-06, 1.5549803720205091e-05, 2.7145446438225918e-05, 2.7960853913100436e-05, 8.1130769103765488e-05, 6.9187281042104587e-06, 1.1421134331612848e-05, 3.0833765777060762e-05, 7.6511842053150758e-06, 2.3835302272345871e-05, 1.3135649169271346e-05, 1.0165960702579468e-05, 1.1428137440816499e-05, 6.7324162955628708e-06, 1.6035708540584892e-05, 0.00012558346497826278, 2.3268443328561261e-05, 4.5105149183655158e-05, 1.8790835383697413e-05, 1.0302751434210222e-05, 1.5390400221804157e-05, 2.3465809135814197e-05, 2.2524882297147997e-05, 4.2335144826211035e-05, 4.225649536238052e-05, 2.3959726604516618e-05, 1.6239277101703919e-05, 8.562701623304747e-06, 1.9348985006217845e-05, 2.033505734289065e-05, 2.7521109586814418e-05, 2.313040749868378e-05, 1.9833991245832294e-05, 7.4498861977190245e-06, 1.4020909475220833e-05, 5.5316795624094084e-06, 9.1892397904302925e-06, 2.0830491848755628e-05, 7.9099354479694739e-06, 2.5958172045648098e-05, 2.1307736460585147e-05, 1.1671885658870451e-05, 7.3049600359809119e-06, 2.1454492525663227e-05, 1.3686489182873629e-05, 1.7897888028528541e-05, 2.2550577341462485e-05, 1.14185959319002e-05, 6.5124399952765089e-06, 0.00025247072335332632, 3.657100023701787e-05, 3.9834882045397535e-05, 1.3616752767120488e-05, 2.2149220967548899e-05, 3.8148293242556974e-05, 7.6983333201496862e-06, 1.9970986613770947e-05, 2.036871956079267e-05, 1.2501757737481967e-05, 7.8630000643897802e-06, 1.028850965667516e-05, 3.9287213439820334e-05, 1.0788607141876128e-05, 1.9071952920057811e-05, 1.9443197743385099e-05, 1.919978967634961e-05, 2.3233316824189387e-05, 2.3026155758998357e-05, 3.8452297303592786e-05, 1.0780156117107254e-05, 2.3282733309315518e-05, 2.5905965230776928e-05, 2.9195121896918863e-05, 0.00011796770559158176, 4.5204498746898025e-05, 1.3357508578337729e-05, 1.2299953596084379e-05, 1.7228918295586482e-05, 9.7745769380708225e-06, 1.7782760551199317e-05, 1.3155490705685224e-05, 1.9773080566665158e-05, 2.286783819727134e-05, 8.4909379438613541e-06, 1.2444364074326586e-05, 1.6055939340731129e-05, 8.6726373410783708e-05, 1.6079740817076527e-05, 7.6047476795793045e-06, 2.1108793589519337e-05, 9.6207832029904239e-06, 1.9974502720288001e-05, 5.8465629990678281e-06, 6.0459275118773803e-05, 6.4835458033485338e-06, 2.3374792363028973e-05, 2.5091001589316875e-05, 2.0434601537999697e-05, 6.941075116628781e-05, 2.0238292563590221e-05, 7.1784284045861568e-06, 1.5820176486158744e-05, 9.7301390269421972e-06, 1.3827312614012044e-05, 3.3177224395330995e-05, 7.9716828622622415e-06, 2.4012246285565197e-05, 1.6811174646136351e-05, 6.7549403865996283e-06, 1.918709313031286e-05, 2.5719458790263161e-05, 1.2025606338283978e-05, 1.407581839885097e-05, 6.6394059103913605e-05, 1.3275331184559036e-05, 4.6477394789690152e-05, 1.5509398508584127e-05, 1.2431958566594403e-05, 1.3262889297038782e-05, 6.1307127907639369e-06, 6.1635510064661503e-06, 9.0938783614546992e-06, 1.0321645277144853e-05, 2.8854301490355283e-05, 8.5424413555301726e-05, 4.8686797526897863e-05, 5.4295047448249534e-05, 2.4999431843752973e-05, 2.2206715584616177e-05, 1.4897645087330602e-05, 3.0553535907529294e-05, 2.4355444111279212e-05, 2.0042112737428397e-05, 2.5144749088212848e-05, 1.8966151401400566e-05, 5.2043953473912552e-05, 8.3313561844988726e-06, 3.9847541302151512e-06, 1.7652346286922693e-05, 2.306852002220694e-05, 2.4626420781714842e-05, 2.7321939342073165e-05, 1.7445778212277219e-05, 3.020406438736245e-05, 9.1349247668404132e-06, 8.94144886842696e-06, 2.5938399630831555e-05, 6.0509919421747327e-06, 9.6088951977435499e-05, 1.509844878455624e-05, 0.00011226147034903988, 2.1557021682383493e-05, 2.3770771804265678e-05, 1.0702688086894341e-05, 1.4810176253376994e-05, 3.4328182664467022e-05, 2.6516336220083758e-05, 1.7501601178082637e-05, 5.4305160119838547e-06, 2.1258292690617964e-05, 1.6381629393436015e-05, 2.0191131625324488e-05, 3.2569940231041983e-05, 2.7105448680231348e-05, 1.1357245057297405e-05, 1.8132061086362228e-05, 1.2960491403646301e-05, 7.8357224992942065e-06, 1.8133801859221421e-05, 3.2428764825453982e-05, 2.73969562840648e-05, 2.3511527615482919e-05, 3.825102248811163e-05, 1.758293728926219e-05, 1.5444207747350447e-05, 9.2638938440359198e-06, 3.7931196857243776e-05, 2.40730369114317e-05, 2.3043883629725315e-05, 3.4805121686076745e-05, 1.1588075722102076e-05, 1.2788701496901922e-05, 3.4829074138542637e-05, 1.3287764886626974e-05, 1.0308961464033928e-05, 6.2430162870441563e-06, 1.7427504644729197e-05, 4.2984596802853048e-05, 1.7729096725815907e-05, 1.2867289115092717e-05, 2.6343801437178627e-05, 1.0379530976933893e-05, 1.3585920896730386e-05, 1.2530960702861194e-05, 2.1474043023772538e-05, 8.155777322826907e-06, 5.312642315402627e-05, 2.637010948092211e-05, 2.9806185921188444e-05, 7.695590284129139e-06, 1.4061823094380088e-05, 2.0208895875839517e-05, 1.3773835235042498e-05, 1.6440826584585011e-05, 7.472594461432891e-06, 2.9043605536571704e-05, 1.6692445569788106e-05, 1.6914715160964988e-05, 2.8834518161602318e-05, 8.903470188670326e-06, 2.3318778403336182e-05, 1.7014101103995927e-05, 1.3396386748354416e-05, 2.4619737814646214e-05, 4.6094366553006694e-05, 2.7584364943322726e-05, 6.4028622546175029e-06, 1.345851705991663e-05, 1.3114519788359758e-05, 9.6303247119067237e-06, 4.4322441681288183e-05, 1.1778487532865256e-05, 1.7887874491862021e-05, 1.4034057130629662e-05, 2.7859498004545458e-05, 5.0857083806477021e-06, 3.7173656892264262e-05, 1.7391330402460881e-05, 2.041896186710801e-05, 7.4279600994486827e-06, 8.3577842815429904e-06, 1.8322019968763925e-05, 1.8398428437649272e-05, 1.6590156519669108e-05, 3.5735265555558726e-05, 1.6302330550388433e-05, 1.3575662705989089e-05, 1.814620009099599e-05, 5.1157703637727536e-06, 1.8732396711129695e-05, 1.7885939087136649e-05, 2.5417353754164651e-05, 2.8185841074446216e-05, 9.3308872237685136e-06, 4.6516259317286313e-05, 2.1705634935642593e-05, 2.9396753234323114e-05, 2.1825168005307205e-05, 2.0317069356678985e-05, 6.2198246268962976e-06, 3.2288560760207474e-05, 1.0919827218458522e-05, 3.9529877540189773e-05, 1.2656503713515121e-05, 2.7617885280051269e-05, 1.1767601790779736e-05, 2.6454463295522146e-05, 2.8017471777275205e-05, } };
const TfArray<512, int> quant136_zero = { 512, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant136 = { (TfLiteFloatArray*)&quant136_scale, (TfLiteIntArray*)&quant136_zero, 0 };
const TfArray<4, int> tensor_dimension137 = { 4, { 1,4,4,512 } };
const TfArray<1, float> quant137_scale = { 1, { 0.0072805462405085564, } };
const TfArray<1, int> quant137_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant137 = { (TfLiteFloatArray*)&quant137_scale, (TfLiteIntArray*)&quant137_zero, 0 };
const TfArray<2, int> tensor_dimension138 = { 2, { 1,512 } };
const TfArray<1, float> quant138_scale = { 1, { 0.0020398816559463739, } };
const TfArray<1, int> quant138_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant138 = { (TfLiteFloatArray*)&quant138_scale, (TfLiteIntArray*)&quant138_zero, 0 };
const ALIGN(8) int32_t tensor_data139[16] = { 
    2463, -275, -36946, -39328, -2709, -288, -38810, -40142, -2723, -1895, 
    -36878, -39427, 2440, -1914, -37719, -40739, 
};
const TfArray<1, int> tensor_dimension139 = { 1, { 16 } };
const TfArray<1, float> quant139_scale = { 1, { 6.3605606555938721e-05, } };
const TfArray<1, int> quant139_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant139 = { (TfLiteFloatArray*)&quant139_scale, (TfLiteIntArray*)&quant139_zero, 0 };
const TfArray<4, int> tensor_dimension140 = { 4, { 1,1,1,512 } };
const TfArray<1, float> quant140_scale = { 1, { 0.0020398816559463739, } };
const TfArray<1, int> quant140_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant140 = { (TfLiteFloatArray*)&quant140_scale, (TfLiteIntArray*)&quant140_zero, 0 };
const TfArray<4, int> tensor_dimension141 = { 4, { 16,1,1,512 } };
const TfArray<1, float> quant141_scale = { 1, { 0.031181026250123978, } };
const TfArray<1, int> quant141_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant141 = { (TfLiteFloatArray*)&quant141_scale, (TfLiteIntArray*)&quant141_zero, 0 };
const TfArray<4, int> tensor_dimension142 = { 4, { 1,1,1,16 } };
const TfArray<1, float> quant142_scale = { 1, { 0.01509589608758688, } };
const TfArray<1, int> quant142_zero = { 1, { 101 } };
const TfLiteAffineQuantization quant142 = { (TfLiteFloatArray*)&quant142_scale, (TfLiteIntArray*)&quant142_zero, 0 };
const TfArray<2, int> tensor_dimension143 = { 2, { 1,16 } };
const TfArray<1, float> quant143_scale = { 1, { 0.01509589608758688, } };
const TfArray<1, int> quant143_zero = { 1, { 101 } };
const TfLiteAffineQuantization quant143 = { (TfLiteFloatArray*)&quant143_scale, (TfLiteIntArray*)&quant143_zero, 0 };
const TfArray<1, int> tensor_dimension144 = { 1, { 2 } };
const int tensor_dimension145 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> tensor_dimension146 = { 1, { 3 } };
const TfArray<3, int> tensor_dimension147 = { 3, { 1,4,4 } };
const TfArray<1, float> quant147_scale = { 1, { 0.01509589608758688, } };
const TfArray<1, int> quant147_zero = { 1, { 101 } };
const TfLiteAffineQuantization quant147 = { (TfLiteFloatArray*)&quant147_scale, (TfLiteIntArray*)&quant147_zero, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 8 } };
uint8_t ALIGN(4) opdata1[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 112, 92, 4, 0, 64, 5, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs1 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs1 = { 1, { 9 } };
uint8_t ALIGN(4) opdata2[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 92, 4, 0, 112, 0, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs2 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs2 = { 1, { 10 } };
uint8_t ALIGN(4) opdata3[175] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 128, 0, 0, 0, 3, 0, 0, 0, 128, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 244, 1, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 97, 103, 103, 112, 0, 8, 24, 0, 0, 0, 36, 0, 0, 0, 0, 111, 116, 112, 0, 8, 24, 0, 0, 0, 3, 0, 254, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 1, 34, 20, 6, 79, 43, 153, 151, 68, 55, 6, 1, 6, 82, 13, 2, 156, 72, 96, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs3 = { 3, { 8,9,10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
uint8_t ALIGN(4) opdata4[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 208, 90, 4, 0, 48, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs4 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs4 = { 1, { 12 } };
uint8_t ALIGN(4) opdata5[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 96, 90, 4, 0, 112, 0, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs5 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs5 = { 1, { 13 } };
uint8_t ALIGN(4) opdata6[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 64, 0, 0, 0, 3, 0, 0, 0, 64, 0, 0, 0, 24, 0, 0, 0, 1, 0, 0, 0, 184, 5, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 6, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 24, 0, 0, 0, 2, 0, 252, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs6 = { 3, { 11,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 14 } };
uint8_t ALIGN(4) opdata7[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 224, 86, 4, 0, 128, 3, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs7 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs7 = { 1, { 15 } };
uint8_t ALIGN(4) opdata8[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 112, 86, 4, 0, 112, 0, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs8 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs8 = { 1, { 16 } };
uint8_t ALIGN(4) opdata9[143] = { 107, 116, 0, 109, 112, 0, 32, 0, 3, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 248, 255, 255, 255, 232, 2, 0, 0, 0, 97, 103, 103, 112, 0, 8, 24, 0, 0, 0, 24, 0, 0, 0, 0, 111, 116, 112, 0, 8, 24, 0, 0, 0, 2, 0, 252, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 1, 34, 20, 6, 79, 43, 121, 119, 68, 55, 6, 1, 6, 82, 13, 1, 124, 72, 64, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs9 = { 3, { 14,15,16 } };
const TfArray<1, int> outputs9 = { 1, { 17 } };
uint8_t ALIGN(4) opdata10[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 64, 85, 4, 0, 48, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs10 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs10 = { 1, { 18 } };
uint8_t ALIGN(4) opdata11[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 208, 84, 4, 0, 112, 0, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs11 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs11 = { 1, { 19 } };
uint8_t ALIGN(4) opdata12[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 32, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 24, 0, 0, 0, 1, 0, 0, 0, 184, 2, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 3, 0, 0, 24, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 24, 0, 0, 0, 1, 0, 254, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs12 = { 3, { 17,18,19 } };
const TfArray<1, int> outputs12 = { 1, { 20 } };
uint8_t ALIGN(4) opdata13[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 80, 81, 4, 0, 128, 3, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs13 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs13 = { 1, { 21 } };
uint8_t ALIGN(4) opdata14[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 224, 80, 4, 0, 112, 0, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs14 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs14 = { 1, { 22 } };
uint8_t ALIGN(4) opdata15[143] = { 107, 116, 0, 109, 112, 0, 32, 0, 3, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 248, 255, 255, 255, 232, 2, 0, 0, 0, 97, 103, 103, 112, 0, 8, 24, 0, 0, 0, 24, 0, 0, 0, 0, 111, 116, 112, 0, 8, 24, 0, 0, 0, 2, 0, 253, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 1, 34, 20, 6, 79, 43, 121, 119, 68, 55, 6, 1, 6, 82, 13, 1, 124, 72, 64, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs15 = { 3, { 20,21,22 } };
const TfArray<1, int> outputs15 = { 1, { 23 } };
uint8_t ALIGN(4) opdata16[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 176, 79, 4, 0, 48, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs16 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs16 = { 1, { 24 } };
uint8_t ALIGN(4) opdata17[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 64, 79, 4, 0, 112, 0, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs17 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs17 = { 1, { 25 } };
uint8_t ALIGN(4) opdata18[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 32, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 24, 0, 0, 0, 1, 0, 0, 0, 184, 2, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 3, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 24, 0, 0, 0, 2, 0, 253, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs18 = { 3, { 23,24,25 } };
const TfArray<1, int> outputs18 = { 1, { 26 } };
uint8_t ALIGN(4) opdata19[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 192, 72, 4, 0, 128, 6, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs19 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs19 = { 1, { 27 } };
uint8_t ALIGN(4) opdata20[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 192, 71, 4, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs20 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs20 = { 1, { 28 } };
uint8_t ALIGN(4) opdata21[143] = { 107, 116, 0, 109, 112, 0, 32, 128, 1, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 248, 255, 255, 255, 104, 1, 0, 0, 0, 97, 103, 103, 112, 0, 8, 64, 0, 0, 0, 24, 0, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 2, 0, 253, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 79, 43, 121, 119, 68, 55, 6, 1, 6, 82, 13, 1, 124, 72, 64, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs21 = { 3, { 26,27,28 } };
const TfArray<1, int> outputs21 = { 1, { 29 } };
uint8_t ALIGN(4) opdata22[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 112, 69, 4, 0, 80, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs22 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs22 = { 1, { 30 } };
uint8_t ALIGN(4) opdata23[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 112, 68, 4, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs23 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs23 = { 1, { 31 } };
uint8_t ALIGN(4) opdata24[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 16, 0, 0, 0, 3, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 64, 3, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 4, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 2, 0, 253, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs24 = { 3, { 29,30,31 } };
const TfArray<1, int> outputs24 = { 1, { 32 } };
uint8_t ALIGN(4) opdata25[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 112, 52, 4, 0, 0, 16, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs25 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs25 = { 1, { 33 } };
uint8_t ALIGN(4) opdata26[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 112, 51, 4, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs26 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs26 = { 1, { 34 } };
uint8_t ALIGN(4) opdata27[135] = { 107, 116, 0, 109, 112, 0, 8, 0, 4, 0, 0, 64, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 192, 3, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 3, 0, 253, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 95, 43, 113, 111, 68, 55, 6, 1, 6, 98, 13, 0, 116, 72, 0, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs27 = { 3, { 32,33,34 } };
const TfArray<1, int> outputs27 = { 1, { 35 } };
uint8_t ALIGN(4) opdata28[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 32, 49, 4, 0, 80, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs28 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs28 = { 1, { 36 } };
uint8_t ALIGN(4) opdata29[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 32, 48, 4, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs29 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs29 = { 1, { 37 } };
uint8_t ALIGN(4) opdata30[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 16, 0, 0, 0, 3, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 64, 3, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 4, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 2, 0, 252, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs30 = { 3, { 35,36,37 } };
const TfArray<1, int> outputs30 = { 1, { 38 } };
uint8_t ALIGN(4) opdata31[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 32, 32, 4, 0, 0, 16, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs31 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs31 = { 1, { 39 } };
uint8_t ALIGN(4) opdata32[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 32, 31, 4, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs32 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs32 = { 1, { 40 } };
uint8_t ALIGN(4) opdata33[135] = { 107, 116, 0, 109, 112, 0, 8, 0, 4, 0, 0, 64, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 192, 3, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 3, 0, 252, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 95, 43, 113, 111, 68, 55, 6, 1, 6, 98, 13, 0, 116, 72, 0, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs33 = { 3, { 38,39,40 } };
const TfArray<1, int> outputs33 = { 1, { 41 } };
uint8_t ALIGN(4) opdata34[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 208, 28, 4, 0, 80, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs34 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs34 = { 1, { 42 } };
uint8_t ALIGN(4) opdata35[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 208, 27, 4, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs35 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs35 = { 1, { 43 } };
uint8_t ALIGN(4) opdata36[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 16, 0, 0, 0, 3, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 64, 3, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 4, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 2, 0, 253, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs36 = { 3, { 41,42,43 } };
const TfArray<1, int> outputs36 = { 1, { 44 } };
uint8_t ALIGN(4) opdata37[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 208, 11, 4, 0, 0, 16, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs37 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs37 = { 1, { 45 } };
uint8_t ALIGN(4) opdata38[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 208, 10, 4, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs38 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs38 = { 1, { 46 } };
uint8_t ALIGN(4) opdata39[135] = { 107, 116, 0, 109, 112, 0, 8, 0, 4, 0, 0, 64, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 192, 3, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 3, 0, 252, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 95, 43, 113, 111, 68, 55, 6, 1, 6, 98, 13, 0, 116, 72, 0, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs39 = { 3, { 44,45,46 } };
const TfArray<1, int> outputs39 = { 1, { 47 } };
uint8_t ALIGN(4) opdata40[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 128, 8, 4, 0, 80, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs40 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs40 = { 1, { 48 } };
uint8_t ALIGN(4) opdata41[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 128, 7, 4, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs41 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs41 = { 1, { 49 } };
uint8_t ALIGN(4) opdata42[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 16, 0, 0, 0, 3, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 64, 3, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 4, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 2, 0, 253, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs42 = { 3, { 47,48,49 } };
const TfArray<1, int> outputs42 = { 1, { 50 } };
uint8_t ALIGN(4) opdata43[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 128, 247, 3, 0, 0, 16, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs43 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs43 = { 1, { 51 } };
uint8_t ALIGN(4) opdata44[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 128, 246, 3, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs44 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs44 = { 1, { 52 } };
uint8_t ALIGN(4) opdata45[135] = { 107, 116, 0, 109, 112, 0, 8, 0, 4, 0, 0, 64, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 192, 3, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 3, 0, 252, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 95, 43, 113, 111, 68, 55, 6, 1, 6, 98, 13, 0, 116, 72, 0, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs45 = { 3, { 50,51,52 } };
const TfArray<1, int> outputs45 = { 1, { 53 } };
uint8_t ALIGN(4) opdata46[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 48, 244, 3, 0, 80, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs46 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs46 = { 1, { 54 } };
uint8_t ALIGN(4) opdata47[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 48, 243, 3, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs47 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs47 = { 1, { 55 } };
uint8_t ALIGN(4) opdata48[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 16, 0, 0, 0, 3, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 64, 3, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 4, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 2, 0, 253, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs48 = { 3, { 53,54,55 } };
const TfArray<1, int> outputs48 = { 1, { 56 } };
uint8_t ALIGN(4) opdata49[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 48, 227, 3, 0, 0, 16, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs49 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs49 = { 1, { 57 } };
uint8_t ALIGN(4) opdata50[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 48, 226, 3, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs50 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs50 = { 1, { 58 } };
const TfLiteConvParams opdata51 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs51 = { 3, { 56,57,58 } };
const TfArray<1, int> outputs51 = { 1, { 59 } };
uint8_t ALIGN(4) opdata52[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 224, 223, 3, 0, 80, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs52 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs52 = { 1, { 60 } };
uint8_t ALIGN(4) opdata53[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 224, 222, 3, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs53 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs53 = { 1, { 61 } };
uint8_t ALIGN(4) opdata54[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 16, 0, 0, 0, 3, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 64, 3, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 4, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 2, 0, 253, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs54 = { 3, { 59,60,61 } };
const TfArray<1, int> outputs54 = { 1, { 62 } };
uint8_t ALIGN(4) opdata55[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 224, 206, 3, 0, 0, 16, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs55 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs55 = { 1, { 63 } };
uint8_t ALIGN(4) opdata56[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 224, 205, 3, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs56 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs56 = { 1, { 64 } };
uint8_t ALIGN(4) opdata57[135] = { 107, 116, 0, 109, 112, 0, 8, 0, 4, 0, 0, 64, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 192, 3, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 3, 0, 252, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 95, 43, 113, 111, 68, 55, 6, 1, 6, 98, 13, 0, 116, 72, 0, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs57 = { 3, { 62,63,64 } };
const TfArray<1, int> outputs57 = { 1, { 65 } };
uint8_t ALIGN(4) opdata58[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 144, 203, 3, 0, 80, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs58 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs58 = { 1, { 66 } };
uint8_t ALIGN(4) opdata59[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 144, 202, 3, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs59 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs59 = { 1, { 67 } };
uint8_t ALIGN(4) opdata60[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 16, 0, 0, 0, 3, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 64, 3, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 4, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 2, 0, 253, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs60 = { 3, { 65,66,67 } };
const TfArray<1, int> outputs60 = { 1, { 68 } };
uint8_t ALIGN(4) opdata61[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 144, 186, 3, 0, 0, 16, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs61 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs61 = { 1, { 69 } };
uint8_t ALIGN(4) opdata62[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 144, 185, 3, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs62 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs62 = { 1, { 70 } };
const TfLiteConvParams opdata63 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs63 = { 3, { 68,69,70 } };
const TfArray<1, int> outputs63 = { 1, { 71 } };
uint8_t ALIGN(4) opdata64[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 64, 183, 3, 0, 80, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs64 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs64 = { 1, { 72 } };
uint8_t ALIGN(4) opdata65[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 64, 182, 3, 0, 0, 1, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs65 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs65 = { 1, { 73 } };
uint8_t ALIGN(4) opdata66[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 16, 0, 0, 0, 3, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 1, 0, 0, 0, 64, 3, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 4, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 64, 0, 0, 0, 2, 0, 253, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs66 = { 3, { 71,72,73 } };
const TfArray<1, int> outputs66 = { 1, { 74 } };
uint8_t ALIGN(4) opdata67[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 64, 150, 3, 0, 0, 32, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs67 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs67 = { 1, { 75 } };
uint8_t ALIGN(4) opdata68[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 64, 148, 3, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs68 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs68 = { 1, { 76 } };
uint8_t ALIGN(4) opdata69[135] = { 107, 116, 0, 109, 112, 0, 8, 0, 2, 0, 0, 64, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 192, 1, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 4, 0, 252, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 6, 95, 43, 113, 111, 68, 55, 6, 1, 6, 98, 13, 0, 116, 72, 0, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs69 = { 3, { 74,75,76 } };
const TfArray<1, int> outputs69 = { 1, { 77 } };
uint8_t ALIGN(4) opdata70[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 176, 143, 3, 0, 144, 4, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs70 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs70 = { 1, { 78 } };
uint8_t ALIGN(4) opdata71[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 176, 141, 3, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs71 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs71 = { 1, { 79 } };
uint8_t ALIGN(4) opdata72[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 128, 0, 0, 0, 1, 0, 0, 0, 128, 2, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 4, 0, 0, 128, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 2, 0, 253, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs72 = { 3, { 77,78,79 } };
const TfArray<1, int> outputs72 = { 1, { 80 } };
uint8_t ALIGN(4) opdata73[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 176, 77, 3, 0, 0, 64, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs73 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs73 = { 1, { 81 } };
uint8_t ALIGN(4) opdata74[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 176, 75, 3, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs74 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs74 = { 1, { 82 } };
const TfLiteConvParams opdata75 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs75 = { 3, { 80,81,82 } };
const TfArray<1, int> outputs75 = { 1, { 83 } };
uint8_t ALIGN(4) opdata76[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 32, 71, 3, 0, 144, 4, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs76 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs76 = { 1, { 84 } };
uint8_t ALIGN(4) opdata77[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 32, 69, 3, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs77 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs77 = { 1, { 85 } };
uint8_t ALIGN(4) opdata78[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 128, 0, 0, 0, 1, 0, 0, 0, 128, 2, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 4, 0, 0, 128, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 2, 0, 252, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs78 = { 3, { 83,84,85 } };
const TfArray<1, int> outputs78 = { 1, { 86 } };
uint8_t ALIGN(4) opdata79[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 32, 5, 3, 0, 0, 64, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs79 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs79 = { 1, { 87 } };
uint8_t ALIGN(4) opdata80[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 32, 3, 3, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs80 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs80 = { 1, { 88 } };
const TfLiteConvParams opdata81 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs81 = { 3, { 86,87,88 } };
const TfArray<1, int> outputs81 = { 1, { 89 } };
uint8_t ALIGN(4) opdata82[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 144, 254, 2, 0, 144, 4, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs82 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs82 = { 1, { 90 } };
uint8_t ALIGN(4) opdata83[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 144, 252, 2, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs83 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs83 = { 1, { 91 } };
uint8_t ALIGN(4) opdata84[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 128, 0, 0, 0, 1, 0, 0, 0, 128, 2, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 4, 0, 0, 128, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 2, 0, 253, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs84 = { 3, { 89,90,91 } };
const TfArray<1, int> outputs84 = { 1, { 92 } };
uint8_t ALIGN(4) opdata85[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 144, 188, 2, 0, 0, 64, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs85 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs85 = { 1, { 93 } };
uint8_t ALIGN(4) opdata86[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 144, 186, 2, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs86 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs86 = { 1, { 94 } };
uint8_t ALIGN(4) opdata87[135] = { 107, 116, 0, 109, 112, 0, 8, 0, 4, 0, 0, 128, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 128, 3, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 3, 0, 252, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 6, 95, 43, 113, 111, 68, 55, 6, 1, 6, 98, 13, 0, 116, 72, 0, 20, 40, 4, 20, 20, 4, 12, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs87 = { 3, { 92,93,94 } };
const TfArray<1, int> outputs87 = { 1, { 95 } };
uint8_t ALIGN(4) opdata88[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 182, 2, 0, 144, 4, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs88 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs88 = { 1, { 96 } };
uint8_t ALIGN(4) opdata89[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 180, 2, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs89 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs89 = { 1, { 97 } };
uint8_t ALIGN(4) opdata90[197] = { 107, 116, 0, 109, 112, 0, 64, 3, 0, 0, 0, 8, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 128, 0, 0, 0, 1, 0, 0, 0, 128, 2, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 128, 255, 255, 255, 0, 4, 0, 0, 128, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 97, 103, 103, 112, 0, 20, 144, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 2, 0, 252, 255, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 6, 91, 43, 165, 163, 68, 55, 0, 7, 0, 1, 0, 6, 0, 98, 0, 18, 0, 4, 0, 175, 0, 80, 0, 176, 0, 20, 40, 5, 20, 20, 5, 18, 37, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs90 = { 3, { 95,96,97 } };
const TfArray<1, int> outputs90 = { 1, { 98 } };
uint8_t ALIGN(4) opdata91[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 116, 2, 0, 0, 64, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs91 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs91 = { 1, { 99 } };
uint8_t ALIGN(4) opdata92[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 114, 2, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs92 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs92 = { 1, { 100 } };
const TfLiteConvParams opdata93 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs93 = { 3, { 98,99,100 } };
const TfArray<1, int> outputs93 = { 1, { 101 } };
const TfLiteDepthwiseConvParams opdata94 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs94 = { 3, { 101,102,103 } };
const TfArray<1, int> outputs94 = { 1, { 104 } };
uint8_t ALIGN(4) opdata95[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 50, 2, 0, 0, 64, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs95 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs95 = { 1, { 105 } };
uint8_t ALIGN(4) opdata96[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 48, 2, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs96 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs96 = { 1, { 106 } };
const TfLiteConvParams opdata97 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs97 = { 3, { 104,105,106 } };
const TfArray<1, int> outputs97 = { 1, { 107 } };
const TfLiteDepthwiseConvParams opdata98 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs98 = { 3, { 107,108,109 } };
const TfArray<1, int> outputs98 = { 1, { 110 } };
uint8_t ALIGN(4) opdata99[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 240, 1, 0, 0, 64, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs99 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs99 = { 1, { 111 } };
uint8_t ALIGN(4) opdata100[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 238, 1, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs100 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs100 = { 1, { 112 } };
const TfLiteConvParams opdata101 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs101 = { 3, { 110,111,112 } };
const TfArray<1, int> outputs101 = { 1, { 113 } };
const TfLiteDepthwiseConvParams opdata102 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs102 = { 3, { 113,114,115 } };
const TfArray<1, int> outputs102 = { 1, { 116 } };
uint8_t ALIGN(4) opdata103[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 174, 1, 0, 0, 64, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs103 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs103 = { 1, { 117 } };
uint8_t ALIGN(4) opdata104[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 172, 1, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs104 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs104 = { 1, { 118 } };
const TfLiteConvParams opdata105 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs105 = { 3, { 116,117,118 } };
const TfArray<1, int> outputs105 = { 1, { 119 } };
const TfLiteDepthwiseConvParams opdata106 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs106 = { 3, { 119,120,121 } };
const TfArray<1, int> outputs106 = { 1, { 122 } };
uint8_t ALIGN(4) opdata107[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 108, 1, 0, 0, 64, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs107 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs107 = { 1, { 123 } };
uint8_t ALIGN(4) opdata108[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 106, 1, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs108 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs108 = { 1, { 124 } };
const TfLiteConvParams opdata109 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs109 = { 3, { 122,123,124 } };
const TfArray<1, int> outputs109 = { 1, { 125 } };
const TfLiteDepthwiseConvParams opdata110 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs110 = { 3, { 125,126,127 } };
const TfArray<1, int> outputs110 = { 1, { 128 } };
uint8_t ALIGN(4) opdata111[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 42, 1, 0, 0, 64, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs111 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs111 = { 1, { 129 } };
uint8_t ALIGN(4) opdata112[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 40, 1, 0, 0, 2, 0, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs112 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs112 = { 1, { 130 } };
const TfLiteConvParams opdata113 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs113 = { 3, { 128,129,130 } };
const TfArray<1, int> outputs113 = { 1, { 131 } };
const TfLiteDepthwiseConvParams opdata114 = { kTfLitePaddingSame, 2,2, 1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs114 = { 3, { 131,132,133 } };
const TfArray<1, int> outputs114 = { 1, { 134 } };
uint8_t ALIGN(4) opdata115[41] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 40, 0, 0, 0, 0, 1, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const int inputs115 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs115 = { 1, { 135 } };
uint8_t ALIGN(4) opdata116[29] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 3, 0, 1, 0, 2, 0, 0, 32, 0, 8, 5, 5, 6, 37, 1,  }; /* custom_initial_data */
const int inputs116 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs116 = { 1, { 136 } };
const TfLiteConvParams opdata117 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs117 = { 3, { 134,135,136 } };
const TfArray<1, int> outputs117 = { 1, { 137 } };
const TfLiteReducerParams opdata118 = { false };
const TfArray<2, int> inputs118 = { 2, { 137,7 } };
const TfArray<1, int> outputs118 = { 1, { 138 } };
const TfLiteReshapeParams opdata119 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs119 = { 2, { 138,3 } };
const TfArray<1, int> outputs119 = { 1, { 140 } };
uint8_t ALIGN(4) opdata120[29] = { 97, 100, 100, 114, 0, 115, 105, 122, 101, 0, 2, 11, 7, 0, 3, 0, 1, 0, 2, 0, 0, 0, 0, 32, 5, 5, 6, 37, 1,  }; /* custom_initial_data */
const int inputs120 = 0; /* empty TfLiteIntArray */
const TfArray<1, int> outputs120 = { 1, { 141 } };
const TfLiteConvParams opdata121 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs121 = { 3, { 140,141,139 } };
const TfArray<1, int> outputs121 = { 1, { 142 } };
const TfLiteReshapeParams opdata122 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs122 = { 2, { 142,2 } };
const TfArray<1, int> outputs122 = { 1, { 143 } };
const TfLiteShapeParams opdata123 = {  };
const TfArray<1, int> inputs123 = { 1, { 143 } };
const TfArray<1, int> outputs123 = { 1, { 144 } };
const TfLiteStridedSliceParams opdata124 = { 0, 0, 0, 0, 1 };
const TfArray<4, int> inputs124 = { 4, { 144,6,5,5 } };
const TfArray<1, int> outputs124 = { 1, { 145 } };
const TfLitePackParams opdata125 = { 3, 0 };
const TfArray<3, int> inputs125 = { 3, { 145,4,4 } };
const TfArray<1, int> outputs125 = { 1, { 146 } };
const TfLiteReshapeParams opdata126 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs126 = { 2, { 142,146 } };
const TfArray<1, int> outputs126 = { 1, { 147 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 49152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0)) },},
  { kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt64, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt64, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 4, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 4, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 4, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 8, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 98304, (TfLiteIntArray*)&tensor_dimension8, 65536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8)) },},
  { kTfLiteInt8, tensor_arena + 163840, (TfLiteIntArray*)&tensor_dimension9, 1344, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 165184, (TfLiteIntArray*)&tensor_dimension10, 112, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension11, 98304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11)) },},
  { kTfLiteInt8, tensor_arena + 122880, (TfLiteIntArray*)&tensor_dimension12, 304, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 123360, (TfLiteIntArray*)&tensor_dimension13, 112, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 98304, (TfLiteIntArray*)&tensor_dimension14, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14)) },},
  { kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension15, 896, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 25472, (TfLiteIntArray*)&tensor_dimension16, 112, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension17, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17)) },},
  { kTfLiteInt8, tensor_arena + 49152, (TfLiteIntArray*)&tensor_dimension18, 304, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 49632, (TfLiteIntArray*)&tensor_dimension19, 112, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension20, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20)) },},
  { kTfLiteInt8, tensor_arena + 49152, (TfLiteIntArray*)&tensor_dimension21, 896, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 50048, (TfLiteIntArray*)&tensor_dimension22, 112, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension23, 24576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23)) },},
  { kTfLiteInt8, tensor_arena + 30720, (TfLiteIntArray*)&tensor_dimension24, 304, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 31200, (TfLiteIntArray*)&tensor_dimension25, 112, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension26, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26)) },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension27, 1664, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 18048, (TfLiteIntArray*)&tensor_dimension28, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension29, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension30, 592, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 33360, (TfLiteIntArray*)&tensor_dimension31, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension32, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension33, 4096, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension34, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension35, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension36, 592, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 33360, (TfLiteIntArray*)&tensor_dimension37, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension38, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension39, 4096, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension40, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension41, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension42, 592, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 33360, (TfLiteIntArray*)&tensor_dimension43, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension44, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension45, 4096, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension47, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension48, 592, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 33360, (TfLiteIntArray*)&tensor_dimension49, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension50, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension51, 4096, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension52, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension53, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension54, 592, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 33360, (TfLiteIntArray*)&tensor_dimension55, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension56, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension57, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57)) },},
  { kTfLiteInt32, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension58, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension59, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension60, 592, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 33360, (TfLiteIntArray*)&tensor_dimension61, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension62, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension63, 4096, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension64, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension66, 592, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 33360, (TfLiteIntArray*)&tensor_dimension67, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension68, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68)) },},
  { kTfLiteInt8, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension69, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69)) },},
  { kTfLiteInt32, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension70, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71)) },},
  { kTfLiteInt8, tensor_arena + 20480, (TfLiteIntArray*)&tensor_dimension72, 592, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 21072, (TfLiteIntArray*)&tensor_dimension73, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension74, 4096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant74)) },},
  { kTfLiteInt8, tensor_arena + 8192, (TfLiteIntArray*)&tensor_dimension75, 8192, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 20480, (TfLiteIntArray*)&tensor_dimension76, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension77, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant77)) },},
  { kTfLiteInt8, tensor_arena + 8192, (TfLiteIntArray*)&tensor_dimension78, 1168, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 9360, (TfLiteIntArray*)&tensor_dimension79, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension80, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant80)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension81, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant81)) },},
  { kTfLiteInt32, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension82, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant82)) },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension83, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant83)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension84, 1168, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 1168, (TfLiteIntArray*)&tensor_dimension85, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension86, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant86)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension87, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant87)) },},
  { kTfLiteInt32, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension88, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant88)) },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension89, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant89)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension90, 1168, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 1168, (TfLiteIntArray*)&tensor_dimension91, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension92, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant92)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension93, 16384, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension94, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension95, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant95)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension96, 1168, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, tensor_arena + 1168, (TfLiteIntArray*)&tensor_dimension97, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension98, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant98)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension99, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant99)) },},
  { kTfLiteInt32, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension100, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant100)) },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension101, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant101)) },},
  { kTfLiteInt8, (void*)tensor_data102, (TfLiteIntArray*)&tensor_dimension102, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant102)) },},
  { kTfLiteInt32, (void*)tensor_data103, (TfLiteIntArray*)&tensor_dimension103, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant103)) },},
  { kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension104, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant104)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension105, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant105)) },},
  { kTfLiteInt32, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension106, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant106)) },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension107, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant107)) },},
  { kTfLiteInt8, (void*)tensor_data108, (TfLiteIntArray*)&tensor_dimension108, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant108)) },},
  { kTfLiteInt32, (void*)tensor_data109, (TfLiteIntArray*)&tensor_dimension109, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant109)) },},
  { kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension110, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant110)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension111, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant111)) },},
  { kTfLiteInt32, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension112, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant112)) },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension113, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant113)) },},
  { kTfLiteInt8, (void*)tensor_data114, (TfLiteIntArray*)&tensor_dimension114, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant114)) },},
  { kTfLiteInt32, (void*)tensor_data115, (TfLiteIntArray*)&tensor_dimension115, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant115)) },},
  { kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension116, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant116)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension117, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant117)) },},
  { kTfLiteInt32, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension118, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant118)) },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension119, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant119)) },},
  { kTfLiteInt8, (void*)tensor_data120, (TfLiteIntArray*)&tensor_dimension120, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant120)) },},
  { kTfLiteInt32, (void*)tensor_data121, (TfLiteIntArray*)&tensor_dimension121, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant121)) },},
  { kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension122, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant122)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension123, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant123)) },},
  { kTfLiteInt32, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension124, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant124)) },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension125, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant125)) },},
  { kTfLiteInt8, (void*)tensor_data126, (TfLiteIntArray*)&tensor_dimension126, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant126)) },},
  { kTfLiteInt32, (void*)tensor_data127, (TfLiteIntArray*)&tensor_dimension127, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant127)) },},
  { kTfLiteInt8, tensor_arena + 24576, (TfLiteIntArray*)&tensor_dimension128, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant128)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension129, 16384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant129)) },},
  { kTfLiteInt32, tensor_arena + 32768, (TfLiteIntArray*)&tensor_dimension130, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant130)) },},
  { kTfLiteInt8, tensor_arena + 16384, (TfLiteIntArray*)&tensor_dimension131, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant131)) },},
  { kTfLiteInt8, (void*)tensor_data132, (TfLiteIntArray*)&tensor_dimension132, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant132)) },},
  { kTfLiteInt32, (void*)tensor_data133, (TfLiteIntArray*)&tensor_dimension133, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant133)) },},
  { kTfLiteInt8, tensor_arena + 75776, (TfLiteIntArray*)&tensor_dimension134, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant134)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension135, 65536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant135)) },},
  { kTfLiteInt32, tensor_arena + 73728, (TfLiteIntArray*)&tensor_dimension136, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant136)) },},
  { kTfLiteInt8, tensor_arena + 65536, (TfLiteIntArray*)&tensor_dimension137, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant137)) },},
  { kTfLiteInt8, tensor_arena + 2048, (TfLiteIntArray*)&tensor_dimension138, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant138)) },},
  { kTfLiteInt32, (void*)tensor_data139, (TfLiteIntArray*)&tensor_dimension139, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant139)) },},
  { kTfLiteInt8, tensor_arena + 8192, (TfLiteIntArray*)&tensor_dimension140, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant140)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension141, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant141)) },},
  { kTfLiteInt8, tensor_arena + 8704, (TfLiteIntArray*)&tensor_dimension142, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant142)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension143, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant143)) },},
  { kTfLiteInt32, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension144, 8, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension145, 4, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt32, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension146, 12, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension147, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant147)) },},
};
const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, nullptr, OP_PAD, 0, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_XC_conv2d_v2, 175, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_XC_conv2d_v2, 143, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_XC_conv2d_v2, 143, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_XC_conv2d_v2, 143, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_XC_conv2d_v2, 135, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs33, (TfLiteIntArray*)&outputs33, const_cast<void*>(static_cast<const void*>(&opdata33)), OP_XC_conv2d_v2, 135, },
  { (TfLiteIntArray*)&inputs34, (TfLiteIntArray*)&outputs34, const_cast<void*>(static_cast<const void*>(&opdata34)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs35, (TfLiteIntArray*)&outputs35, const_cast<void*>(static_cast<const void*>(&opdata35)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs36, (TfLiteIntArray*)&outputs36, const_cast<void*>(static_cast<const void*>(&opdata36)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs37, (TfLiteIntArray*)&outputs37, const_cast<void*>(static_cast<const void*>(&opdata37)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs38, (TfLiteIntArray*)&outputs38, const_cast<void*>(static_cast<const void*>(&opdata38)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs39, (TfLiteIntArray*)&outputs39, const_cast<void*>(static_cast<const void*>(&opdata39)), OP_XC_conv2d_v2, 135, },
  { (TfLiteIntArray*)&inputs40, (TfLiteIntArray*)&outputs40, const_cast<void*>(static_cast<const void*>(&opdata40)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs41, (TfLiteIntArray*)&outputs41, const_cast<void*>(static_cast<const void*>(&opdata41)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs42, (TfLiteIntArray*)&outputs42, const_cast<void*>(static_cast<const void*>(&opdata42)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs43, (TfLiteIntArray*)&outputs43, const_cast<void*>(static_cast<const void*>(&opdata43)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs44, (TfLiteIntArray*)&outputs44, const_cast<void*>(static_cast<const void*>(&opdata44)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs45, (TfLiteIntArray*)&outputs45, const_cast<void*>(static_cast<const void*>(&opdata45)), OP_XC_conv2d_v2, 135, },
  { (TfLiteIntArray*)&inputs46, (TfLiteIntArray*)&outputs46, const_cast<void*>(static_cast<const void*>(&opdata46)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs47, (TfLiteIntArray*)&outputs47, const_cast<void*>(static_cast<const void*>(&opdata47)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs48, (TfLiteIntArray*)&outputs48, const_cast<void*>(static_cast<const void*>(&opdata48)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs49, (TfLiteIntArray*)&outputs49, const_cast<void*>(static_cast<const void*>(&opdata49)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs50, (TfLiteIntArray*)&outputs50, const_cast<void*>(static_cast<const void*>(&opdata50)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs51, (TfLiteIntArray*)&outputs51, const_cast<void*>(static_cast<const void*>(&opdata51)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs52, (TfLiteIntArray*)&outputs52, const_cast<void*>(static_cast<const void*>(&opdata52)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs53, (TfLiteIntArray*)&outputs53, const_cast<void*>(static_cast<const void*>(&opdata53)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs54, (TfLiteIntArray*)&outputs54, const_cast<void*>(static_cast<const void*>(&opdata54)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs55, (TfLiteIntArray*)&outputs55, const_cast<void*>(static_cast<const void*>(&opdata55)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs56, (TfLiteIntArray*)&outputs56, const_cast<void*>(static_cast<const void*>(&opdata56)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs57, (TfLiteIntArray*)&outputs57, const_cast<void*>(static_cast<const void*>(&opdata57)), OP_XC_conv2d_v2, 135, },
  { (TfLiteIntArray*)&inputs58, (TfLiteIntArray*)&outputs58, const_cast<void*>(static_cast<const void*>(&opdata58)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs59, (TfLiteIntArray*)&outputs59, const_cast<void*>(static_cast<const void*>(&opdata59)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs60, (TfLiteIntArray*)&outputs60, const_cast<void*>(static_cast<const void*>(&opdata60)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs61, (TfLiteIntArray*)&outputs61, const_cast<void*>(static_cast<const void*>(&opdata61)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs62, (TfLiteIntArray*)&outputs62, const_cast<void*>(static_cast<const void*>(&opdata62)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs63, (TfLiteIntArray*)&outputs63, const_cast<void*>(static_cast<const void*>(&opdata63)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs64, (TfLiteIntArray*)&outputs64, const_cast<void*>(static_cast<const void*>(&opdata64)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs65, (TfLiteIntArray*)&outputs65, const_cast<void*>(static_cast<const void*>(&opdata65)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs66, (TfLiteIntArray*)&outputs66, const_cast<void*>(static_cast<const void*>(&opdata66)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs67, (TfLiteIntArray*)&outputs67, const_cast<void*>(static_cast<const void*>(&opdata67)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs68, (TfLiteIntArray*)&outputs68, const_cast<void*>(static_cast<const void*>(&opdata68)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs69, (TfLiteIntArray*)&outputs69, const_cast<void*>(static_cast<const void*>(&opdata69)), OP_XC_conv2d_v2, 135, },
  { (TfLiteIntArray*)&inputs70, (TfLiteIntArray*)&outputs70, const_cast<void*>(static_cast<const void*>(&opdata70)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs71, (TfLiteIntArray*)&outputs71, const_cast<void*>(static_cast<const void*>(&opdata71)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs72, (TfLiteIntArray*)&outputs72, const_cast<void*>(static_cast<const void*>(&opdata72)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs73, (TfLiteIntArray*)&outputs73, const_cast<void*>(static_cast<const void*>(&opdata73)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs74, (TfLiteIntArray*)&outputs74, const_cast<void*>(static_cast<const void*>(&opdata74)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs75, (TfLiteIntArray*)&outputs75, const_cast<void*>(static_cast<const void*>(&opdata75)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs76, (TfLiteIntArray*)&outputs76, const_cast<void*>(static_cast<const void*>(&opdata76)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs77, (TfLiteIntArray*)&outputs77, const_cast<void*>(static_cast<const void*>(&opdata77)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs78, (TfLiteIntArray*)&outputs78, const_cast<void*>(static_cast<const void*>(&opdata78)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs79, (TfLiteIntArray*)&outputs79, const_cast<void*>(static_cast<const void*>(&opdata79)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs80, (TfLiteIntArray*)&outputs80, const_cast<void*>(static_cast<const void*>(&opdata80)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs81, (TfLiteIntArray*)&outputs81, const_cast<void*>(static_cast<const void*>(&opdata81)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs82, (TfLiteIntArray*)&outputs82, const_cast<void*>(static_cast<const void*>(&opdata82)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs83, (TfLiteIntArray*)&outputs83, const_cast<void*>(static_cast<const void*>(&opdata83)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs84, (TfLiteIntArray*)&outputs84, const_cast<void*>(static_cast<const void*>(&opdata84)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs85, (TfLiteIntArray*)&outputs85, const_cast<void*>(static_cast<const void*>(&opdata85)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs86, (TfLiteIntArray*)&outputs86, const_cast<void*>(static_cast<const void*>(&opdata86)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs87, (TfLiteIntArray*)&outputs87, const_cast<void*>(static_cast<const void*>(&opdata87)), OP_XC_conv2d_v2, 135, },
  { (TfLiteIntArray*)&inputs88, (TfLiteIntArray*)&outputs88, const_cast<void*>(static_cast<const void*>(&opdata88)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs89, (TfLiteIntArray*)&outputs89, const_cast<void*>(static_cast<const void*>(&opdata89)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs90, (TfLiteIntArray*)&outputs90, const_cast<void*>(static_cast<const void*>(&opdata90)), OP_XC_conv2d_v2, 197, },
  { (TfLiteIntArray*)&inputs91, (TfLiteIntArray*)&outputs91, const_cast<void*>(static_cast<const void*>(&opdata91)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs92, (TfLiteIntArray*)&outputs92, const_cast<void*>(static_cast<const void*>(&opdata92)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs93, (TfLiteIntArray*)&outputs93, const_cast<void*>(static_cast<const void*>(&opdata93)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs94, (TfLiteIntArray*)&outputs94, const_cast<void*>(static_cast<const void*>(&opdata94)), OP_DEPTHWISE_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs95, (TfLiteIntArray*)&outputs95, const_cast<void*>(static_cast<const void*>(&opdata95)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs96, (TfLiteIntArray*)&outputs96, const_cast<void*>(static_cast<const void*>(&opdata96)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs97, (TfLiteIntArray*)&outputs97, const_cast<void*>(static_cast<const void*>(&opdata97)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs98, (TfLiteIntArray*)&outputs98, const_cast<void*>(static_cast<const void*>(&opdata98)), OP_DEPTHWISE_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs99, (TfLiteIntArray*)&outputs99, const_cast<void*>(static_cast<const void*>(&opdata99)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs100, (TfLiteIntArray*)&outputs100, const_cast<void*>(static_cast<const void*>(&opdata100)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs101, (TfLiteIntArray*)&outputs101, const_cast<void*>(static_cast<const void*>(&opdata101)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs102, (TfLiteIntArray*)&outputs102, const_cast<void*>(static_cast<const void*>(&opdata102)), OP_DEPTHWISE_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs103, (TfLiteIntArray*)&outputs103, const_cast<void*>(static_cast<const void*>(&opdata103)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs104, (TfLiteIntArray*)&outputs104, const_cast<void*>(static_cast<const void*>(&opdata104)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs105, (TfLiteIntArray*)&outputs105, const_cast<void*>(static_cast<const void*>(&opdata105)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs106, (TfLiteIntArray*)&outputs106, const_cast<void*>(static_cast<const void*>(&opdata106)), OP_DEPTHWISE_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs107, (TfLiteIntArray*)&outputs107, const_cast<void*>(static_cast<const void*>(&opdata107)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs108, (TfLiteIntArray*)&outputs108, const_cast<void*>(static_cast<const void*>(&opdata108)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs109, (TfLiteIntArray*)&outputs109, const_cast<void*>(static_cast<const void*>(&opdata109)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs110, (TfLiteIntArray*)&outputs110, const_cast<void*>(static_cast<const void*>(&opdata110)), OP_DEPTHWISE_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs111, (TfLiteIntArray*)&outputs111, const_cast<void*>(static_cast<const void*>(&opdata111)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs112, (TfLiteIntArray*)&outputs112, const_cast<void*>(static_cast<const void*>(&opdata112)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs113, (TfLiteIntArray*)&outputs113, const_cast<void*>(static_cast<const void*>(&opdata113)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs114, (TfLiteIntArray*)&outputs114, const_cast<void*>(static_cast<const void*>(&opdata114)), OP_DEPTHWISE_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs115, (TfLiteIntArray*)&outputs115, const_cast<void*>(static_cast<const void*>(&opdata115)), OP_XC_ld_flash, 41, },
  { (TfLiteIntArray*)&inputs116, (TfLiteIntArray*)&outputs116, const_cast<void*>(static_cast<const void*>(&opdata116)), OP_XC_ld_flash, 29, },
  { (TfLiteIntArray*)&inputs117, (TfLiteIntArray*)&outputs117, const_cast<void*>(static_cast<const void*>(&opdata117)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs118, (TfLiteIntArray*)&outputs118, const_cast<void*>(static_cast<const void*>(&opdata118)), OP_MEAN, 0, },
  { (TfLiteIntArray*)&inputs119, (TfLiteIntArray*)&outputs119, const_cast<void*>(static_cast<const void*>(&opdata119)), OP_RESHAPE, 0, },
  { (TfLiteIntArray*)&inputs120, (TfLiteIntArray*)&outputs120, const_cast<void*>(static_cast<const void*>(&opdata120)), OP_XC_ld_flash, 29, },
  { (TfLiteIntArray*)&inputs121, (TfLiteIntArray*)&outputs121, const_cast<void*>(static_cast<const void*>(&opdata121)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs122, (TfLiteIntArray*)&outputs122, const_cast<void*>(static_cast<const void*>(&opdata122)), OP_RESHAPE, 0, },
  { (TfLiteIntArray*)&inputs123, (TfLiteIntArray*)&outputs123, const_cast<void*>(static_cast<const void*>(&opdata123)), OP_SHAPE, 0, },
  { (TfLiteIntArray*)&inputs124, (TfLiteIntArray*)&outputs124, const_cast<void*>(static_cast<const void*>(&opdata124)), OP_STRIDED_SLICE, 0, },
  { (TfLiteIntArray*)&inputs125, (TfLiteIntArray*)&outputs125, const_cast<void*>(static_cast<const void*>(&opdata125)), OP_PACK, 0, },
  { (TfLiteIntArray*)&inputs126, (TfLiteIntArray*)&outputs126, const_cast<void*>(static_cast<const void*>(&opdata126)), OP_RESHAPE, 0, },
};

// Scratch buffer variables
int scratch_buffer_idx = 0;
const int scratch_buffer_offsets[27] = { 165296, 123184, 25584, 49456, 50160, 31024, 18304, 33616, 0, 33616, 0, 33616, 0, 33616, 0, 33616, 33616, 0, 33616, 21328, 0, 9872, 1680, 1680, 0, 1680, 0 };
tflite::MicroContext mc;

// Xcore context and thread variables
xc_context_config_t xc_config;
constexpr int kStackWordsPerThread = 256;
uint64_t xc_stack[kStackWordsPerThread/2];

// Functions to be used as function pointers for TfLiteContext and MicroContext 
static void* AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes) {
  static uint8_t *AllocPtr = tensor_arena + sizeof(tensor_arena);

  AllocPtr -= bytes;
  return AllocPtr;
}

static TfLiteEvalTensor *GetEvalTensor(const struct TfLiteContext *context,
                                       int tensor_idx) {
  return &evalTensors[tensor_idx];
}

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext *context, size_t bytes,
                                       int *buffer_idx) {
  *buffer_idx = scratch_buffer_idx++;
  return kTfLiteOk;
};

static void *GetScratchBuffer(struct TfLiteContext *context,
                                       int buffer_idx) {
  return tensor_arena + scratch_buffer_offsets[buffer_idx];
}

static TfLiteTensor* AllocateTempInputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->inputs->data[index]];
}

static TfLiteTensor* AllocateTempOutputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->outputs->data[index]];
}

static void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
}

static void* external_context() {
  return &xc_config;
}

} // namespace

TfLiteStatus detect_init(void *flash_data) {
  // Set flash data in xcore context config
  xc_config.flash_data = flash_data;

  // Setup microcontext functions
  mc.AllocateTempInputTensor = &AllocateTempInputTensor;
  mc.AllocateTempOutputTensor = &AllocateTempOutputTensor;
  mc.DeallocateTempTfLiteTensor = &DeallocateTempTfLiteTensor;
  mc.external_context = &external_context;

  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  
  // Set microcontext as the context ptr
  ctx.impl_ = (void*)&mc;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 148;
  for(size_t i = 0; i < 148; ++i) {
    tflTensors[i].data.data = tensorData[i].data;
    evalTensors[i].data.data = tensorData[i].data;
    tflTensors[i].type = tensorData[i].type;
    evalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    evalTensors[i].dims = tensorData[i].dims;
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_PAD] = tflite::ops::micro::Register_PAD();
  registrations[OP_XC_ld_flash] = *(tflite::ops::micro::xcore::Register_XC_ld_flash());
  registrations[OP_XC_conv2d_v2] = *(tflite::ops::micro::xcore::Register_XC_conv2d_v2());
  registrations[OP_CONV_2D] = tflite::Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = tflite::Register_DEPTHWISE_CONV_2D();
  registrations[OP_MEAN] = tflite::Register_MEAN();
  registrations[OP_RESHAPE] = tflite::ops::micro::Register_RESHAPE();
  registrations[OP_SHAPE] = tflite::Register_SHAPE();
  registrations[OP_STRIDED_SLICE] = tflite::ops::micro::Register_STRIDED_SLICE();
  registrations[OP_PACK] = tflite::ops::micro::Register_PACK();

  for(size_t i = 0; i < 127; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, nodeData[i].custom_initial_data_size);
    }
  }
  for(size_t i = 0; i < 127; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* detect_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  147, 
};
TfLiteTensor* detect_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus detect_invoke() {
  thread_init_1(&xc_config.thread_info);
  xc_config.thread_info.nstackwords = kStackWordsPerThread;
  xc_config.thread_info.stacks = &xc_stack[kStackWordsPerThread/2 - 1];
  for(size_t i = 0; i < 127; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      thread_destroy(&xc_config.thread_info);
      return status;
    }
  }
  thread_destroy(&xc_config.thread_info);
  return kTfLiteOk;
}
