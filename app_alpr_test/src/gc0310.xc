#include <stdint.h>
#include <stdio.h>
#include <xs1.h>
#include "i2c.h"
#include "gc0310.h"

#define SWIDTH    3296
#define SHEIGHT   2480
#define GC0310_I2C_ADDR 0x21

/* GC0310 supported geometry */
#define GC0310_WIDTH			640
#define GC0310_HEIGHT			480

typedef struct {
	uint16_t addr;
	uint16_t val;
} gc0310_settings_t ;

#define SLEEP   0xFFFF
#define TRSTUS  200
static gc0310_settings_t chip_set_up[] = {

    /////////////////////////////////////////////////
	/////////////////	system reg	/////////////////
	/////////////////////////////////////////////////
	{0xfe,0xf0},
	{0xfe,0xf0},
	{0xfe,0x00},
	{0xfc,0x0e},
	{0xfc,0x0e},
	{0xf2,0x80},
	{0xf3,0x00},
	{0xf7,0x1b},
	{0xf8,0x04}, 
	{0xf9,0x8e},
	{0xfa,0x11},
	/////////////////////////////////////////////////      
	///////////////////   MIPI   ////////////////////      
	/////////////////////////////////////////////////      
	{0xfe,0x03},
	{0x40,0x08},
	{0x42,0x00},
	{0x43,0x00},
	{0x01,0x03},
	{0x10,0x84},
                                        
	{0x01,0x03},             
	{0x02,0x11},  // 00 20150522        
	{0x03,0x94},             
	{0x04,0x01},            
	{0x05,0x00},             
	{0x06,0x80},             
	{0x11,0x1e},             
	{0x12,0x00},      
	{0x13,0x05},             
	{0x15,0x10},                                                                    
	{0x21,0x10},             
	{0x22,0x01},             
	{0x23,0x10},                                             
	{0x24,0x02},                                             
	{0x25,0x10},                                             
	{0x26,0x03},                                             
	{0x29,0x02},                                             
	{0x2a,0x0a},                                             
	{0x2b,0x04},                                             
	{0xfe,0x00},
	
	/////////////////////////////////////////////////
	/////////////////  CISCTL reg	/////////////////
	/////////////////////////////////////////////////
	{0x00,0x2f},
	{0x01,0x0f},
	{0x02,0x04},
	{0x03,0x03},
	{0x04,0x50},
	{0x09,0x00},
	{0x0a,0x00},
	{0x0b,0x00},
	{0x0c,0x04},
	{0x0d,0x01},
	{0x0e,0xe8},
	{0x0f,0x02},
	{0x10,0x88},
	{0x16,0x00},	
	{0x17,0x14},
	{0x18,0x1a},
	{0x19,0x14},
	{0x1b,0x48},
	{0x1c,0x1c},
	{0x1e,0x6b},
	{0x1f,0x28},
	{0x20,0x8b},//0x89 travis20140801
	{0x21,0x49},
	{0x22,0xb0},
	{0x23,0x04},
	{0x24,0x16},
	{0x34,0x20},
	
	/////////////////////////////////////////////////
	////////////////////   BLK	 ////////////////////
	/////////////////////////////////////////////////
	{0x26,0x23},
	{0x28,0xff},
	{0x29,0x00},
	{0x32,0x00},
	{0x33,0x10}, 
	{0x37,0x20},
	{0x38,0x10},
	{0x47,0x80},
	{0x4e,0x66},
	{0xa8,0x02},
	{0xa9,0x80},
	
	/////////////////////////////////////////////////
	//////////////////	ISP reg   ///////////////////
	/////////////////////////////////////////////////
	{0x40,0xff},
	{0x41,0x21},
	{0x42,0xcf},
	{0x44,0x02},
	{0x45,0xa8}, 
	{0x46,0x02}, 
	{0x4a,0x11},
	{0x4b,0x01},
	{0x4c,0x20},
	{0x4d,0x05},
	{0x4f,0x01},
	{0x50,0x01},
	{0x55,0x01},
	{0x56,0xe0},
	{0x57,0x02},
	{0x58,0x80},
	
	/////////////////////////////////////////////////
	///////////////////   GAIN   ////////////////////
	/////////////////////////////////////////////////
	{0x70,0x70},
	{0x5a,0x84},
	{0x5b,0xc9},
	{0x5c,0xed},
	{0x77,0x74},
	{0x78,0x40},
	{0x79,0x5f},
	
	///////////////////////////////////////////////// 
	///////////////////   DNDD  /////////////////////
	///////////////////////////////////////////////// 
	{0x82,0x14}, 
	{0x83,0x0b},
	{0x89,0xf0},
	
	///////////////////////////////////////////////// 
	//////////////////   EEINTP  ////////////////////
	///////////////////////////////////////////////// 
	{0x8f,0xaa}, 
	{0x90,0x8c}, 
	{0x91,0x90},
	{0x92,0x03}, 
	{0x93,0x03}, 
	{0x94,0x05}, 
	{0x95,0x65}, 
	{0x96,0xf0}, 
	
	///////////////////////////////////////////////// 
	/////////////////////  ASDE  ////////////////////
	///////////////////////////////////////////////// 
	{0xfe,0x00},

	{0x9a,0x20},
	{0x9b,0x80},
	{0x9c,0x40},
	{0x9d,0x80},
	 
	{0xa1,0x30},
 	{0xa2,0x32},
	{0xa4,0x30},
	{0xa5,0x30},
	{0xaa,0x10}, 
	{0xac,0x22},
	 
	
	/////////////////////////////////////////////////
	///////////////////   GAMMA   ///////////////////
	/////////////////////////////////////////////////
	{0xfe,0x00},//default
	{0xbf,0x08},
	{0xc0,0x16},
	{0xc1,0x28},
	{0xc2,0x41},
	{0xc3,0x5a},
	{0xc4,0x6c},
	{0xc5,0x7a},
	{0xc6,0x96},
	{0xc7,0xac},
	{0xc8,0xbc},
	{0xc9,0xc9},
	{0xca,0xd3},
	{0xcb,0xdd},
	{0xcc,0xe5},
	{0xcd,0xf1},
	{0xce,0xfa},
	{0xcf,0xff},
                                 
	/////////////////////////////////////////////////
	///////////////////   YCP  //////////////////////
	/////////////////////////////////////////////////
	{0xd0,0x40},
	{0xd1,0x34}, 
	{0xd2,0x34}, 
	{0xd3,0x40}, 
	{0xd6,0xf2},
	{0xd7,0x1b},
	{0xd8,0x18},
	{0xdd,0x03}, 
	
	/////////////////////////////////////////////////
	////////////////////   AEC   ////////////////////
	/////////////////////////////////////////////////
	{0xfe,0x01},
	{0x05,0x30}, 
	{0x06,0x75}, 
	{0x07,0x40}, 
	{0x08,0xb0}, 
	{0x0a,0xc5}, 
	{0x0b,0x11}, 
	{0x0c,0x00},
	{0x12,0x52}, 
	{0x13,0x38}, 
	{0x18,0x95}, 
	{0x19,0x96}, 
	{0x1f,0x20}, 
	{0x20,0xc0}, 
	{0x3e,0x40}, 
	{0x3f,0x57}, 
	{0x40,0x7d}, 
	{0x03,0x60},
	{0x44,0x02},
	
	/////////////////////////////////////////////////
	////////////////////   AWB   ////////////////////
	/////////////////////////////////////////////////
	{0xfe,0x01},	
	{0x1c,0x91}, 
	{0x21,0x15}, 
	{0x50,0x80}, 
	{0x56,0x04}, 
	{0x59,0x08}, 
	{0x5b,0x02},
	{0x61,0x8d}, 
	{0x62,0xa7}, 
	{0x63,0xd0}, 
	{0x65,0x06},
	{0x66,0x06}, 
	{0x67,0x84}, 
	{0x69,0x08},
	{0x6a,0x25},
	{0x6b,0x01}, 
	{0x6c,0x00}, 
	{0x6d,0x02}, 
	{0x6e,0xf0}, 
	{0x6f,0x80}, 
	{0x76,0x80},
	{0x78,0xaf}, 
	{0x79,0x75},
	{0x7a,0x40},
	{0x7b,0x50},	
	{0x7c,0x0c}, 
	

	{0x90,0xc9},//stable AWB 
	{0x91,0xbe},
	{0x92,0xe2},
	{0x93,0xc9},
	{0x95,0x1b},
	{0x96,0xe2},
	{0x97,0x49},
	{0x98,0x1b},
	{0x9a,0x49},
	{0x9b,0x1b},
	{0x9c,0xc3},
	{0x9d,0x49},
	{0x9f,0xc7},
	{0xa0,0xc8},
	{0xa1,0x00},
	{0xa2,0x00},
	{0x86,0x00},
	{0x87,0x00},
	{0x88,0x00},
	{0x89,0x00},
	{0xa4,0xb9},
	{0xa5,0xa0},
	{0xa6,0xba},
	{0xa7,0x92},
	{0xa9,0xba},
	{0xaa,0x80},
	{0xab,0x9d},
	{0xac,0x7f},
	{0xae,0xbb},
	{0xaf,0x9d},
	{0xb0,0xc8},
	{0xb1,0x97},
	{0xb3,0xb7},
	{0xb4,0x7f},
	{0xb5,0x00},
	{0xb6,0x00},
	{0x8b,0x00},
	{0x8c,0x00},
	{0x8d,0x00},
	{0x8e,0x00},
	{0x94,0x55},
	{0x99,0xa6},
	{0x9e,0xaa},
	{0xa3,0x0a},
	{0x8a,0x00},
	{0xa8,0x55},
	{0xad,0x55},
	{0xb2,0x55},
	{0xb7,0x05},
	{0x8f,0x00},
	{0xb8,0xcb},
	{0xb9,0x9b},	
	
	
	/////////////////////////////////////////////////
	////////////////////   CC    ////////////////////
	/////////////////////////////////////////////////
	{0xfe,0x01},
                                 
	{0xd0,0x38},//skin red
	{0xd1,0x00},
	{0xd2,0x02},
	{0xd3,0x04},
	{0xd4,0x38},
	{0xd5,0x12},
                                 
	{0xd6,0x30},
	{0xd7,0x00},
	{0xd8,0x0a},
	{0xd9,0x16},
	{0xda,0x39},
	{0xdb,0xf8},

	/////////////////////////////////////////////////
	////////////////////   LSC   ////////////////////
	/////////////////////////////////////////////////
	{0xfe,0x01},
	{0xc1,0x3c},
	{0xc2,0x50},
	{0xc3,0x00},
	{0xc4,0x40},
	{0xc5,0x30},
	{0xc6,0x30},
	{0xc7,0x10},
	{0xc8,0x00},
	{0xc9,0x00},
	{0xdc,0x20},
	{0xdd,0x10},
	{0xdf,0x00},
	{0xde,0x00},
	
	/////////////////////////////////////////////////
	///////////////////  Histogram	/////////////////
	/////////////////////////////////////////////////
	{0x01,0x10},
	{0x0b,0x31},
	{0x0e,0x50},
	{0x0f,0x0f},
	{0x10,0x6e},
	{0x12,0xa0},
	{0x15,0x60},
	{0x16,0x60},
	{0x17,0xe0},
	
	/////////////////////////////////////////////////
	//////////////	Measure Window	  ///////////////
	/////////////////////////////////////////////////
	{0xcc,0x0c}, 
	{0xcd,0x10},
	{0xce,0xa0},
	{0xcf,0xe6},
	
	/////////////////////////////////////////////////
	/////////////////	dark sun   //////////////////
	/////////////////////////////////////////////////
	{0x45,0xf7},
	{0x46,0xff},
	{0x47,0x15},
	{0x48,0x03}, 
	{0x4f,0x60},

	//////////////////banding//////////////////////
	{0xfe,0x00},
	{0x05,0x02},
	{0x06,0xd1}, //HB
	{0x07,0x00},
	{0x08,0x22}, //VB
	{0xfe,0x01},
	{0x25,0x00}, //step 
	{0x26,0x6a}, 
	{0x27,0x02}, //20fps
	{0x28,0x12},  
	{0x29,0x03}, //12.5fps
	{0x2a,0x50}, 
	{0x2b,0x05}, //7.14fps
	{0x2c,0xcc}, 
	{0x2d,0x07}, //5.55fps
	{0x2e,0x74},
	{0x3c,0x20},
	{0xfe,0x00},
	
	/////////////////////////////////////////////////
	///////////////////   MIPI	 ////////////////////
	/////////////////////////////////////////////////
	{0xfe,0x03},
	{0x10,0x94},
	{0xfe,0x00}, 
	
};

static gc0310_settings_t start[] = {
	{ 0x0100, 0x01 }, /* mode select streaming on */
};

static gc0310_settings_t stop[] = {
	{ 0x0100, 0x00 }, /* mode select streaming off */
};


static int i2c_write(client interface i2c_master_if i2c, int reg, int value) {
    i2c_regop_res_t result, res2;  
    result = i2c.write_reg(GC0310_I2C_ADDR, reg, value);
    if (result != I2C_REGOP_SUCCESS) {
//        printf("Failed on address %02x value %02x\n", reg, value);
        uint8_t val2;
        val2 = i2c.read_reg(GC0310_I2C_ADDR, reg, res2);
//        printf("%02x %02x %02x %02x %d %d\n", GC0310_I2C_ADDR, reg, value, val2, res2, result);
    }
    return result != I2C_REGOP_SUCCESS ? (reg == 0xfe ? 0 : -1) : 0;
}

static int i2c_write_table(client interface i2c_master_if i2c,
                    gc0310_settings_t table[],
                    int N) {
	int ret;
    for(int i = 0; i < N; i++) {
        uint32_t address = table[i].addr;
        uint32_t value   = table[i].val;
        if (address == SLEEP) {
            timer tmr;
            int t;
            tmr :> t;
            tmr when timerafter(t + TRSTUS * 100) :> void;
        }
        if (address & 0x8000) {
            address &= 0x7fff;
            ret  = i2c_write(i2c, address,   value >> 8);
            ret |= i2c_write(i2c, address+1, value & 0xff);
        } else {
            ret = i2c_write(i2c, address, value);
        }
		if (ret < 0) {
			return ret;
        }
	}
    for(int i = 240; i < 256; i++) {
    }
	return 0;
}

int gc0310_stream_stop(client interface i2c_master_if i2c) {
    return 0;
    return i2c_write_table(i2c, stop, sizeof(stop) / sizeof(stop[0]));
}

int gc0310_stream_start(client interface i2c_master_if i2c) {
	int ret;
	ret = i2c_write_table(i2c, chip_set_up, sizeof(chip_set_up) / sizeof(chip_set_up[0]));
	if (ret) {
		return ret;
    }
	return i2c_write_table(i2c, start, sizeof(start) / sizeof(start[0]));
}

#define INTEGRATION_TIMES 41
#define ANALOGUE_GAINS    20
#define DIGITAL_GAINS     25

static uint16_t gain_integration_times[INTEGRATION_TIMES] = {
    0x00a, 0x00b, 0x00c, 0x00e, 0x010, 0x012, 0x014, 0x016, 0x019,
    0x01c, 0x020, 0x024, 0x028, 0x02d, 0x033, 0x039, 0x040, 0x048,
    0x051, 0x05b, 0x066, 0x072, 0x080, 0x090, 0x0a2, 0x0b6, 0x0cc,
    0x0e5, 0x101, 0x120, 0x143, 0x16b, 0x197, 0x1c9, 0x201, 0x23f,
    0x286, 0x2d4, 0x32d, 0x390, 0x400,
};

static uint8_t gain_analogue_gains[ANALOGUE_GAINS+1] = {
    0, 28, 53, 75, 95, 112, 128, 142, 155, 166, 175, 184,
    192, 199, 205, 211, 215, 220, 224, 227, 231,
};

static uint16_t gain_digital_gains[DIGITAL_GAINS+1] = {
    0x0100, 0x011f, 0x0142, 0x0169, 0x0195, 0x01c7, 0x01fe, 0x023d,
    0x0283, 0x02d1, 0x0329, 0x038c, 0x03fb, 0x0477, 0x0503, 0x059f,
    0x064f, 0x0714, 0x07f1, 0x08e9, 0x0a00, 0x0b38, 0x0c96, 0x0e20,
    0x0fd9,
};

int gc0310_set_gain_dB(client interface i2c_master_if i2c,
                       uint32_t dBGain) {
    return 0;
    uint32_t time, again, dgain;
    if (dBGain > GAIN_MAX_DB) {
        dBGain = GAIN_MAX_DB;
    }
    if (dBGain < INTEGRATION_TIMES) {
        time = gain_integration_times[dBGain];
        again = gain_analogue_gains[0];
        dgain = gain_digital_gains[0];
    } else {
        time = gain_integration_times[INTEGRATION_TIMES-1];
        if (dBGain < INTEGRATION_TIMES + ANALOGUE_GAINS) {
            again = gain_analogue_gains[dBGain - INTEGRATION_TIMES + 1];
            dgain = gain_digital_gains[0];
        } else {
            again = gain_analogue_gains[ANALOGUE_GAINS];
            dgain = gain_digital_gains[dBGain - INTEGRATION_TIMES - ANALOGUE_GAINS + 1];
        }
    }
	int ret = i2c_write(i2c, 0x0157, again);
	ret |= i2c_write(i2c, 0x0158, dgain >> 8);
	ret |= i2c_write(i2c, 0x0159, dgain & 0xff);
	ret |= i2c_write(i2c, 0x015A, time >> 8);
	ret |= i2c_write(i2c, 0x015B, time & 0xff);

    return ret;
}

