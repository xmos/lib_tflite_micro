#include <stdint.h>
#include <stdio.h>
#include <xs1.h>
#include "i2c.h"
#include "gc2145.h"

//#define SWIDTH    3296
//#define SHEIGHT   2480
#define GC2145_I2C_ADDR (0x3C)

#define GC2145MIPI_2Lane
#define GC2145MIPI_TEST_PATTERN_CHECKSUM 0x54ddf19b 


/* GC0310 supported geometry */
#define GC2145_WIDTH			(1600)
#define GC2145_HEIGHT			(1200)

typedef struct {
	uint16_t addr;
	uint16_t val;
} gc_settings_t;

#define SLEEP   0xFFFF
#define TRSTUS  200
static gc_settings_t chip_set_up[] = {

    {0xfe, 0xf0},
	{0xfe, 0xf0},
	{0xfe, 0xf0},
	{0xfc, 0x06},
	{0xf6, 0x00},
	{0xf7, 0x1d},
	{0xf8, 0x84},
	{0xfa, 0x00},
	{0xf9, 0x8e},
	{0xf2, 0x00},
	/////////////////////////////////////////////////
	//////////////////ISP reg//////////////////////
	////////////////////////////////////////////////////
	{0xfe , 0x00},
	{0x03 , 0x04},
	{0x04 , 0xe2},
	{0x09 , 0x00},
	{0x0a , 0x00},
	{0x0b , 0x00},
	{0x0c , 0x00},
	{0x0d , 0x04},
	{0x0e , 0xc0},
	{0x0f , 0x06},
	{0x10 , 0x52},
	{0x12 , 0x2e},
	{0x17 , 0x14}, //mirror
	{0x18 , 0x22},
	{0x19 , 0x0e},
	{0x1a , 0x01},
	{0x1b , 0x4b},
	{0x1c , 0x07},
	{0x1d , 0x10},
	{0x1e , 0x88},
	{0x1f , 0x78},
	{0x20 , 0x03},
	{0x21 , 0x40},
	{0x22 , 0xa0}, 
	{0x24 , 0x16},
	{0x25 , 0x01},
	{0x26 , 0x10},
	{0x2d , 0x60},
	{0x30 , 0x01},
	{0x31 , 0x90},
	{0x33 , 0x06},
	{0x34 , 0x01},
	/////////////////////////////////////////////////
	//////////////////ISP reg////////////////////
	/////////////////////////////////////////////////
	{0xfe , 0x00},
	{0x80 , 0x7f},
	{0x81 , 0x26},
	{0x82 , 0xfa},
	{0x83 , 0x00},
	{0x84 , 0x03}, 
	{0x86 , 0x02},
	{0x88 , 0x03},
	{0x89 , 0x03},
	{0x85 , 0x08}, 
	{0x8a , 0x00},
	{0x8b , 0x00},
	{0xb0 , 0x55},
	{0xc3 , 0x00},
	{0xc4 , 0x80},
	{0xc5 , 0x90},
	{0xc6 , 0x3b},
	{0xc7 , 0x46},
	{0xec , 0x06},
	{0xed , 0x04},
	{0xee , 0x60},
	{0xef , 0x90},
	{0xb6 , 0x01},
	{0x90 , 0x01},
	{0x91 , 0x00},
	{0x92 , 0x00},
	{0x93 , 0x00},
	{0x94 , 0x00},
	{0x95 , 0x04},
	{0x96 , 0xb0},
	{0x97 , 0x06},
	{0x98 , 0x40},
	/////////////////////////////////////////
	/////////// BLK ////////////////////////
	/////////////////////////////////////////
	{0xfe , 0x00},
	{0x40 , 0x42},
	{0x41 , 0x00},
	{0x43 , 0x5b}, 
	{0x5e , 0x00}, 
	{0x5f , 0x00},
	{0x60 , 0x00}, 
	{0x61 , 0x00}, 
	{0x62 , 0x00},
	{0x63 , 0x00}, 
	{0x64 , 0x00}, 
	{0x65 , 0x00}, 
	{0x66 , 0x20},
	{0x67 , 0x20}, 
	{0x68 , 0x20}, 
	{0x69 , 0x20}, 
	{0x76 , 0x00},                                  
	{0x6a , 0x08}, 
	{0x6b , 0x08}, 
	{0x6c , 0x08}, 
	{0x6d , 0x08}, 
	{0x6e , 0x08}, 
	{0x6f , 0x08}, 
	{0x70 , 0x08}, 
	{0x71 , 0x08},   
	{0x76 , 0x00},
	{0x72 , 0xf0},
	{0x7e , 0x3c},
	{0x7f , 0x00},
	{0xfe , 0x02},
	{0x48 , 0x15},
	{0x49 , 0x00},
	{0x4b , 0x0b},
	{0xfe , 0x00},
	////////////////////////////////////////
	/////////// AEC ////////////////////////
	////////////////////////////////////////
	{0xfe , 0x01},
	{0x01 , 0x04},
	{0x02 , 0xc0},
	{0x03 , 0x04},
	{0x04 , 0x90},
	{0x05 , 0x30},
	{0x06 , 0x90},
	{0x07 , 0x30},
	{0x08 , 0x80},
	{0x09 , 0x00},
	{0x0a , 0x82},
	{0x0b , 0x11},
	{0x0c , 0x10},
	{0x11 , 0x10},
	{0x13 , 0x7b},
	{0x17 , 0x00},
	{0x1c , 0x11},
	{0x1e , 0x61},
	{0x1f , 0x35},
	{0x20 , 0x40},
	{0x22 , 0x40},
	{0x23 , 0x20},
	{0xfe , 0x02},
	{0x0f , 0x04},
	{0xfe , 0x01},
	{0x12 , 0x35},
	{0x15 , 0xb0},
	{0x10 , 0x31},
	{0x3e , 0x28},
	{0x3f , 0xb0},
	{0x40 , 0x90},
	{0x41 , 0x0f},
	
	/////////////////////////////
	//////// INTPEE /////////////
	/////////////////////////////
	{0xfe , 0x02},
	{0x90 , 0x6c},
	{0x91 , 0x03},
	{0x92 , 0xcb},
	{0x94 , 0x33},
	{0x95 , 0x84},
	{0x97 , 0x65},
	{0xa2 , 0x11},
	{0xfe , 0x00},
	/////////////////////////////
	//////// DNDD///////////////
	/////////////////////////////
	{0xfe , 0x02},
	{0x80 , 0xc1},
	{0x81 , 0x08},
	{0x82 , 0x05},
	{0x83 , 0x08},
	{0x84 , 0x0a},
	{0x86 , 0xf0},
	{0x87 , 0x50},
	{0x88 , 0x15},
	{0x89 , 0xb0},
	{0x8a , 0x30},
	{0x8b , 0x10},
	/////////////////////////////////////////
	/////////// ASDE ////////////////////////
	/////////////////////////////////////////
	{0xfe , 0x01},
	{0x21 , 0x04},
	{0xfe , 0x02},
	{0xa3 , 0x50},
	{0xa4 , 0x20},
	{0xa5 , 0x40},
	{0xa6 , 0x80},
	{0xab , 0x40},
	{0xae , 0x0c},
	{0xb3 , 0x46},
	{0xb4 , 0x64},
	{0xb6 , 0x38},
	{0xb7 , 0x01},
	{0xb9 , 0x2b},
	{0x3c , 0x04},
	{0x3d , 0x15},
	{0x4b , 0x06},
	{0x4c , 0x20},
	{0xfe , 0x00},
	/////////////////////////////////////////
	/////////// GAMMA   ////////////////////////
	/////////////////////////////////////////
	
	///////////////////gamma1////////////////////
	{0xfe , 0x02},
	{0x10 , 0x09},
	{0x11 , 0x0d},
	{0x12 , 0x13},
	{0x13 , 0x19},
	{0x14 , 0x27},
	{0x15 , 0x37},
	{0x16 , 0x45},
	{0x17 , 0x53},
	{0x18 , 0x69},
	{0x19 , 0x7d},
	{0x1a , 0x8f},
	{0x1b , 0x9d},
	{0x1c , 0xa9},
	{0x1d , 0xbd},
	{0x1e , 0xcd},
	{0x1f , 0xd9},
	{0x20 , 0xe3},
	{0x21 , 0xea},
	{0x22 , 0xef},
	{0x23 , 0xf5},
	{0x24 , 0xf9},
	{0x25 , 0xff},
	{0xfe , 0x00},     
	{0xc6 , 0x20},
	{0xc7 , 0x2b},
	///////////////////gamma2////////////////////
	{0xfe , 0x02},
	{0x26 , 0x0f},
	{0x27 , 0x14},
	{0x28 , 0x19},
	{0x29 , 0x1e},
	{0x2a , 0x27},
	{0x2b , 0x33},
	{0x2c , 0x3b},
	{0x2d , 0x45},
	{0x2e , 0x59},
	{0x2f , 0x69},
	{0x30 , 0x7c},
	{0x31 , 0x89},
	{0x32 , 0x98},
	{0x33 , 0xae},
	{0x34 , 0xc0},
	{0x35 , 0xcf},
	{0x36 , 0xda},
	{0x37 , 0xe2},
	{0x38 , 0xe9},
	{0x39 , 0xf3},
	{0x3a , 0xf9},
	{0x3b , 0xff},
	/////////////////////////////////////////////// 
	///////////YCP /////////////////////// 
	/////////////////////////////////////////////// 
	{0xfe , 0x02},
	{0xd1 , 0x32},
	{0xd2 , 0x32},
	{0xd3 , 0x40},
	{0xd6 , 0xf0},
	{0xd7 , 0x10},
	{0xd8 , 0xda},
	{0xdd , 0x14},
	{0xde , 0x86},
	{0xed , 0x80},
	{0xee , 0x00},
	{0xef , 0x3f},
	{0xd8 , 0xd8},
	///////////////////abs/////////////////
	{0xfe , 0x01},
	{0x9f , 0x40},
	/////////////////////////////////////////////
	//////////////////////// LSC ///////////////
	//////////////////////////////////////////
	{0xfe , 0x01},
	{0xc2 , 0x14},
	{0xc3 , 0x0d},
	{0xc4 , 0x0c},
	{0xc8 , 0x15},
	{0xc9 , 0x0d},
	{0xca , 0x0a},
	{0xbc , 0x24},
	{0xbd , 0x10},
	{0xbe , 0x0b},
	{0xb6 , 0x25},
	{0xb7 , 0x16},
	{0xb8 , 0x15},
	{0xc5 , 0x00},
	{0xc6 , 0x00},
	{0xc7 , 0x00},
	{0xcb , 0x00},
	{0xcc , 0x00},
	{0xcd , 0x00},
	{0xbf , 0x07},
	{0xc0 , 0x00},
	{0xc1 , 0x00},
	{0xb9 , 0x00},
	{0xba , 0x00},
	{0xbb , 0x00},
	{0xaa , 0x01},
	{0xab , 0x01},
	{0xac , 0x00},
	{0xad , 0x05},
	{0xae , 0x06},
	{0xaf , 0x0e},
	{0xb0 , 0x0b},
	{0xb1 , 0x07},
	{0xb2 , 0x06},
	{0xb3 , 0x17},
	{0xb4 , 0x0e},
	{0xb5 , 0x0e},
	{0xd0 , 0x09},
	{0xd1 , 0x00},
	{0xd2 , 0x00},
	{0xd6 , 0x08},
	{0xd7 , 0x00},
	{0xd8 , 0x00},
	{0xd9 , 0x00},
	{0xda , 0x00},
	{0xdb , 0x00},
	{0xd3 , 0x0a},
	{0xd4 , 0x00},
	{0xd5 , 0x00},
	{0xa4 , 0x00},
	{0xa5 , 0x00},
	{0xa6 , 0x77},
	{0xa7 , 0x77},
	{0xa8 , 0x77},
	{0xa9 , 0x77},
	{0xa1 , 0x80},
	{0xa2 , 0x80},
	               
	{0xfe , 0x01},
	{0xdf , 0x0d},
	{0xdc , 0x25},
	{0xdd , 0x30},
	{0xe0 , 0x77},
	{0xe1 , 0x80},
	{0xe2 , 0x77},
	{0xe3 , 0x90},
	{0xe6 , 0x90},
	{0xe7 , 0xa0},
	{0xe8 , 0x90},
	{0xe9 , 0xa0},                                      
	{0xfe , 0x00},
	///////////////////////////////////////////////
	/////////// AWB////////////////////////
	///////////////////////////////////////////////
	{0xfe , 0x01},
	{0x4f , 0x00},
	{0x4f , 0x00},
	{0x4b , 0x01},
	{0x4f , 0x00},
	         
	{0x4c , 0x01}, // D75
	{0x4d , 0x71},
	{0x4e , 0x01},
	{0x4c , 0x01},
	{0x4d , 0x91},
	{0x4e , 0x01},
	{0x4c , 0x01},
	{0x4d , 0x70},
	{0x4e , 0x01},
	         
	{0x4c , 0x01}, // D65
	{0x4d , 0x90},
	{0x4e , 0x02},                                    
	         
	         
	{0x4c , 0x01},
	{0x4d , 0xb0},
	{0x4e , 0x02},
	{0x4c , 0x01},
	{0x4d , 0x8f},
	{0x4e , 0x02},
	{0x4c , 0x01},
	{0x4d , 0x6f},
	{0x4e , 0x02},
	{0x4c , 0x01},
	{0x4d , 0xaf},
	{0x4e , 0x02},
	         
	{0x4c , 0x01},
	{0x4d , 0xd0},
	{0x4e , 0x02},
	{0x4c , 0x01},
	{0x4d , 0xf0},
	{0x4e , 0x02},
	{0x4c , 0x01},
	{0x4d , 0xcf},
	{0x4e , 0x02},
	{0x4c , 0x01},
	{0x4d , 0xef},
	{0x4e , 0x02},
	         
	{0x4c , 0x01},//D50
	{0x4d , 0x6e},
	{0x4e , 0x03},
	{0x4c , 0x01}, 
	{0x4d , 0x8e},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0xae},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0xce},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0x4d},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0x6d},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0x8d},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0xad},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0xcd},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0x4c},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0x6c},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0x8c},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0xac},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0xcc},
	{0x4e , 0x03},
	         
	{0x4c , 0x01},
	{0x4d , 0xcb},
	{0x4e , 0x03},
	         
	{0x4c , 0x01},
	{0x4d , 0x4b},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0x6b},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0x8b},
	{0x4e , 0x03},
	{0x4c , 0x01},
	{0x4d , 0xab},
	{0x4e , 0x03},
	         
	{0x4c , 0x01},//CWF
	{0x4d , 0x8a},
	{0x4e , 0x04},
	{0x4c , 0x01},
	{0x4d , 0xaa},
	{0x4e , 0x04},
	{0x4c , 0x01},
	{0x4d , 0xca},
	{0x4e , 0x04},
	{0x4c , 0x01},
	{0x4d , 0xca},
	{0x4e , 0x04},
	{0x4c , 0x01},
	{0x4d , 0xc9},
	{0x4e , 0x04},
	{0x4c , 0x01},
	{0x4d , 0x8a},
	{0x4e , 0x04},
	{0x4c , 0x01},
	{0x4d , 0x89},
	{0x4e , 0x04},
	{0x4c , 0x01},
	{0x4d , 0xa9},
	{0x4e , 0x04},
	         
	         
	         
	{0x4c , 0x02},//tl84
	{0x4d , 0x0b},
	{0x4e , 0x05},
	{0x4c , 0x02},
	{0x4d , 0x0a},
	{0x4e , 0x05},
	         
	{0x4c , 0x01},
	{0x4d , 0xeb},
	{0x4e , 0x05},
	         
	{0x4c , 0x01},
	{0x4d , 0xea},
	{0x4e , 0x05},
	                 
	{0x4c , 0x02},
	{0x4d , 0x09},
	{0x4e , 0x05},
	{0x4c , 0x02},
	{0x4d , 0x29},
	{0x4e , 0x05},
	                     
	{0x4c , 0x02},
	{0x4d , 0x2a},
	{0x4e , 0x05},
	                      
	{0x4c , 0x02},
	{0x4d , 0x4a},
	{0x4e , 0x05},
	
	//{0x4c , 0x02}, //A
	//{0x4d , 0x6a},
	//{0x4e , 0x06},
	
	{0x4c , 0x02}, 
	{0x4d , 0x8a},
	{0x4e , 0x06},
	                
	{0x4c , 0x02},
	{0x4d , 0x49},
	{0x4e , 0x06},
	{0x4c , 0x02},
	{0x4d , 0x69},
	{0x4e , 0x06},
	{0x4c , 0x02},
	{0x4d , 0x89},
	{0x4e , 0x06},
	{0x4c , 0x02},
	{0x4d , 0xa9},
	{0x4e , 0x06},
	               
	{0x4c , 0x02},
	{0x4d , 0x48},
	{0x4e , 0x06},
	{0x4c , 0x02},
	{0x4d , 0x68},
	{0x4e , 0x06},
	{0x4c , 0x02},
	{0x4d , 0x69},
	{0x4e , 0x06},
	             
	{0x4c , 0x02},//H
	{0x4d , 0xca},
	{0x4e , 0x07},
	{0x4c , 0x02},
	{0x4d , 0xc9},
	{0x4e , 0x07},
	{0x4c , 0x02},
	{0x4d , 0xe9},
	{0x4e , 0x07},
	{0x4c , 0x03},
	{0x4d , 0x09},
	{0x4e , 0x07},
	{0x4c , 0x02},
	{0x4d , 0xc8},
	{0x4e , 0x07},
	{0x4c , 0x02},
	{0x4d , 0xe8},
	{0x4e , 0x07},
	{0x4c , 0x02},
	{0x4d , 0xa7},
	{0x4e , 0x07},
	{0x4c , 0x02},
	{0x4d , 0xc7},
	{0x4e , 0x07},
	{0x4c , 0x02},
	{0x4d , 0xe7},
	{0x4e , 0x07},
	{0x4c , 0x03},
	{0x4d , 0x07},
	{0x4e , 0x07},
	
	{0x4f , 0x01},
	{0x50 , 0x80},
	{0x51 , 0xa8},
	{0x52 , 0x47},
	{0x53 , 0x38},
	{0x54 , 0xc7},
	{0x56 , 0x0e},
	{0x58 , 0x08},
	{0x5b , 0x00},
	{0x5c , 0x74},
	{0x5d , 0x8b},
	{0x61 , 0xdb},
	{0x62 , 0xb8},
	{0x63 , 0x86},
	{0x64 , 0xc0},
	{0x65 , 0x04},
	
	{0x67 , 0xa8},
	{0x68 , 0xb0},
	{0x69 , 0x00},
	{0x6a , 0xa8},
	{0x6b , 0xb0},
	{0x6c , 0xaf},
	{0x6d , 0x8b},
	{0x6e , 0x50},
	{0x6f , 0x18},
	{0x73 , 0xf0},
	{0x70 , 0x0d},
	{0x71 , 0x60},
	{0x72 , 0x80},
	{0x74 , 0x01},
	{0x75 , 0x01},
	{0x7f , 0x0c},
	{0x76 , 0x70},
	{0x77 , 0x58},
	{0x78 , 0xa0},
	{0x79 , 0x5e},
	{0x7a , 0x54},
	{0x7b , 0x58},                                      
	{0xfe , 0x00},
	//////////////////////////////////////////
	///////////CC////////////////////////
	//////////////////////////////////////////
	{0xfe , 0x02},
	{0xc0 , 0x01},                                   
	{0xc1 , 0x44},
	{0xc2 , 0xfd},
	{0xc3 , 0x04},
	{0xc4 , 0xf0},
	{0xc5 , 0x48},
	{0xc6 , 0xfd},
	{0xc7 , 0x46},
	{0xc8 , 0xfd},
	{0xc9 , 0x02},
	{0xca , 0xe0},
	{0xcb , 0x45},
	{0xcc , 0xec},                         
	{0xcd , 0x48},
	{0xce , 0xf0},
	{0xcf , 0xf0},
	{0xe3 , 0x0c},
	{0xe4 , 0x4b},
	{0xe5 , 0xe0},
	//////////////////////////////////////////
	///////////ABS ////////////////////
	//////////////////////////////////////////
	{0xfe , 0x01},
	{0x9f , 0x40},
	{0xfe , 0x00}, 
	//////////////////////////////////////
	///////////  OUTPUT   ////////////////
	//////////////////////////////////////
	{0xfe, 0x00},
	{0xf2, 0x00},
	
	//////////////frame rate 50Hz/////////
	{0xfe , 0x00},
	{0x05 , 0x01},
	{0x06 , 0x56},
	{0x07 , 0x00},
	{0x08 , 0x32},
	{0xfe , 0x01},
	{0x25 , 0x00},
	{0x26 , 0xfa}, 
	{0x27 , 0x04}, 
	{0x28 , 0xe2}, //20fps 
	{0x29 , 0x06}, 
	{0x2a , 0xd6}, //14fps 
	{0x2b , 0x07}, 
	{0x2c , 0xd0}, //12fps
	{0x2d , 0x0b}, 
	{0x2e , 0xb8}, //8fps
	{0xfe , 0x00},
	
	///////////////dark sun////////////////////
	{0xfe , 0x02},
	{0x40 , 0xbf},
	{0x46 , 0xcf},
	{0xfe , 0x00},
	/////////////////////////////////////////////////////
	//////////////////////   MIPI   /////////////////////
	/////////////////////////////////////////////////////
	{0xfe, 0x03},
	{0x02, 0x22},
	{0x03, 0x10}, // 0x12 20140821
	{0x04, 0x10}, // 0x01 
	{0x05, 0x00},
	{0x06, 0x88},
	#ifdef GC2145MIPI_2Lane
		{0x01, 0x87},
		{0x10, 0x95},
	#else
		{0x01, 0x83},
		{0x10, 0x94},
	#endif
	{0x11, 0x1e},
	{0x12, 0x80},
	{0x13, 0x0c},
	{0x15, 0x10},
	{0x17, 0xf0},
	
	{0x21, 0x10},
	{0x22, 0x04},
	{0x23, 0x10},
	{0x24, 0x10},
	{0x25, 0x10},
	{0x26, 0x05},
	{0x29, 0x03},
	{0x2a, 0x0a},
	{0x2b, 0x06},
	{0xfe, 0x00},

	};
	
	
static gc_settings_t start[] = { // TODO 2145
	{ 0x0100, 0x01 }, /* mode select streaming on */
};

static gc_settings_t stop[] = { // TODO 2145
	{ 0x0100, 0x00 }, /* mode select streaming off */
};
	
static int i2c_write(client interface i2c_master_if i2c, int reg, int value) {
    i2c_regop_res_t result, res2;  
    result = i2c.write_reg(GC2145_I2C_ADDR, reg, value);
    if (result != I2C_REGOP_SUCCESS) {
        printf("Failed on address %02x value %02x\n", reg, value);
        uint8_t val2;
        val2 = i2c.read_reg(GC2145_I2C_ADDR, reg, res2);
        printf("%02x %02x %02x %02x %d %d\n", GC2145_I2C_ADDR, reg, value, val2, res2, result);
    }
    return result != I2C_REGOP_SUCCESS ? (reg == 0xfe ? 0 : -1) : 0;
}

static int i2c_write_table(client interface i2c_master_if i2c,
                    gc_settings_t table[],
                    int N) {
	int ret;
    for(int i = 0; i < N; i++) {
        uint32_t address = table[i].addr;
        uint32_t value   = table[i].val;
        if (address == SLEEP) {
            timer tmr;
            int t;
            tmr :> t;
            tmr when timerafter(t + TRSTUS * 100) :> void;
        }
        if (address & 0x8000) {
            address &= 0x7fff;
            ret  = i2c_write(i2c, address,   value >> 8);
            ret |= i2c_write(i2c, address+1, value & 0xff);
        } else {
            ret = i2c_write(i2c, address, value);
        }
		if (ret < 0) {
			return ret;
        }
	}
    for(int i = 240; i < 256; i++) {
    }
	return 0;
}

int gc2145_stream_stop(client interface i2c_master_if i2c) {
    return 0;
//    return i2c_write_table(i2c, stop, sizeof(stop) / sizeof(stop[0]));
}

int gc2145_stream_start(client interface i2c_master_if i2c) {
	int ret;
	ret = i2c_write_table(i2c, chip_set_up, sizeof(chip_set_up) / sizeof(chip_set_up[0]));
	if (ret) {
		return ret;
    }
	return i2c_write_table(i2c, start, sizeof(start) / sizeof(start[0]));
}



/*
#define INTEGRATION_TIMES 41
#define ANALOGUE_GAINS    20
#define DIGITAL_GAINS     25

static uint16_t gain_integration_times[INTEGRATION_TIMES] = {
    0x00a, 0x00b, 0x00c, 0x00e, 0x010, 0x012, 0x014, 0x016, 0x019,
    0x01c, 0x020, 0x024, 0x028, 0x02d, 0x033, 0x039, 0x040, 0x048,
    0x051, 0x05b, 0x066, 0x072, 0x080, 0x090, 0x0a2, 0x0b6, 0x0cc,
    0x0e5, 0x101, 0x120, 0x143, 0x16b, 0x197, 0x1c9, 0x201, 0x23f,
    0x286, 0x2d4, 0x32d, 0x390, 0x400,
};

static uint8_t gain_analogue_gains[ANALOGUE_GAINS+1] = {
    0, 28, 53, 75, 95, 112, 128, 142, 155, 166, 175, 184,
    192, 199, 205, 211, 215, 220, 224, 227, 231,
};

static uint16_t gain_digital_gains[DIGITAL_GAINS+1] = {
    0x0100, 0x011f, 0x0142, 0x0169, 0x0195, 0x01c7, 0x01fe, 0x023d,
    0x0283, 0x02d1, 0x0329, 0x038c, 0x03fb, 0x0477, 0x0503, 0x059f,
    0x064f, 0x0714, 0x07f1, 0x08e9, 0x0a00, 0x0b38, 0x0c96, 0x0e20,
    0x0fd9,
};

int gc0310_set_gain_dB(client interface i2c_master_if i2c,
                       uint32_t dBGain) {
    return 0;
    uint32_t time, again, dgain;
    if (dBGain > GAIN_MAX_DB) {
        dBGain = GAIN_MAX_DB;
    }
    if (dBGain < INTEGRATION_TIMES) {
        time = gain_integration_times[dBGain];
        again = gain_analogue_gains[0];
        dgain = gain_digital_gains[0];
    } else {
        time = gain_integration_times[INTEGRATION_TIMES-1];
        if (dBGain < INTEGRATION_TIMES + ANALOGUE_GAINS) {
            again = gain_analogue_gains[dBGain - INTEGRATION_TIMES + 1];
            dgain = gain_digital_gains[0];
        } else {
            again = gain_analogue_gains[ANALOGUE_GAINS];
            dgain = gain_digital_gains[dBGain - INTEGRATION_TIMES - ANALOGUE_GAINS + 1];
        }
    }
	int ret = i2c_write(i2c, 0x0157, again);
	ret |= i2c_write(i2c, 0x0158, dgain >> 8);
	ret |= i2c_write(i2c, 0x0159, dgain & 0xff);
	ret |= i2c_write(i2c, 0x015A, time >> 8);
	ret |= i2c_write(i2c, 0x015B, time & 0xff);

    return ret;
}

static void GC2145MIPI_Sensor_2M(client interface i2c_master_if i2c)
{
	SENSORDB("GC2145MIPI_Sensor_2M");
	GC2145MIPI_write_cmos_sensor(i2c, 0xfe, 0x00);
	GC2145MIPI_write_cmos_sensor(i2c, 0xfd, 0x00); 
#ifdef GC2145MIPI_2Lane
	GC2145MIPI_write_cmos_sensor(i2c, 0xfa, 0x00); 
#else
	GC2145MIPI_write_cmos_sensor(i2c, 0xfa, 0x11); 
#endif
	//// crop window           
	GC2145MIPI_write_cmos_sensor(i2c, 0xfe, 0x00);
	GC2145MIPI_write_cmos_sensor(i2c, 0x90, 0x01); 
	GC2145MIPI_write_cmos_sensor(i2c, 0x91, 0x00);
	GC2145MIPI_write_cmos_sensor(i2c, 0x92, 0x00);
	GC2145MIPI_write_cmos_sensor(i2c, 0x93, 0x00);
	GC2145MIPI_write_cmos_sensor(i2c, 0x94, 0x00);
	GC2145MIPI_write_cmos_sensor(i2c, 0x95, 0x04);
	GC2145MIPI_write_cmos_sensor(i2c, 0x96, 0xb0);
	GC2145MIPI_write_cmos_sensor(i2c, 0x97, 0x06);
	GC2145MIPI_write_cmos_sensor(i2c, 0x98, 0x40);
	GC2145MIPI_write_cmos_sensor(i2c, 0x99, 0x11); 
	GC2145MIPI_write_cmos_sensor(i2c, 0x9a, 0x06);
	//// AWB                   
	GC2145MIPI_write_cmos_sensor(i2c, 0xfe, 0x00);
	GC2145MIPI_write_cmos_sensor(i2c, 0xec, 0x06); 
	GC2145MIPI_write_cmos_sensor(i2c, 0xed, 0x04);
	GC2145MIPI_write_cmos_sensor(i2c, 0xee, 0x60);
	GC2145MIPI_write_cmos_sensor(i2c, 0xef, 0x90);
	GC2145MIPI_write_cmos_sensor(i2c, 0xfe, 0x01);
	GC2145MIPI_write_cmos_sensor(i2c, 0x74, 0x01); 
	//// AEC                    
	GC2145MIPI_write_cmos_sensor(i2c, 0xfe, 0x01);
	GC2145MIPI_write_cmos_sensor(i2c, 0x01, 0x04);
	GC2145MIPI_write_cmos_sensor(i2c, 0x02, 0xc0);
	GC2145MIPI_write_cmos_sensor(i2c, 0x03, 0x04);
	GC2145MIPI_write_cmos_sensor(i2c, 0x04, 0x90);
	GC2145MIPI_write_cmos_sensor(i2c, 0x05, 0x30);
	GC2145MIPI_write_cmos_sensor(i2c, 0x06, 0x90);
	GC2145MIPI_write_cmos_sensor(i2c, 0x07, 0x30);
	GC2145MIPI_write_cmos_sensor(i2c, 0x08, 0x80);
	GC2145MIPI_write_cmos_sensor(i2c, 0x0a, 0x82);
#ifdef GC2145MIPI_2Lane
	GC2145MIPI_write_cmos_sensor(i2c, 0xfe, 0x01);
	GC2145MIPI_write_cmos_sensor(i2c, 0x21, 0x04); 
	GC2145MIPI_write_cmos_sensor(i2c, 0xfe, 0x00);
	GC2145MIPI_write_cmos_sensor(i2c, 0x20, 0x03); 
#else
	GC2145MIPI_write_cmos_sensor(i2c, 0xfe, 0x01);
	GC2145MIPI_write_cmos_sensor(i2c, 0x21, 0x15); 
	GC2145MIPI_write_cmos_sensor(i2c, 0xfe, 0x00);
	GC2145MIPI_write_cmos_sensor(i2c, 0x20, 0x15); 
#endif
	//// mipi
	GC2145MIPI_write_cmos_sensor(i2c, 0xfe, 0x03);
	GC2145MIPI_write_cmos_sensor(i2c, 0x12, 0x80);
	GC2145MIPI_write_cmos_sensor(i2c, 0x13, 0x0c);
	GC2145MIPI_write_cmos_sensor(i2c, 0x04, 0x01);
	GC2145MIPI_write_cmos_sensor(i2c, 0x05, 0x00);
	GC2145MIPI_write_cmos_sensor(i2c, 0xfe, 0x00);

}

*/
